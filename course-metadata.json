{
  "id": "68d6a34988b86b203f95b20a",
  "title": "React Curriculum V3",
  "description": "No description available",
  "learningObjectives": [
    "No learning objectives"
  ],
  "finalProjectDetails": {
    "overview": "No final project specified.",
    "planningResources": [],
    "submissionInstructions": "No submission instructions provided.",
    "requirements": [
      "No requirements specified."
    ]
  },
  "createdBy": {
    "name": "Hanna Akhramchuk",
    "githubUsername": "akhhanna20"
  },
  "contributors": [],
  "status": "pending",
  "originalGithubUrl": "https://github.com/Code-the-Dream-School/react-curriculum-v3",
  "remoteGithubUrl": "https://github.com/akhhanna20/react-curriculum-v3-112",
  "createdAt": "2025-09-26T14:29:29.591Z",
  "updatedAt": "2025-09-26T14:33:43.397Z",
  "lessonCount": 17,
  "lessonMetadata": [
    {
      "id": "68d6a34a88b86b203f95b298",
      "lessonNumber": 0,
      "title": "Class Information",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 0",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "## Weekly Assignment Instructions\n\nWe are almost done with this week as we prepare to jump into the course. You are encouraged to become familiar with all the material above and the student handbook. A thorough review of all materials will help you set up a routine that will support your learning.\n\n- [ ] After reading this week's materials you will probably have a few questions. Write down your questions that you have. Bring them to your first group session and share them with the mentor hosting that session.\n- [ ] Finally, complete the quiz at the following link. <!-- PLACEHOLDER --> will let us know that you understand how to navigate the course.\n\nThere is no coding assignment for this week.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b29e"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "# Class Information\n\n## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b299"
        },
        {
          "subsectionOrder": 2,
          "title": "What You'll Get Out of this Course",
          "content": "You will be learning React, a popular user interface (UI) development library used to create interactive web applications. We will build a [to-do list](https://en.wikipedia.org/wiki/Time_management#Implementation_of_goals) application over the course of the weekly assignments. The final two weeks of the course are dedicated to a final project. With the knowledge gained from this course, you will be equipped with the knowledge to work on real-world React applications!",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b29a"
        },
        {
          "subsectionOrder": 3,
          "title": "Course Structure",
          "content": "#### Curriculum Outline\n\nThe Intro to React v3 course consists of 13 weekly lessons and 2 project weeks for a final project of your choosing. Each of the weekly lessons builds on previous lessons so it is important that you go through the course in order. Don't skip around or miss a week.\n\n- **Weeks 1-6** focus on the basics of React and how to build out a simple application\n- **Weeks 7-9** teach how to incorporate remote data fetched from and saved to an API\n- **Week 10** covers how to use CSS to style an application's user interface (UI)\n- **Weeks 11-12** teach techniques to manage complex data in an application\n- **Week 13** introduces common tools and libraries that a React developer will need to know about\n- **Week 14-15** project time!\n\nOne of the main requirements for graduation is that all weekly assignments must include a link to a [pull request (PR)](https://github.blog/developer-skills/github/beginners-guide-to-github-creating-a-pull-request/) that has been reviewed and approved by your assigned reviewer.\n\nThe materials for the course is further broken down into a full list of topics covered each week. Every section is titled with their topics so that they double as useful search terms when looking for external resources.\n\n- **Week 1** - Intro to React, App Installation, and Project Walk-Through\n- **Week 2** - ReactDOM, Components, JSX, and Troubleshooting\n- **Week 3** - State, Props, Common Component Props\n- **Week 4** - Basic Hooks, Events and Handlers, Updating State\n- **Week 5** - Conditional Rendering, Controlled Components and Forms\n- **Week 6** - Re-usable Components, Project Organization, Refactoring, and Testing\n- **Week 7** - Data fetching, Conditional Rendering, UI Update Strategies\n- **Week 8** - Sorting, Filtering\n- **Week 9** - useCallback, useMemo, Limiting Network Requests\n- **Week 10** - Styling and Including Graphical Elements\n- **Week 11** - Advanced State and useReducer, useContext\n- **Week 12** - Pagination and React-Router\n- **Week 13** - Deploying an App and a Snapshot of the React Ecosystem (frameworks, libraries, TS)\n- **Week 14** - Final Project Begin - Requirements, Planning, and Getting Started\n- **Week 15** - Final Project - Continued Work",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b29b"
        },
        {
          "subsectionOrder": 4,
          "title": "Weekly Lesson Structure",
          "content": "Each weekly lesson page has the same structure so you'll know where to find specific information where you need it:\n\n1. Introduction\n   1. Topics covered\n   2. Objectives\n2. Discussion\n   1. Cover topics in order\n   2. Code examples\n3. Weekly assignment instructions\n   1. Description of app's capabilities on submission\n   2. Instructions\n4. References and Further Reading\n\n#### 1. Introduction\n\nThe introduction will give you information about what you're going to learn that week and how it applies to to the bigger picture.\n\n#### 2. Discussion\n\nIn the discussion portion of each weekly lesson, we will explore each of the listed topics in depth. We will learn key techniques and best practices that developers employ while working with the topics presented. Many coding examples are from another project we'll watch come together: CTD's new eCommerce Store : CTD Swag. No coding for that project is required from you, but if you're interested, a repo for this project can be [found here](https://github.com/royemosby/ctd-swag).\n\n#### 3. Weekly Assignment Instructions\n\nMost of our weekly assignments will involve developing a to-do application. Each week you will apply the lesson materials to develop the to-do app until it is complete, functional, and is worthy of a place in your portfolio.\n\nThe instructions will provide enough details to code out the week's assignment but you will also be given certain tasks to figure out how to accomplish on your own. Balancing written instruction with individual problem solving keeps the course reasonably challenging and a lot more interesting than a list of things to type into your code. Professional developers are expected to engage in problem solving and research while doing their work. Some tasks you will be responsible for may be challenging but are designed to be reasonable for a junior developer to undertake.\n\nOnce completed with the weekly lesson instructions, you'll submit a PR of the week's code changes using an assignment submission form linked at the the \"Instructions\" section. A step-by-step of how to open a PR can be [found here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). The assignment submission form also includes open-ended mindset questions that will help you start to think like a professional developers.\n\nA reviewer will look at the PR to approve it or recommend changes. You'll be expected to make any requested changes before starting the next lesson. If you have questions about the review or need any clarifications, use the conversation tools on the PR page and/or Slack to talk with your reviewer. They are there to help you out!\n\nA final note: there will be a few weeks where you will work with other repos but those will be clearly indicated in the assignment instructions.\n\n#### 4. References and Further Reading\n\nThe curriculum links to resources in each lesson but these can be difficult to find when scanning through paragraphs of text. Every weekly lesson's page ends with a section that re-lists all of these links and include other useful resources.\n\nWe hope that you find the weekly lesson page layout easy to navigate. If you have any suggestions to improve your learning experience or discover useful resources you want to share with future students, [please let us know](https://github.com/Code-the-Dream-School/react-curriculum-v3/issues)!",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b29c"
        },
        {
          "subsectionOrder": 5,
          "title": "Final Project",
          "content": "The final two weeks of the course will be used to develop a final project. You will demonstrate your React knowledge to make a web application of your own choosing! It will be an opportunity to work on a problem that you find interesting or an idea that sounds like fun. Don't worry at this point if you don't have any project ideas. We will brainstorm some ideas and discuss how to plan our project work before starting on it.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b29d"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b21c",
      "lessonNumber": 1,
      "title": "# Discussion Topics",
      "status": "complete",
      "assignment": {
        "title": "Assignment for Lesson 1",
        "objective": "## Weekly Assignment Instructions\n\n>[!note]\n>We are building a todo app for the weekly assignments. You are welcome to code along with CTD Swag but that project will not be turned in.\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- be in a version controlled directory linked to a GitHub repo\n- use Vite's React template using JavaScript (no TS or SWC)\n- start with no console errors or warnings\n- render a title and an unordered list of todos",
        "expectedCapabilities": [],
        "submissionInstructions": "Please submit on time",
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Repo Setup for the Todo App",
            "description": "#### Create new public repo on GitHub\n\n- give it the name \"todo-list\" or something similar and description\n- don't add a .gitignore or a license\n- clone the repo to your local environment (this differs based on if you're using HTTPS, SSH, or GitHub Desktop. See [GitHub's documentation on remote repos](https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories) for more details.)\n- don't create a new branch yet - remain on `main` branch",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b223"
          },
          {
            "taskNumber": 2,
            "title": "Installation",
            "description": "#### Scaffold Vite Using CLI\n\n- Bootstrap a new project with command: `npm create vite@latest . -- --template react`\n- Install with command: `npm install`\n\nYou will end up with a project structure that looks similar to the following:\n\n![screen capture of the newly installed project directory](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-01/project-directory.png)",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b224"
          },
          {
            "taskNumber": 3,
            "title": "Project Setup",
            "description": "> [!notes]\n>\n> - Some of the cleanup steps may cause errors to appear in the browser window and console but they will resolve themselves.\n> - The odd, html-like syntax in the return statements is called JSX - we'll cover that next week.\n> - We also won't provide all the code snippets in every assignment. The only reason why we're doing that here is because you have not been introduced to JSX yet.\n\n#### Version Control Tasks\n\nWe want to preserve a fresh installation of the project in case anything happens to our code. Rather than having to re-install, we can revert back to this version!\n\n- Stage all the files with git: `git add .`\n- Commit them to main: `git commit -m \"installed react\"`\n- Push the changes to GitHub: `git push`\n- Create and check out a new branch for week 1's assignment before continuing: `git checkout -b week-01-setup`\n- Publish the branch to github: `git push origin week-01-setup`\n\n#### Clean up Template\n\n- Start the development server with the command: `npm run dev`\n- Open a browser to the **Local** link listed in the CLI\n- Delete the contents of App.css but keep the file.\n- Delete the contents of index.css but keep the file.\n- Clean up App's code:\n  - Remove all imports except for App.css\n  - Delete the line containing `const [count, setCount] = useState(0)`\n  - Remove everything from the return statement.\n  - In the now empty return statement, add a div containing an h1 for the title for the app\n\nYour App component should look like:\n\n```jsx\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>My Todos</h1>\n    </div>\n  )\n}\n\nexport default App\n```\n\nRefresh the page and you'll end up with something that looks like the screencap below. Note that the console contains no errors.\n\n![screen capture of app title in browser](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-01/title-screencap.png)\n\n#### Add First Todos\n\nIn App.jsx:\n\n- After App's first line but before the return statement, create an array named `todos`containing 3 empty objects. Each one of those objects will represent a todo.\n- Populate each object with a todo using the following object keys: `id` and `title`.\n\n```jsx\n{/*extract from App.jsx*/}\nfunction App() {\nconst todos = [\n    {id: 1, title: \"review resources\"},\n    {id: 2, title: \"take notes\"},\n    {id: 3, title: \"code out app\"},\n]\n{/*code continues...*/}\n```\n\n- Below the h1 in the return statement, create an unordered list using html tags.\n- Place an empty code block between the list's opening and closing tags `<ul>{}</ul>`\n- Inside the code block, map the todos to html that will render a list item per todo.\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nreturn (\n    <div>\n        <h1>Todo List</h1>\n        <ul>\n            {todos.map(todo => <li key={todo.id}>{todo.title}</li>)}\n        </ul>\n    </div>\n  );\n{/*code continues...*/}\n```\n\nIn the browser, you should have a list of 3 todos under the app's title:\n\n![screen capture of the todos in browser](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-01/todos-screencap.png)\n\n### Stretch Goals Instructions (optional)\n\n*Skip to **Instructions Part 4** if you are not interested in ESLint or Prettier.*\n\n#### Enable ESLint to Highlight Code Problems  (Stretch goal 1 of 2)\n\n- in VS Code, click on the extensions icon in the left-hand sidebar\n\n![screen capture highlighting extension icon in VS Code's tool tray](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-01/extensions-icon.png)\n\n- search for \"ESLint\". The appropriate extension will have the following icon:\n\n![screen capture of the VS Code extension search results for ESLint](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-01/eslint.png)\n\n- You need to add another plugin package, eslint-plugin-react, for additional usefulReact linting rules:\n  - In the terminal, install it using `npm install eslint-plugin-react --save-dev`\n  - Go to `eslint.config.js` add the import statement `import react from 'eslint-plugin-react';` above the `reactHooks` import.\n  - In the second object in the exported array:\n    - Add a `settings` object: `settings: { react: { version: 'detect' } },`.\n    - This should be placed just above the `plugins` object.\n  - Add `react` to the `plugins` object, above `react-hooks: reactHooks`. *tip: You don't need to include a key/value pair like the other plugins.*\n  - Add the following to the `rules` below `...js.configs.recommended.rules,`\n    - `...react.configs.recommended.rules,`\n    - `...react.configs['jsx-runtime'].rules,`\n- Take some time to review the `eslint.config.js` file you just updated. Documentation for the [ESLint plugin](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) and [ESLint library](https://eslint.org/) can explain most of the contents.\n- Finally, we recommend adding the following entries to the `rules` object:\n\n```js\nrules: {\n        //...other rules\n        'no-unused-vars': 'warn', //this changes the error to a warning\n        'react/prop-types': 'off', //this suppresses warnings about not using prop-types\n        //other rules...\n}\n```\n\n#### Integrate Prettier (Stretch goal 2 of 2)\n\n##### Install Prettier in VS Code\n\n- search for \"Prettier\". Choose the following from the results:\n\n![screen capture of the VS Code extension search results for Prettier](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-01/prettier.png)\n\n- after installed, go to VS Code's settings and search for \"format\"\n  - find the \"Default Formatter\" setting and change the option to Prettier - Code formatter.\n  - If you've previously modified VS Code settings, refer to the full installation instructions on the [Prettier's VS Code Extension homepage](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) to to help with troubleshooting.\n\n##### Install Prettier in the Project\n\n- In the terminal issue the command: `npm install --save-dev --save-exact prettier`\n- Create a .prettierrc file at the root of the project directory\n  - You can use this to add any special formatting rules by adding a JSON object\n  - All configuration options can be found on [Prettier's configuration page](https://prettier.io/docs/configuration).\n  - We recommend starting the snippet below and modify it based on what you find useful.\n\n```json\n{\n\"semi\": true,\n\"singleQuote\": true,\n\"trailingComma\": \"es5\"\n}\n```",
            "codeExample": "```jsx\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>My Todos</h1>\n    </div>\n  )\n}\n\nexport default App\n```\n\n```jsx\n{/*extract from App.jsx*/}\nfunction App() {\nconst todos = [\n    {id: 1, title: \"review resources\"},\n    {id: 2, title: \"take notes\"},\n    {id: 3, title: \"code out app\"},\n]\n{/*code continues...*/}\n```\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nreturn (\n    <div>\n        <h1>Todo List</h1>\n        <ul>\n            {todos.map(todo => <li key={todo.id}>{todo.title}</li>)}\n        </ul>\n    </div>\n  );\n{/*code continues...*/}\n```\n\n```js\nrules: {\n        //...other rules\n        'no-unused-vars': 'warn', //this changes the error to a warning\n        'react/prop-types': 'off', //this suppresses warnings about not using prop-types\n        //other rules...\n}\n```\n\n```json\n{\n\"semi\": true,\n\"singleQuote\": true,\n\"trailingComma\": \"es5\"\n}\n```",
            "_id": "68d6a34988b86b203f95b225"
          },
          {
            "taskNumber": 4,
            "title": "Final Steps",
            "description": "#### Update the Project's README\n\n> [!note]\n> Write in with whatever language you are most comfortable. We suggest you also use [markdown](https://gist.github.com/Myndex/5140d6fe98519bb15c503c490e713233) for any formatting - it's a simple document markup syntax that can be learned very quickly.\n\n- Open the README.md in the root of the project and empty its contents.\n- Write some basics about the project. Include at least the following:\n  - App name and description\n  - Installation instructions\n  - How to run the development server\n\n#### Version Control Closeout Tasks\n\n- Commit changes to your local working branch.\n- Push the changes up to GitHub (publish the branch there if you have not done so already).\n- In GitHub, create a PR (pull request) that compares the working branch to `main`.\n- Copy the PR link and submit assignment.",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b226"
          }
        ],
        "instructions": [],
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a49f88b86b203f95b580"
        },
        {
          "subsectionOrder": 2,
          "title": "Intro to React",
          "content": "React is a frontend library used by developers to build dynamic user interfaces. React takes a declarative approach to DOM manipulation with the help of React DOM to provide interactivity in web applications, also known as single-page applications or SPA for short. React takes care of:\n\n- assembling components to render a UI\n- listening for user events - mouse cursor hovering, typing in a field, button clicks, etc\n- updating state[^state] based on events and other inputs\n- automatically updating the UI when state changes\n\nThat's helpful but what problems does it solve?!\n\nDeveloping an SPA without libraries (or even with jQuery) is a complicated process for anything but the smallest app. Prior to their rise of libraries like React or frameworks[^libraries-and-frameworks] like Angular and Vue, developers had to take an imperative approach to programming interactivity into an html document. Stated another way, developers have to programmatically describe the processes their SPA needs to use to keep the UI updated.\n\n- Elements must be created, destroyed or managed.\n- Event listeners have to be added, configured, and managed.\n- Elements then need to be added, removed, replaced, or modified to update the UI.\n\nOften, this includes adding or removing sub-elements that aren't known about ahead of time like list items or images loaded from a remote data source. Each element may need event listeners which in turn, are configured with logic to update the interface. Listeners also need to be managed carefully to keep the application performing smoothly. They don't automatically disappear when elements they are used on are removed or are no longer needed. Forgotten event listeners take up memory on a user's system and can cause serious performance issues or can even crash a browser. This is a lot to manage!\n\nThe most of the current front end libraries or frameworks use a declarative approach to programing a UI. Declarative programming allows us to describe the SPA's structure and state. It is then library's/framework's responsibility to accomplish the all the tasks needed to keep the UI updated as state changes. As a consequence, it allows us to create complex SPAs with relative ease compared to approaches that do not use a framework.\n\nReact's strength comes from its use of components and the way it keeps the UI updated. Components allow us to divide an SPA into smaller modules consisting of page elements, styling, and state logic. In programming terms, components encourage \"separation of concerns\". Components allow us to focus on small portions of the application at a time. Each component does one or a few things rather than having a large files (HTML, CSS, JS) that group all a page's functionality together.\n\nReact provides hooks which are functions that allow us to manage state and logic inside of components. Props (properties) are used to pass data and event information between components. We will cover hooks and props in future lessons so don't worry if they sound confusing right now.\n\nAnother key aspect of React is its use of a [Virtual DOM](https://legacy.reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom). This is a lightweight copy of the actual DOM (Document Object Model) in memory. When there are changes in the state of a component, React first updates the Virtual DOM and then compares it to the real DOM to identify the changes needed. This [diffing](https://www.geeksforgeeks.org/what-is-diffing-algorithm/) process is more efficient than directly manipulating the entire DOM resulting in fast updates and improved performance.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a49f88b86b203f95b581"
        },
        {
          "subsectionOrder": 3,
          "title": "App Installation",
          "content": "> [!remember]\n> As mentioned during lesson 00, we will be working on two projects through this course. During the lessons, all coding examples are from CTD Swag, an eCommerce store. This is an optional code-along project that will not be turned in. The repo for [CTD Swag can be found here](https://github.com/Code-the-Dream-School/ctd-swag)\n\nTo work with a React project, we must choose a build tool and server. One of the easiest ways to get started is using [Vite](https://vitejs.dev/guide/why.html) with a [React template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react). Vite is a modern build tool for frontend development that focuses on speed and simplicity. It is designed to provide a fast development experience and has a strong plugin ecosystem that has made it a popular tool in the JavaScript community. We'll look closer into Vite later after installing our app.\n\nCreate a new repo in GitHub and give it a name. All of the other options can remain the default. Any files such as the license, readme, or .gitignore will just get in the way of the installation process and be re-created anyways. The .git directory (a normally invisible directory used to manage version control) is unaffected so does not have to be worried about.\n\n![github create new repository](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/new-repo.png)\n\nClone the repo locally. With a terminal opened to the local repo's directory, issue the command below to scaffold out a Vite project using the React template.\n\n```bash\n npm create vite@latest ./ -- --template react\n```\n\nLet's break that command down to see what it's doing:\n\n1. `npm create …`: we're using npm's create command. `create` is an [alias](<https://en.wikipedia.org/wiki/Aliasing_(computing)>) of the `init` command which creates our package.json file.\n2. `… vite@latest …`: this argument tells npm to scaffold the project using Vite's newest package.\n3. `… ./ …` lets npm know to use the current directory.\n4. `… -- …` forwards the remaining options to the package used to scaffold the project.\n5. `… --template react` tells vite's package to scaffold the project using its React template.\n\n> [!info]\n> If we run the command without any options (`npm create vite@latest`) this will start an interactive prompt in the terminal to help scaffold the Vite project. It will ask for a project name, a template to use, and then finally a template variant. Be careful to choose `JavaScript`, not `JavaScript SWC`. [SWC](https://swc.rs/) is a faster bundler that can be used instead of the default one used by Vite but doesn't have the right options for our project. We will not be using TypeScript in this course so don't choose that either.\n\nThe scaffolded project includes a starter SPA and a few supporting files. None of the dependencies are installed until we run another command, `npm install`. This installs all the packages listed in the package.json dependencies and can take up to a few minutes to complete. Once it done, we can take a look at the project structure.\n\n```terminal\n.\n├── .git/...\n├── .gitignore\n├── README.md\n├── ESLint.config.js\n├── index.html\n├── package.json\n├── node_modules/...\n├── public\n│   └── vite.svg\n├── src\n│   ├── App.css\n│   ├── App.jsx\n│   ├── assets\n│   │   └── react.svg\n│   ├── index.css\n│   └── main.jsx\n└── vite.config.js\n\n```\n\n1. **.git/**: is an invisible directory created by git to maintain version control. You may not see it if your operating system hides directories and files that start with a \".\". VS Code also will hide this directory by default.\n2. **.gitignore**: this file lists all those files and directories that should _not_ be tracked with version control.\n3. **README.md**: this file contains pertinent information about the project. We keep this up to date with details such as a project description and steps that others need to take to run or work with the project.\n4. **ESLint.config.js**: is used to configure [ESLint](https://ESLint.org/), a tool used to identify syntax problems or common [anti-patterns](https://en.wikipedia.org/wiki/Anti-pattern).\n5. **index.html**: this file is the [entry point](https://vitejs.dev/guide/#index-html-and-project-root) for the application.\n6. **package.json**: this file contains details about the project, some scripts aliases, and a list of all the packages that the project is dependent upon.\n7. **public**: this is a [directory](https://vitejs.dev/guide/assets.html#the-public-directory) is used to hold static assets like images and fonts that we want to remain unchanged.\n8. **src**: this directory contains the majority of the working files for the application.\n9. **vite.config.js**: this file sets [configuration options for Vite](https://vitejs.dev/config/)\n\nTo work with the project, we have to start Vite's server. To find the right command(s) look in \"scripts\" object in package.json.\n\n```json\n\"scripts\": {\n  \"dev\": \"vite\",\n  \"build\": \"vite build\",\n  \"lint\": \"ESLint .\",\n  \"preview\": \"vite preview\"\n}\n```\n\nSince the packages in the repo are installed locally, the command line will not recognize them. Instead of trying to call them directly (e.g. typing `vite build` into our terminal), we use npm to call the scripts for us by using the command `npm run <<scriptKey>>` in the terminal at the project's root directory. Remember in JSON, a `key` is a property name - the word on the left side of a colon. In our case, we're going to use the command **`npm run dev`**. This will spin up a development pipeline to create a version of our code that is understandable by the browser.\n\n![vite running in terminal](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/terminal-serve.png)\n\nVite then serves up the transformed code so we can see it in the browser!\n\n![starting page in browser](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/starter-page.png)\n\nYou may have noticed a `:5173` in the url. This is the port number that Vite serves content from locally. We will talk more about this and how to deploy a live app in week 13.\n\nAny time we are working in our codebase, it's _highly recommended_ to have the development server running and our SPA open in a browser window. This gives instant feedback on the code that we are working on. There are plenty of scenarios where our code does not have any errors in a grammatical or technical sense but will crash our SPA or generate other undesirable behaviors.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a49f88b86b203f95b582"
        },
        {
          "subsectionOrder": 4,
          "title": "Project Walk-Through",
          "content": "Now that we have the project scaffolded and we know it runs, we'll dig into some of the details about working with our SPA. Vite incorporates several other tools to be aware of and provides us with features to make UI development a pretty nice experience.\n\n#### Sub-tools\n\n- **[esbuild](https://esbuild.github.io/)** - Vite uses esbuild for pre-bundling during development. It converts all of our code and dependencies into native ESM understood by browsers. It also combines project dependencies into a single cached module to improve page loading/refreshing while we code. In other words, rather than having to re-bundle everything every time we save a file while Vite is running, it bundles all of our dependencies and saves the output. It then only has to rebuild the module(s) containing our code.\n- **[Rollup](https://rollupjs.org/introduction/)** - this is another module bundler for JavaScript. Vite uses this to output highly optimized files for production.\n- **[PostCSS](https://github.com/postcss/postcss)** - PostCSS is a JS tool that transforms CSS through an ecosystem of plugins. We will not be working with this directly.\n- **[CSS Modules](https://github.com/css-modules/css-modules)** - this tool scopes class selectors in module files to the respective component file. This simplifies style management directly by preventing selectors from inadvertently applying styles to undesired areas of the rendered page. We'll talk more about this in [[Week-10|week 10]].\n\n#### Features\n\n- **HMR** - Hot Module Replacement. This is the ability to replace a JavaScript module in the browser while maintaining application state. This mean that the app doesn't need to re-start. This is very handy when working on features that are \"far away\" from the initial state of the application. For example, this could include maintaining a logged on user session where some content is blocked from a user who is not logged in. It gets to be a pain when you have to log into your app 30 times in a row while you're doing work on a new feature. With HMR, this hassle is reduced.\n- **TypeScript support** - TypeScript (TS) provides valuable guard rails for developers so that they can develop bug-free, performant JavaScript. Since browsers and Node don't natively support TS, the code has to be [transpiled](https://daily.dev/blog/typescript-transpiler-explained) to JavaScript. While there are tools to do this, they need careful configuration to get them working properly. Vite provides support for this without the need to configure anything.\n- **JSX transformation** - Similar to TypeScript, browsers do not understand JSX. This extension of JavaScript (which we will talk more about next week) needs converted to plain JavaScript before being served to a browser. Vite provides this transformation for any `.jsx` or `.tsx` (the TypeScript equivalent) file in the `src/` directory automatically.\n- **CSS, JSON importing** - JavaScript files are not normally able to import files that are written in other languages. Rather than having to create special loaders ourselves so that we can work with non-JavaScript files, Vite gives us the ability to do so. Vite injects CSS onto the page and gives it HMR support. Vite also allows us to work with JSON through named or default imports that we can treat it like a JavaScript object. This is handy for data population where we don't want to reach for an API connection.\n- **Inclusion of static assets** - these resolve a public URL for the file when imported into a `.jsx` file. We'll explore how to take advantage of this during [[Week-10|week 10]].\n- **strong Plugin ecosystem** - Vite has [official plugins](https://vitejs.dev/plugins/) and [community plugins](https://github.com/vitejs/awesome-vite#plugins) that extend its capabilities - some are React-specific, some work with other frameworks, and a lot are UI framework/library agnostic.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a49f88b86b203f95b583"
        },
        {
          "subsectionOrder": 5,
          "title": "Stretch Goal: Improving the Development Environment",
          "content": "#### Enhance VS Code's Built-in Linting with ESLint\n\nA linter is a tool that performs a [static analysis](https://en.wikipedia.org/wiki/Static_program_analysis)of a codebase to flag syntax errors and bad practices without having to run the code. VS Code already provides basic static analysis for JavaScript but we can extend this with ESLint. The React template includes some sensible default rules when we installed it but we also have to install VS Code's [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extension. The extension will allow VS Code to lint all project files and adds a tooltip when mousing over a flagged item. The tooltips usually include a brief summary of the rule violation and a link to more documentation. In the screenshot below, clicking the blue text \"[react/jsx-key](https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md)\" will open a browser window to documentation that explains the error, how to resolve it, and even rule configuration options for `eslint.config.js`.\n\n![missing key props error in ide](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/missing-key.png)\n\nA keen observer may have noticed a few unusual comments in an earlier screenshot. At the top of the file for the `App` component, there are commented lines that disable two rules. Those lines are suppressing errors ESLint would have flagged.\n\n![eslint rules disabled in file by comment](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/eslint-disable.png)\nIn the following screenshot of an error tooltip, we have an error on `setTestList` being reported by VS Code's built-in static analysis and ESLint. `ts` stands for TypeScript even though it's evaluating JavaScript. This may be confusing since we're not using TypeScript but is just an odd detail resulting from how the internals of VS Code work.\n\n![no unused vars tooltip](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/unused-vars.png)\n\nWhen working with ESLint, we can to add and remove rules that suit our needs. ESLint provides three ways to modify rules:\n\n1. ignore a rule for a file\n2. ignore a rule for a single line\n3. apply or ignore rules across a codebase\n\nWe have already seen how to turn off the rule for the entire file. Another way is to add the appropriate comment directly above a line of code which will then ignore only that instance of the warning. Finally, to change a rule's behavior across the codebase, it can be configured in `eslint.config.js` which is found at the root of the project. We can add, modify, or disable rules with this file. Keep in mind that the rules already in place conform to community best practices. Don't change them just to get rid of the squiggly lines in the code! Make sure you understand the rules you disable or enable and have a strong reason for doing so.\n\n![eslint config rules disabled](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/eslint-rules-config.png)\n\n#### Automatic Code Formatting with Prettier\n\nClean code is vital for any project, especially in a team codebase, but having to think about formatting details detracts from our attention which is better spent on crafting useful code. We can delegate formatting to tool that automates the process of applying formatting rules consistently across a codebase.\n\nOne of the most popular JavaScript formatting tools is [Prettier](https://prettier.io/). Like ESLint, we include a configuration file in our codebase and we have to install [a plugin for VS Code](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode). When configured correctly, it frees us from having to think about formatting! Let's go ahead and set that up.\n\nSince this is a development tool and is not a part of the app, we install Prettier as a dev dependency. `npm install --save-dev prettier`. The shorthand of this command is `npm i -D prettier`. After installing, we create a configuration file, `.prettierrc` at the root directory of the project. Inside `.prettierrc` we add a JSON object containing some starting rules:\n\n```JSON\n{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\"\n}\n```\n\nWe then have to install Prettier plugin and configure VS Code to use it as the default code formatter. After installing the plugin, open VS Code's settings and filter for \"format\". For `Editor: Default Formatter` select Prettier and then check the box for `Editor: Format on Save`.\n\n![searching for format in ide settings](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/search-format.png)\n\nCode before and after saving with Prettier enabled:\n\n![code before and after prettier formatting](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-01/pretter-before-after.png)\n\n- semicolons are consistently used\n- quotes on imports are single quotes instead of double quotes\n- the spacing between the array's brackets and its elements has been removed\n- there are only one empty line between code blocks",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a49f88b86b203f95b584"
        },
        {
          "subsectionOrder": 6,
          "title": "Summary",
          "content": "We were introduced to React its benefits for front end web developers. We also set a repo, installed a development server, and got a React project spun up. We covered some basics about working with Vite and introduced optional tools that will make our development experience much nicer. We have covered a lot of material this first week! Armed with this knowledge, it's time for you to set up the project that you'll be submitting weekly.\n\nIn contrast, traditional multi-page websites follow a server-centric model where navigating between pages involves full-page reloads, resulting in slower interactions and delays in content delivery. Each page request triggers a server response to load a new page, leading to a less interactive and dynamic user experience compared to SPAs. Multi-page websites have distinct HTML files for each page and rely on server-side rendering to generate and serve content, which can be less efficient and scalable for complex web applications.\n\nSPAs revolutionized web development by optimizing performance and user experience through client-side rendering and dynamic content updates. By eliminating the need for full-page reloads and reducing server requests, SPAs deliver faster load times and smoother interactions. While SPAs excel in creating interactive and responsive applications, multi-page websites remain relevant for content-heavy platforms that benefit from SEO advantages, as search engines find it easier to crawl individual pages. The choice between an SPA and a traditional multi-page website depends on the specific requirements of the application, balancing factors like user experience, performance, and search engine visibility.\n\n[^state]: State refers to the current condition or data within an application at a specific point in time. It includes all data relevant to the application, such as user input, server responses, and UI state.\n\n[^libraries-and-frameworks]: Libraries and frameworks are code packages written to solve complex or specialized challenges. We incorporate libraries or frameworks into our projects to simplify the development process. The distinction between the libraries and frameworks is a nuanced topic and can be interpreted differently based on their programming language and what they're used for. \"[Inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control)\" is a common element to most comparisons between the two.\n\nWith a library, we are in control of how its code is called. Libraries provide a toolset that we use by calling application programming interfaces (APIs) that they provide. Conversely, a framework defines how the application works then calls our code to configure its behavior and to determine what to include. They tend to be larger in scope and provide more programming tools for us to use.\n\n**Example UI libraries**: [jQuery](https://jquery.com/), [Knockout](https://knockoutjs.com/), [Preact](https://preactjs.com/), and [React](https://react.dev/).\n**Example UI frameworks**: [Angular](https://angular.dev/), [Astro](https://astro.build/), [Ember](https://emberjs.com/), [Next.js](https://nextjs.org/), [Remix](https://remix.run/), and [Vue](https://vuejs.org/).",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a49f88b86b203f95b585"
        }
      ],
      "supplementalVideos": [
        "www.v.com"
      ],
      "references": [
        "www.r.com"
      ],
      "podcastUrl": "www.p.com"
    },
    {
      "id": "68d6a34988b86b203f95b228",
      "lessonNumber": 2,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 2",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Contain a TodoList component that contains all todo code\n- Contain a TodoForm component with\n  - a non-functioning form with 1 input field and a submit button\n- Display a h1 heading, a todo entry form, and the todos we added last week",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 0,
            "title": "Pre-Work Version Control Tasks",
            "description": "*Before proceeding, make sure your week-01 lesson has been approved.*\n\n- Merge your PR in GitHub\n- On your local environment, check out `main` and then pull down the latest changes:\n\n```terminal\ngit checkout main\ngit pull\n```\n\n- Create and checkout a working branch for this week: `git checkout -b week-02-components`\n- Publish the branch to GitHub: `git push origin week-02-components`\n- Start up your development server and open the app in your browser.",
            "codeExample": "```terminal\ngit checkout main\ngit pull\n```",
            "_id": "68d6a34988b86b203f95b22e"
          },
          {
            "taskNumber": 1,
            "title": "TodoList Component",
            "description": "- Create a new file, `TodoList.jsx` inside the `src` directory\n- Scaffold a component inside that file with the name `TodoList`. This includes:\n  - the function definition\n  - an empty return statement\n  - export default TodoList at the bottom of the file\n\nAt this point, the TodoList component should look like:\n\n```jsx\n{/*extract from TodoList.jsx*/}\nfunction TodoList(){\n    return\n}\n\nexport default TodoList\n```\n\n- In the `App` component, import `TodoList`\n- Below the heading tag in the JSX, add an instance of the `TodoList`\n- Move the `todos` array over to `TodoList`\n- Observe the errors that appear in the browser console. You'll see something like:\n\n![screen capture of ReferenceError in browser console](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-02/reference-error.png)\n\nErrors like list are common during development and help us out quite a bit. Make sure you understand what the \"Uncaught ReferenceError\" message means and where it comes from. You may not know what an \"error boundary\" in the second message. Take an opportunity to do some research into what that message may mean. Our next step will resolve this.\n\n- Move the unordered list and the `todos.map...` to the return statement in `TodoList`. Remember that parens `()` can be used for multi-line return statements.\n- Refresh the browser page and those error messages should be gone. The page should also look the same as it did before.",
            "codeExample": "```jsx\n{/*extract from TodoList.jsx*/}\nfunction TodoList(){\n    return\n}\n\nexport default TodoList\n```",
            "_id": "68d6a34988b86b203f95b22f"
          },
          {
            "taskNumber": 2,
            "title": "TodoForm Component",
            "description": "- Create a new file, `TodoForm.jsx` in the `src` directory.\n- Create a component with the same name in that file.\n- Add an empty form to `TodoForm`'s return statement.\n- In the form add\n  - a label with an `htmlFor` props set to `todoTitle`.\n  - between the label tags, insert the text, \"Todo\"\n  - a text input with an id of `todoTitle`\n  - a button with the text \"Add Todo\"\n- Import the `TodoForm` into `App`\n- Place an instance of `TodoForm` between the heading and `TodoList`\n\n The app should now look like:\n\n![screen capture of todo list with new todo form in the browser](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-02/todo-list-with-form.png)",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b230"
          },
          {
            "taskNumber": 3,
            "title": "Final Steps",
            "description": "#### Version Control Closeout Tasks\n\n- Commit changes to your local working branch.\n- Push the changes up to GitHub.\n- In GitHub, create a PR (pull request) that compares the working branch to `main`.\n- Copy the PR link and submit assignment.\n\n### Closing Notes\n\nAfter this week, the instructions will start assuming some knowledge of the topics and tasks covered the previous weeks. As a result, fewer code examples will be given in instructions. You will also be responsible for remembering all basic version control tasks - merging, pulling, committing, publishing to GH, etc.\n\nAs a React student, it is important to gain practice in working through some tasks on your own and being able to reach out for assistance when you get stuck. We aim to make this course challenging but it won't be impossible either! Any areas that are particularly challenging or confusing will include tips or hints that can help out.",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b231"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b229"
        },
        {
          "subsectionOrder": 2,
          "title": "ReactDOM",
          "content": "We know that React is a front end library used to design user interfaces. Aside from web, it can be used for mobile app development with React Native or other tools. When using React to build a web application, we include [ReactDOM](https://react.dev/reference/react-dom). This library provides web-specific features including built-in components for common html elements, additional APIs, and hooks.\n\nReactDOM is already set up inside of our project, courtesy of the React template that we used. Let's see how everything goes together. `react-dom` is listed in our package.json dependencies when we installed our project. Inside of `main.jsx` there is an import of an API method, `createRoot`. During runtime, `createRoot` is invoked to set up a location for React to render the passed component. To use, we pass `createRoot` an element selection (`document.getElementById('root')`) with a chained `render()` function containing a component to render.\n\n```jsx\n//Main.jsx\n\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.jsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n```\n\nFrom here we have two directions to go to identify how everything is tied together. The first is to find the element with the id of `root`. It's not found in `/src` anywhere. Recall that `index.html` in the root directory is the entry point for the application. In that file, we will find a div with an id of `root`. When Vite starts, it serves up this file. The script loaded on line 11 is our application! Once it loaded, the script runs which renders the application inside of that div. If there is anything in that element, it removes it first.\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n```\n\nThe other item to look at is the argument that we pass to `render()`. `StrictMode` is a special component used during development that assists with finding bugs. It's time to talk about one of the fundamental concepts that makes React such a powerful tool.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b22a"
        },
        {
          "subsectionOrder": 3,
          "title": "Components",
          "content": "#### What is a Component\n\nNow that we understand how ReactDOM ties into the application, it's time to explore one of the fundamental concepts that makes React such a powerful tool. Components are the building blocks of any React application. A modern[^class-component] React component is essentially a JavaScript function that does some isolated work and returns html. They allow us to break down a UI into smaller elements that can be tied together or re-used as needed.\n\nTo look at the structure of a component, we need to convert the JSX syntax to JavaScript. More on JSX soon. For now, we'll convert our `App` component to plain JavaScript. The original file looks like:\n\n```jsx\nimport ctdLogo from './assets/mono-blue-logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"coming-soon\">\n      <h1>CTD Swag</h1>\n      <div style={{ height: 100, width: 100 }}>\n        <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n      </div>\n      <h2>Coming Soon...</h2>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThe following JavaScript version of `App` is functionally identical to the original.\n\n```javascript\nimport React from 'react';\nimport ctdLogo from './assets/mono-blue-logo.svg';\nimport './App.css';\n\nfunction App() {\n  return React.createElement(\n    'div',\n    {\n      className: 'coming-soon',\n    },\n    React.createElement('h1', null, 'CTD Swag'),\n    React.createElement(\n      'div',\n      {\n        style: {\n          height: 100,\n          width: 100,\n        },\n      },\n      React.createElement('img', {\n        src: ctdLogo,\n        alt: 'Code The Dream Logo',\n      }),\n    ),\n    React.createElement('h2', null, 'Coming Soon...'),\n  );\n}\nexport default App;\n```\n\nThere certainly is a lot of `React.createElement`s! Each one accepts a `type`, a `props` object, and `…children` arguments.\n\n> [!remember]\n> The three dots (…) before `children` indicate the use of JavaScript's [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) syntax. Any of the remaining arguments beyond `type` and `props` provided to `createElement` will become an array of `children` arguments.\n\n- **`type`**: tag name string or a component to be rendered\n- **`props`**: object containing information to configure the element\n  - examples include `className` on line 9, `style` on line 15, and `src` and `alt` on lines 21-2\n  - if not used, it must contain an empty object or `null`\n- **`…children`**: Optional. One or more nodes that are nested into the element being created. This can also include text content such as found in a heading, paragraph, etc. Each nested `React.createElement` in the code above is found in `…children` arguments of its parent.\n\n#### Defining a Component\n\nWe can use function declarations, function expressions, or arrow functions - each are equally valid.\n\n```jsx\nfunction Component1() {\n  return <p>Component1 uses a function declaration</p>;\n}\n\n//or\n\nconst Component2 = function () {\n  return <p>Component2 uses a function expression</p>;\n};\n\n//or\n\nconst Component3 = () => {\n  return <p>Component3 uses an arrow function</p>;\n};\n\n//or\n\nconst Component4 = () => (\n  <p>Component4 uses an arrow function with implicit return</p>\n);\n\nfunction App() {\n  return (\n    <>\n      <Component1 />\n      <Component2 />\n      <Component3 />\n      <Component4 />\n    </>\n  );\n}\n```\n\nRenders out to:\n\n![simple components rendered to page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-02/page-render.png)\n\nAlthough a component is just a function, there are a few rules to follow when creating them.\n\n- The name must be capitalized.\n- It must be a pure function.\n  - Its return values are always the same given the same inputs.\n  - No side effects[^side-effects] should happen during render. These must happen outside the render cycle.\n    - Mutations local to the component during render is acceptable. Example: pushing items into an array that is then rendered into list items.\n  - Don't make direct changes (mutate) to props or state. We'll cover making updates to these next week.\n\nThere are also a few best practices to follow:\n\n- Use PascalCase if the component name is multi-worded(eg - `BackButton`).\n- Named or default exports[^avoid-anonymous] are both acceptable but should be consistent across the codebase. We recommend sticking with `default export SomeComponent`.\n- Each component should have its own file.\n- The file name should match the component name. Eg - `Header` component should go in a file named `Header.jsx`.\n\n#### Built-in Components\n\nReact includes several built-in components - we've already ran into the two used in the course.\n\n- **Fragment**: allows us to group elements together without affecting the DOM structure. The shorthand `<></>` is used in most cases.\n- **StrictMode**: a special development tool that adds behaviors to the application that reveal common React bugs\n  - components mount twice to expose impure renders\n  - effects are re-ran to validate cleanup functions work correctly - more details about useEffect will be covered in week 8.\n  - flags use of [deprecated](https://en.wikipedia.org/wiki/Deprecation) APIs\n  - It's added to our project automatically with Vite's React template. It may be tempting to remove it to suppress odd behaviors (especially with useEffect) but don't. Again, errors are our friends and they'll guide us to the right path!\n\nReactDOM provides common components for all of the elements that can be found in an html document. When using `div`, `button`, or `input` for example, they are not directly referencing the native HTML element itself. We are using component representations which also provide a host of built in props and events. The [common components](https://react.dev/reference/react-dom/components/common) are too numerous to list here but are worth reviewing.\n\n#### The Component Tree\n\n```mermaid\n---\ntitle: Component Tree for CTD Swag\n---\nflowchart TD\n    A(\"root (main.jsx)\") ---- B\n    B(\"App - (manages app state)\") <--> C(Header)\n    B <--> D(ProductList)\n    D <--> E(Product 1)\n    D <--> F(Product 2)\n    D <--> G(Product n)\n    C <--> H(ShoppingCart)\n```\n\nWhen assembling components, the hierarchical structure that is formed is called a component tree. At the top of the tree is the root component, with child components branching out from it to form an inverted tree-like structure. Where each branch forms, the component that contains further sub-components is referred to as a parent component. Each component in the tree encapsulates a specific part of the UI and can contain other components as children. The component tree visually depicts the relationships and dependencies between components, illustrating how data flows from parent components to their children through props, and how updates propagate downward through the tree via state and context. This tree structure is fundamental to understanding how components are composed and nested within a React application.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b22b"
        },
        {
          "subsectionOrder": 4,
          "title": "JSX",
          "content": "Writing components in JavaScript is possible but becomes but becomes tedious as a component grows. JSX provides a more concise and expressive syntax for defining UI components. JSX stands for **JavaScript XML**. It is a syntax extension for JavaScript that Vite transpiles down to JavaScript using ESBuild. JSX resembles HTML, making it easier for developers to visualize the component structure and to write code that closely resembles the final UI.\n\nWhen we place custom or built-in components into JSX with `<>` brackets, that element is commonly referred to as an \"instance\" of that component. JSX also allows for embedding JavaScript expressions directly in the markup using `{}` brackets.\n\n#### Rules of JSX\n\nTo keep the transpilation process simple and performant, we must follow some rules:\n\n- a component must return a single React element or component.\n  - This element can contain one or more child elements.\n  - React includes a special component `Fragment` or written in shorthand as `<></>` that acts as a wrapper element for sibling elements. It gets stripped out during render time.\n\n```jsx\n{\n  /*React's fragment is easy to identify and saves a lot of space in the code*/\n}\n<>\n  <h1>CTD Swag</h1>\n  <p>We have merch!!!</p>\n  <ul>\n    <li>tee shirt</li>\n    <li>bucket hat</li>\n  </ul>\n</>;\n```\n\n- All tags must be terminated. They either have to have an accompanying closing tag (`<div></div>`) or be self-closing (`<img/>`).\n\n```html\n<!-- valid HTML but INVALID JSX -->\n<!-- prettier-ignore -->\n<img src=\"/assets/hat.png\">\n<!-- prettier-ignore -->\n<input val=\"\">\n```\n\n```jsx\n<>\n  {/*valid JSX*/}\n  <img src=\"/assets/hat.png\" />\n  <input val=\"\" />\n</>\n```\n\n- Most keys and attributes must be camelCase\n  - [aria-\\*](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*) + [data-\\*](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) are still written with dashes\n- `class` and `for` are reserved words in JavaScript so `className` and `htmlFor` are used in their place.\n- JavaScript blocks inside JSX must be wrapped with curly brackets `{}`\n  - don't use single line JS comments, eg. `//some comment`\n  - if a code block has a return value, it should be a valid React element\n  - code blocks can be nested in other code block return statements\n\n```jsx\n{\n  /*single line comment*/\n}\n{\n  /*\n    longer comments\n    can be written\n    using multiple lines\n*/\n}\n<div>\n  {isLoggedIn ? (\n    <p>Welcome {userName}!</p>\n  ) : (\n    <button onClick={() => logIn()}>Log In</button>\n  )}\n  <ul>\n    {products.map((product) => (\n      <li>{product.name}</li>\n    ))}\n  </ul>\n</div>;\n```\n\n- Don't forget to wrap objects in additional `{}`!\n\n```jsx\n{\n  /*style props takes an object*/\n}\n<div style={{ backgroundColor: '#800080', borderBottom: 3 }}></div>;\n```",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b22c"
        },
        {
          "subsectionOrder": 5,
          "title": "Troubleshooting",
          "content": "#### Runtime Feedback\n\nVite provides us with some error feedback through the terminal, the browser window, and the browser's development console. In the example below, the code still transpiles to JavaScript correctly but list items returned by the `map` function do not have a mandatory `key` props. React will still render the list but the reconciliation process is degraded severely by this bug.\n\n![console error because of missing key](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-02/missing-key.png)\n\nCommon syntactical issues often result in long stack traces but Vite tries to provide some helpful details in the terminal and in a browser overlay before printing the trace. In the example below, can you tell what syntactical error crashed the application? Hint: look at the second line of the black browser overlay on the right. It should become obvious what character our code is missing.\n\nAnother detail to look for is a caret (`^`) inside the printed code snippet - this shows exactly where the error is encountered. In the same example below, it appears under the `<` of the closing tag of the unordered list. Our list item is missing a forward slash `/` inside of its closing tag. As soon as the parser encounters the closing unordered list tag, it knows JSX syntax has been violated since the list item elements have not been closed yet. By the way, the line numbers on the code snippet coincide to the lines in the file that contain the code.\n\nThe same message appears in the terminal session running Vite. Don't be daunted by all the `at JSXParserMixin…` lines. These are helpful for more complex problems but all the information we usually need to resolve an issue is at the top of the output. Error messages are a developer's friend!\n\n![page error missing closing tag](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-02/missing-close-tag.png)\n\n> [!note]\n> After resolving an error that results in an error overlay in the browser, you have to click in the gray area to dismiss it. In some cases, you may also need to refresh the browser window to fully restore your app.\n\n#### React Developer Tools\n\n[React Developer Tools](https://react.dev/learn/react-developer-tools) provide some handy utilities that allow us to examine components, make changes to state, and assist in troubleshooting bugs. The dev tools can be installed as a browser extension for Firefox or Chrome-based browsers. A standalone tool is also available for people who use Safari or for those who want to avoid installing browser extensions.\n\n- [Install for **Chrome**](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n- [Install for **Firefox**](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)\n- [Install for **Edge**](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil)\n- [Install the standalone version](https://react.dev/learn/react-developer-tools#safari-and-other-browsers) using these instructions.\n\n![react dev tools components tab](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-02/components-tab.png)\nAbove: Screenshot of the Components Inspector as used in Firefox.\n\n![react dev tools profiler tab](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-02/profiler-tab.png)\n\nAbove: Screenshot of the Profiler as used in Firefox.\n\n[^class-component]: React components can also be class-based but it's not common to see them any more. With the introduction of hooks in React v16.8 (released February, 2019), many of the disadvantages of functional components disappeared. A large portion of the JavaScript community eschews [OOP](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming) in favor of [functional](https://github.com/readme/guides/functional-programming-basics) programming. This is not a judgement, just an observation.\n\n[^side-effects]: In JavaScript, a side effect refers to any observable behavior or change that a function introduces beyond simply returning a value. Side effects can include modifying variables outside the function's scope, interacting with the DOM, making API calls, and updating state in a React component. Side effects can impact the application's state, environment, or external systems in ways that go beyond the function's primary purpose of computing and returning a value.\n\nFor example, consider a function that updates a global variable or performs a network request. These actions are considered side effects because they alter the program's state or interact with external resources outside the function's local scope. While side effects are often necessary for applications to interact with the outside world, excessive or unexpected side effects can lead to unintended consequences, bugs, and harder-to-maintain code.\n\nManaging and controlling side effects is a key consideration in JavaScript development, especially when working with asynchronous operations, state management, and complex applications. Tools like pure functions, immutability, and libraries like Redux and React's useEffect hook help developers manage side effects effectively while keeping the codebase clean and maintainable.\n[^avoid-anonymous]: Default export can be used with anonymous functions but this is discouraged. While components are given a name when imported, anonymous function components make React needlessly difficult to troubleshoot.\\",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b22d"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b233",
      "lessonNumber": 3,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 3",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- render each static todo in a TodoListItem component\n- contain a paragraph containing a value controlled by state",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "TodoListItem Components",
            "description": "- Create a new file named `TodoListItem.jsx` in the `src` directory.\n- In that file, create a component by the same name that takes in a `todo` props.\n  - Remember that you can destructure this value from the props directly in the component function's arguments. eg: `function ExampleComponent({name}){...`\n- Add a list item element to the return statement that includes the `todo`'s title between the element tags.\n- Add a default export statement for that component at the bottom of its file.\n- Returning to `TodoList.jsx`, import `TodoListItem`.\n- Replace the list item tags in the `map` with an instance of the `TodoListItem` using a self-closing tag.\n- Pass the `todo` in as props to the `TodoListItem` instance.\n- Remember that the map statement returns an array. React requires that we place a `key` props in Components rendered from an array. Use the `todo.id` as the value of `key`.\n\nAt this point, the todo list in the browser should appear identical. However, if you go to the [React developer tools'](https://react.dev/learn/react-developer-tools) component tab in your browser's dev tools, you'll see that the `TodoList` has three sub-component instances of `TodoListItem`. Each contains a key coinciding to the `todo.id`.\n\n![screen capture of component tree in React dev tools](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-03/component-tree.png)",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b238"
          },
          {
            "taskNumber": 2,
            "title": "State for New Todos",
            "description": "- Go to the `App` component and import the `useState` hook.\n- Inside the function definition, before the return statement, create a new state value that will hold a new todo.\n  - Use array destructuring to save the state value as `newTodo` and the state update function as `setNewTodo`.\n  - Use a short string as the state's `initialValue`.\n\n```js\n//example useState\nconst [exampleStateValue, setExampleStateValue] = useState(42)\n```\n\n- Between the `TodoForm` and the `TodoList`, add a paragraph and place the state value between its opening and closing tags.\n\nThe browser should render that `initialValue` between the form and the todo list.\n\n![screen capture with paragraph tag containing the todo state value](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-03/todo-list-with-paragraph-tag.png)\n\n### Closing Notes\n\n Next week we will work more with the state as we cover all the basic react hooks, event and handler functions, and updating state during next week's discussion.",
            "codeExample": "```js\n//example useState\nconst [exampleStateValue, setExampleStateValue] = useState(42)\n```",
            "_id": "68d6a34988b86b203f95b239"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b234"
        },
        {
          "subsectionOrder": 2,
          "title": "State",
          "content": "All of the information on an simple web page is composed of data of one type or another - text, images, structure, styling, etc. When going from a static web page to an SPA, we have to determine what data should load dynamically and what should remain static. To one extreme, we may limit it to a username in a page header. Towards the other extreme, everything on the page all the way down to the text inside of a button can be loaded dynamically. Most of the time, it's somewhere in the middle.\n\nWe have plenty of options when working with state. The simplest place to start is by defining a variable used inside our component. We can do this outside of the component or inside, before the return statement. We reference that variable in our JSX surrounded by `{}`. When the component is rendered, React will insert the value in its place in the virtual DOM then go through reconciliation and rendering. One detail to keep in the back of your mind is that every time a component is re-rendered, any variables defined inside the component will be re-instantiated. Most of this time this is not a problem but this will come up later in the course when we focus on optimizing our code for more advanced scenarios.\n\n```jsx\nimport ctdLogo from './assets/mono-blue-logo.svg';\nimport './App.css';\n\nconst message = 'Coming Soon...'; //This is outside the function definition for App\n\nfunction App() {\n  const title = ' CTD Swag'; // This is inside the Component before the return\n  return (\n    <div className=\"coming-soon\">\n      <h1>{title}</h1> //`title` inserted into heading\n      <div style={{ height: 100, width: 100 }}>\n        <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n      </div>\n      <h2>{message}</h2> //`message` inserted into heading\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThis approach does not give us a way to make updates to `message` or `title`. Using `let` instead of `const` allows us to make an update to the variable but it still breaks one of the rules for writing a React component: state should never be mutated. Not only that, React has no way to tell if and when `message` or `title` gets updated. We can demonstrate this with a setTimeout that changes `message` after 3 seconds.\n\n```jsx\nimport ctdLogo from './assets/mono-blue-logo.svg';\nimport './App.css';\n\nlet message = 'Coming Soon...';\n\nsetTimeout(() => {\n  message = 'We can feel it...';\n  console.log(`Updated message: ${message}`);\n}, 3000);\n\nfunction App() {\n  return (\n    <div className=\"coming-soon\">\n      <h1>CTD Swag</h1>\n      <div style={{ height: 100, width: 100 }}>\n        <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n      </div>\n      <h2>{message}</h2>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nWe'll know when the `setTimeout` fires off because of the console statement that prints out the updated `message`. As expected, this has no affect to the \"Coming Soon…\" message on the page:\n\n![setTimeout firing console message 1 second after page load](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-03/timeout-message.gif)\n\n#### useState\n\n`const [state, setState] = useState(initialState)`\n\n`useState` is a React hook that allows us to set and update a piece of data that we can then use in our SPA. We invoke `useState` with an initial state value as an argument. That initial state value can be of any type. If given a function, it would be called an \"initializer function\" in that context. React will run it and use the returned value to set the initial state value. Initializer functions must be pure functions and cannot take any arguments. When called, `useState` returns an array containing a state variable (a reference to the current state) and an updater function. We follow array [destructuring assignment](https://javascript.info/destructuring-assignment) convention `const [noun, setNoun] = useState(intialState)` to make use of this hook.\n\nWith `useState` explained, we can now start setting up CTD Swag's storefront. Let's get some inventory on the page! We first need to put together some sample inventory data for our app to start with. We want to be able to offer differing colors or versions for some products but without each having their own product card. We will eventually make use of `base-` and `variant-` prefixes to combine related products to a single product card in when we discuss conditional rendering in week 5. Each item should include `baseName`, `variantName`, `id` `price`, `baseDescription`, `variantDescription`, `image`, and `inStock` keys. Here's an example of several inventory items:\n\n```json\n{\n  inventory: [\n    {\n      \"id\": 1,\n      \"baseName\": \"Bucket Hat\",\n      \"variantName\": \"Black\",\n      \"price\": 22.99,\n      \"baseDescription\": \"Protect your head from the sun with this stylish bucket hat\",\n      \"variantDescription\": \"Black with an orange logo\",\n      \"image\": \"bucket-hat-black.png\",\n      \"inStock\": \"TRUE\"\n    },\n    {\n      \"id\": 2,\n      \"baseName\": \"Bucket Hat\",\n      \"variantName\": \"Peach\",\n      \"price\": 22.99,\n      \"baseDescription\": \"Protect your head from the sun with this stylish bucket hat\",\n      \"variantDescription\": \"Pale peach with an orange logo\",\n      \"image\": \"bucket-hat-peach.png\",\n      \"inStock\": \"TRUE\"\n    },\n    {\n      \"id\": 5,\n      \"baseName\": \"Clock\",\n      \"variantName\": \"Default\",\n      \"price\": 27.99,\n      \"baseDescription\": \"Battery-powered wall clock. White face with black logo\",\n      \"variantDescription\": \"\",\n      \"image\": \"clock.png\",\n      \"inStock\": \"TRUE\"\n    }\n  ];\n}\n\n```\n\nA JSON file that includes a full starting inventory can be [found here](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-03/inventory.json). We will use Vite's JSON import feature to access the inventory. Let's get some product names and descriptions onto the page!\n\n> [!note]\n> Note: Screen captures of the application using an older version of this JSON file. The newest version includes product variations that will be used in later lessons.\n\n1. Add the JSON file to `/assets` and then add an import statement for it at the top of App.jsx.\n2. import `useState`\n3. `inventoryData` contains an array of items that we want to display. Call useState with `inventoryData.inventory` as the initial value.\n4. Destructure the returned array into a state variable, `inventory` and updater function, `setInventory`.\n5. Wrap everything in `<main></main>` so we continue to return a single element after adding the inventory list.\n6. Create an unordered list below the `.coming-soon` div\n7. Use JavaScript's `.map()` method to return an array of list items.\n8. For now we'll use three `item` properties to create a card[^card] in the list item.\n9. **item.id**: used at the key for the list item so React can efficiently track the item for subsequent re-renders.\n10. **item.baseName**: used inside of the item card heading\n11. **item.baseDescription**: general details about the item displayed\n\n```jsx\nimport { useState } from 'react';\nimport ctdLogo from './assets/mono-blue-logo.svg';\nimport './App.css';\nimport inventoryData from './assets/catalog.json';\n\nfunction App() {\n  const [inventory, setInventory] = useState(inventoryData.inventory);\n  return (\n    <main>\n      <div className=\"coming-soon\">\n        <h1>CTD Swag</h1>\n        <div style={{ height: 100, width: 100 }}>\n          <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n        </div>\n      </div>\n      <ul>\n        {inventory.map((item) => {\n          return (\n            <li key={item.id}>\n              <div className=\"itemCard\">\n                <h2>{item.baseName}</h2>\n                <p>{item.baseDescription}</p>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </main>\n  );\n}\n\nexport default App;\n```\n\n![render product list](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-03/render-product-list.png)\n\n> [!note]\n> ESLint may be highlighting `setInventory` since it hasn't been used yet. We will use it next lesson. For now, this is one of the few errors we'll ignore.\n\n![highlighting eslint error to ignore](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-03/ignore-error.png)\n\nThe `key` in `<li key={item.id}>` helps React keep track of elements that are rendered from an array. It may initially seem like a good idea to use the item's array index since each item has one and it is unique. The downside is that an item and its index value are not guaranteed to keep matching. An item may be removed from the inventory, changing the array, when it goes out of stock. `inventory` can eventually have a sort or filter feature added to it which would also have an impact on item order. In either case, using array indices as keys could introduce unexpected behavior or degrade React's rendering cycle. We've included an `id` on the item so this will not happen.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b235"
        },
        {
          "subsectionOrder": 3,
          "title": "Props",
          "content": "#### Communicating with Children\n\nAt this point we are almost ready to do some refactoring. App component is small but will continue to grow as we set up our storefront. Remember that with \"separation of concerns\" it is good to limit each component to a single job. The title and the logo can be separated out as a storefront header. The inventory list and inventory cards area also good candidates for refactoring into components. Before we proceed, we need to know how to communicate data down to child components, otherwise we will have no way to pass on the `title` or `description`.\n\nEnter React **`props`**. Short for \"properties\", the are used to pass data from a component down to its children. They can can accept any type, including functions, but their values are immutable and managed by the parent component. The components receiving props use the data to configure themselves. In order to take props in a component, a value representing props has to be added to the component's function parameters- `function SomeComponent(props){…`. Since props are just objects, it's common to use [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to immediately get specific values from props in the component's arguments. This allows us to immediately see what sort of values we need from the parent component. An additional benefit is that we can set a default value for any of the props.\n\n```jsx\n//without destructuring\nfunction ProductList(props){\n const inventory = props.inventory\n return (\n  <ul>\n      {inventory.map((item) => {\n       return (\n     <li key={item.id}>\n      {item.baseName}\n     </li>\n    );\n   })}\n     </ul>\n )\n}\n\n//with destructuring\nfunction ProductList({inventory = []){ //destructuring assignment grabs `inventory` out of props\n          //we're also setting a default value og `inventory` to an empty array\n return (\n  <ul>\n      {inventory.map((item) => {\n       return (\n     <li key={item.id}>\n      {item.baseName}\n     </li>\n    );\n   })}\n     </ul>\n )\n}\n```\n\nFunctions passed as props are a key tool for interactivity. This is such an important detail that we have to cover a few more topics before we can fully appreciate their role in an interactive application. We continue talking about functions used in props next week.\n\n#### Props in Action\n\nLet's expand on CTD Swag by introducing three new components.\n\nWe create the first two new files and define the components inside each:\n\n- Header.jsx\n- InventoryList.jsx\n\nWe then extract the elements from the App component and move them over into the new components.\n\n```jsx\n/*Header.jsx*/\n\nimport ctdLogo from './assets/mono-blue-logo.svg';\n\nfunction Header() {\n  return (\n    <div className=\"coming-soon\">\n      <h1>CTD Swag</h1>\n      <div style={{ height: 100, width: 100 }}>\n        <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n```\n\n```jsx\n/*ProductList.jsx*/\n\nfunction ProductList({ inventory }) {\n  return (\n    <ul>\n      {inventory.map((item) => {\n        return (\n          <li key={item.id}>\n            <div className=\"itemCard\">\n              <h2>{item.baseName}</h2>\n              <p>{item.baseDescription}</p>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ProductList;\n```\n\n**You may see an ESLint error when working with props in Inventory**.\n\n![eslint tooltop missing props validation](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-03/missing-props-validation.png)\n\nWe will not be using prop-types in our project so we need to disable that rule in `config.eslint.js`. We do so by adding `'react/prop-types': 'off',` to the existing rules. The rules object should look similar to this:\n\n```javascript\n/*config.eslint.js rules extract*/\nrules: {\n      ...js.configs.recommended.rules,\n      ...react.configs.recommended.rules,\n      ...react.configs['jsx-runtime'].rules,\n      ...reactHooks.configs.recommended.rules,\n      'react/jsx-no-target-blank': 'off',\n      'react/prop-types': 'off',                //disables react/prop-types rule\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n```\n\nWe then need to refactor ProductCard out of the ProductList component.\n\nCreate the file, `ProductCard.jsx` and move the list item over to the new component.\n\n```jsx\n/*ProductList.jsx*/\n\nimport ProductCard from './ProductCard';\n\nfunction ProductList({inventory}) {\n  return (\n    <ul>\n      {inventory.map((item) => {\n        return (\n          <ItemCard\n            key={item.id}\n            name={item.baseName\n            description={item.baseDescription}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ProductList;\n```\n\n```jsx\n/*ProductCard.jsx*/\n\nfunction ProductCard({ baseName, baseDescription }) {\n  return (\n    <li>\n      <div className=\"itemCard\">\n        <h2>{props.baseName}</h2>\n        <p>{props.baseDescription}</p>\n      </div>\n    </li>\n  );\n}\n\nexport default ItemCard;\n```\n\n> [!Remember] > `key` is a special prop that React uses to track components rendered from an array. Because of this, `key` gets added to `InventoryItem` instances in `map()` but is **not used** in the `InventoryItem` component.\n\nFinally, we refactor `App` to use the new components.\n\n```jsx\nimport { useState } from 'react';\nimport './App.css';\nimport inventoryData from './assets/inventory.json';\nimport Header from './Header';\nimport ProductList from './ProductList';\nimport ProductCard from './ProductCard';\n\nfunction App() {\n  const [inventory, setInventory] = useState(inventoryData.inventory);\n\n  return (\n    <main>\n      <Header />\n      <ProductList />\n    </main>\n  );\n}\n\nexport default App;\n```",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b236"
        },
        {
          "subsectionOrder": 4,
          "title": "Common Component Props",
          "content": "Along with the props that we can define on our own, React's common components feature numerous [built-in props](https://react.dev/reference/react-dom/components/common) that are worth exploring. Here are a few props highlights:\n\n#### Props for All Built-in Components\n\n- **children**: accepts a React node. Valid React nodes include custom or built-in components, array of React nodes, empty node (null, undefined), string, number, or a [portal](https://react.dev/reference/react-dom/createPortal). We'll cover children in more detail below.\n- **ref**: takes a reference object from `useRef` (covered in week 4) or `createRef`, or a callback that gets called when React renders the element.\n- **style**: takes an object defining CSS styles in property name/ property value pairs. All property names must be written in camelCase. Eg. `background-color` is written as `backgroundColor`. More in week 10.\n\n#### Props for Standard DOM Components\n\n- **className**: String. Replacement for html attribute `class`. Multiple classes can be added by using spaces between class names.\n- **htmlFor**: String. Primarily for `label` or `output` and is a replacement for html attribute `for`.\n- **on\\* - (onBlur, onClick, onFocus, etc.)**: Takes a callback function. Event listener props are named after a specific event that they listen for on the element where they are used. More in week 4.\n\n#### Props for DOM Components that Accept User Input\n\n> [!note]\n> These include `<input>`,`<textarea>`, etc.\n> We will cover these in depth when we start working with React controlled components and forms in week 5.\n\n- **disabled**: Boolean. Prevents a user from interacting with element when true.\n- **value**: String: the text contents inside the element.\n- **onChange**: Accepts a callback function. Event listener function that fires when an update is made by the user to the element's value.\n\n#### Children Props - A Closer Look\n\nWe are able to use a `children` prop to pass React elements into our custom components. Rather than assign `children` a value (`children={someValue}`), they are placed between the opening and closing tags for the element. For example, we may be trying to promote a specific item in our store and want to appear on the top, regardless of filters or sort order. We define that item in the App component and nest it inside `<ProductList></ProductList>` tags.\n\n```jsx\n/*App.jsx*/\n\nimport { useState } from 'react';\nimport './App.css';\nimport inventoryData from './assets/inventory.json';\nimport Header from './Header';\nimport ProductList from './ProductList';\nimport ProductCard from './ProductCard';\n\nfunction App() {\n  const [inventory, setInventory] = useState(inventoryData.inventory);\n\n  function promoteItem() {\n    return (\n      <ProductCard\n        baseName=\"Limited Edition Tee!\"\n        baseDescription=\"Special limited edition neon green shirt with a metallic Code the Dream Logo shinier than the latest front-end framework! Signed by the legendary Frank!\"\n      />\n    );\n  }\n\n  return (\n    <main>\n      <Header />\n      <ProductList inventory={inventory}>{promoteItem()}</ProductList>\n      {/*invoking promoted item between the tags inserts the ItemCard*/}\n    </main>\n  );\n}\n\nexport default App;\n```\n\nIn order for it to appear in `ProductList`, we need to include `{children}` in the desired area of our return statement.\n\n```jsx\n/*ProductList.jsx*/\n\nimport ProductCard from './ProductCard';\n\nfunction ProductList({ inventory, children }) {\n  return (\n    <ul>\n      {children} //this location guarantees that this list item will be first\n      {inventory.map((item) => {\n        return (\n          <ProductCard\n            key={item.id}\n            name={item.baseName}\n            description={item.baseDescription}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ProductList;\n```\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-03/render-priority-product-list.png)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b237"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b23b",
      "lessonNumber": 4,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 4",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- allow users add a todo\n- retain the `input`'s focus when a todo is submitted with the button or enter key\n- render entered todos in a list",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "TodoForm Submission",
            "description": "#### Prepare App to Manage Todo State\n\nRefactor App with the following changes:\n\n- Remove the paragraph tag and its contents from the return statement.\n- Rename the existing state value, `newTodo`, to `todoList` and the update function, `setNewTodo`, to `setTodoList`.\n- Change the `useState`'s `initialValue` to an empty array.\n- Between the `useState` and the return statement, create a handler function named `addTodo`\n  - It takes an argument `title`\n  - Create a const `newTodo` with an object that uses `title`, and `id` as keys.\n    - Set the `id` using `Date.now()`.\n  - The handler then calls `setTodoList` passing in an array containing the destructured `todoList` and `newTodo`. It should look like: `setTodoList([...todoList, newTodo])`\n- Pass the function to an `onAddTodo` props on the `TodoForm` instance.\n\n#### Adding an Event Handler to the Form\n\nGo to the `TodoForm` and make the following changes:\n\n- On the `input` tag, add a `name` props with the value of \"title\".\n- Define a `handleAddTodo`function above the return statement:\n  - The function takes an `event` object\n  - Call the `event.preventDefault()` in the first line of the function to prevent the page from refreshing when a user clicks the Add Todo button.\n- Add a `console.dir(event.target)` - *we will use this console statement to figure out how to access the input value from the form*.\n\nThis is how `handleAddTodo` should look so far:\n\n```jsx\n{/*extract from TodoForm.jsx*/}\n{/*...code*/}\nfunction handleAddTodo(event){\n    event.preventDefault()\n    console.dir(event.target)\n}\n{/*code continues...*/}\n```\n\n- On the form, add an `onSubmit` event listener and pass in `handleAddTodo`: `<form onSubmit={handleAddTodo}>`. When the form submits, the event listener will fire off the function and pass it the submit event's event object.\n- Enter some text in the input on the browser window and hit the Add Todo button.\n\n![todo being entered](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/type-todo.gif)\n\nYou should see the event object in the console statement:\n\n![event object containing form data](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/form-data.png)\n\n> [!note]\n> All screenshots are from a Chrome-based browser. Firefox or Safari display objects in the console differently.\n\nSince we added `name=\"title\"` to the input's props, we can reference the input with `event.target.title`.\n\n- Update the `console.dir` statement to log out `event.target.title` and then hit the button again. The console now logs:\n\n![object containing data about the todoTitle input](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/todoTitle-data.png)\n\n- The console statement shows that you can access the input's value with `event.target.title.value`.\n- Back in the `handleAddTodo`, remove the console and create a new `const title` and assign it the event target's title value.\n- Invoke `onAddTodo` that you get from the component's props and pass the `title` into the function's params.\n- To help the user out, you then clear out the input by setting the input's value to an empty string. `event.target.title.value = \"\"`\n\n#### Re-focus Input After Submit\n\nWhen a user hits enter after adding a todo, the form retains focus so the user can rapidly enter more todos. However, when they click on the submit button, they then have to click on the field again to return the focus. Note below how they have to click into the field again before entering text.\n\n![typing a todo but input focus is lost when todo is added](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/type-todo.gif)\n\nWe can improve the user's experience by using a `ref` on the input element. Recall that this can act like a selector (`document.querySelector(\"#todoTitle\")`), so we can use it to re-focus the input in the `handleAddTodo` event handler.\n\n- Import `useRef`\n- Invoke `useRef` in the body of the component with an empty string and assign it to a const, `todoTitleInput`.\n- In the `input` element, add a `ref` props that takes the `todoTitleInput`.\n- Finally, at the end of the event handler, we need to reference the `current` property on the `ref` and then chain on a `focus()` method. It will look something like: `todoTitleInput.current.focus();`\n\nWith that in place, a user should now be able to click the Add Todo button and the focus will return to the field.\n\n![input retains focus after submitting new todo](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/enter-todo-2.gif)",
            "codeExample": "```jsx\n{/*extract from TodoForm.jsx*/}\n{/*...code*/}\nfunction handleAddTodo(event){\n    event.preventDefault()\n    console.dir(event.target)\n}\n{/*code continues...*/}\n```",
            "_id": "68d6a34988b86b203f95b240"
          },
          {
            "taskNumber": 2,
            "title": "Render Todos from State",
            "description": "- In `App`, add the `todoList` state value to the props of the `TodoList` component instance.\n- In the `TodoList` component:\n  - Destructure `todoList` out of the component's props argument.\n  - Remove the `todos` array.\n  - Replace the reference to `todos` with `todoList` so that `todoList` is now being mapped to `TodoListItem`.\n\nYour `TodoList` component should now look like:\n\n```jsx\n{/*extract from TodoList.jsx*/}\nimport TodoListItem from \"./TodoListItem\"\n\nfunction TodoList({todoList}){\n\n    return(\n        <ul>\n            {todoList.map(todo => <TodoListItem key={todo.id} todo={todo} />)}\n        </ul>\n    )\n}\n\nexport default TodoList\n```\n\nBack over in the browser, we are still rendering the `TodoList` but it's children are now tied to the `todoList` state. Since the `initialValue` is an empty array, no `TodoListItem`s are rendered.\n\n![no todos rendered in react dev tools](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/no-todos.png)\n\n- In the browser, type a new todo in the input - the todo form should now add items to your list!\n\n![TodoListItems rendering as todos entered into form](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-04/enter-todo.gif)\n\n### Closing Notes\n\nNext week, we'll improve the way we handle the form when we talk about \"controlled components\". The approach we used to form is a little awkward but it allowed us to examine the event object from the form submission. We'll also:\n\n- allow the user to edit or complete todo list items\n- persist the todoList to local storage",
            "codeExample": "```jsx\n{/*extract from TodoList.jsx*/}\nimport TodoListItem from \"./TodoListItem\"\n\nfunction TodoList({todoList}){\n\n    return(\n        <ul>\n            {todoList.map(todo => <TodoListItem key={todo.id} todo={todo} />)}\n        </ul>\n    )\n}\n\nexport default TodoList\n```",
            "_id": "68d6a34988b86b203f95b241"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics\n\n> [!note]\n> Hooks, events, and updating state are extremely interconnected topics. To keep code examples from being too complicated, the first 3 sections will not build on CTD Swag. We will return to that in the final section, Updating State, where we tie everything together. Even though the examples are simplified, they will include some code that has not been covered quite yet. Everything illustrated will be covered by the end of the lesson. Where possible, the discussion highlights specific lines of code to pay attention for each example.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b23c"
        },
        {
          "subsectionOrder": 2,
          "title": "Basic Hooks",
          "content": "A React Hook is a function that allows functional components add state, integrate with side-effects, and work with other React features. We can also develop our own custom hooks to encapsulate logic into reusable functions. Hooks were introduced in React 16.8 (released February 2019) and gave functional components access to features that were previously available to only class-based components. We won't be working with class-based components but it's important to be aware they exist since you may encounter them in older codebases.\n\nThe existing hooks can be broken down into several categories. We'll highlight the common ones.\n\n- **state** - stores information like user input that is used to help render components\n  - `useState`: keeps track of a single, updatable value\n  - `useReducer`: used when there are a lot of values to track and update in a component - covered in week 11\n- **context** - refers to a way to share data between components without having to pass props\n  - `useContext` allows a component to read and subscribe to a defined context - covered in week 11\n- **effects**\n  - `useEffect`: allows us to run side effects like loading data or working with non-React page code - more in week 7.\n- **refs** - short for \"reference\" - they allow us to save and work with values that persist across renders but are not used for rendering\n  - `useRef`: creates a `ref` that can hold a value or commonly to access a DOM node\n- **performance**: optimizes re-render performance by allowing unnecessary re-rendering to be skipped - more in week 9.\n  - `useMemo`: caches result of an expensive calculation\n  - `useCallback`: caches a function definition between re-renders\n- **custom**: hooks created by the developer or imported from a 3rd party library to encapsulate re-usable logic - advanced topic not covered in this course\n\nLets examine several more frequently used hooks.\n\n#### useState\n\n`const [state, updateState] = useState(initialState);`\n\nWe were introduced to `useState` last week to load our inventory. It's important to recall that React prefers a functional approach. In the instance of `useState`, it means that we do not update state directly. Instead we give a new value to the state update function. This function:\n\n1. Requests React to re-render the component.\n2. Replaces the old state value with the new value.\n\nWhen React re-renders the component, it uses this new value.\n\nReact performs [shallow comparisons](https://monsterlessons-academy.com/posts/shallow-comparison-vs-deep-comparison-in-javascript) when looking for state changes. For primitive state values (strings, numbers), updating is a straight-forward process. In the example below, each time the \"Count Up\" button is pushed, `setCounter` increments the counter then tells React to refresh the component, replacing the previous counter value.\n\n```jsx\nfunction Counter() {\n  const [counter, setCounter] = useState(0);\n  function updateCounter() {\n    setCounter(counter + 1); //\n  }\n  return (\n    <>\n      <p>{counter}</p>\n      <button type=\"button\" onClick={updateCounter}>\n        Count Up\n      </button>\n    </>\n  );\n}\n```\n\nFor objects and arrays React does not look into their contents so cannot see changes to object members or array items. To properly update these state in this case, we need to create a new object or array.\n\nThe example below demonstrates how to add items to an array. The buttons use `onClick` event listeners that call `addOption`. Each button press passes a corresponding text value for the option it represents. Inside `addOption`, found on line 6, we call state update function `setTacoOptions` with a new array. Inside this array, we use spread syntax to spread in the current `tacoOptions` and add the new option.\n\n```jsx\n//useState with an array\n\nfunction TacoBuilder() {\n  const [tacoOptions, setTacoOptions] = useState(['corn tortilla']);\n\n  function addOption(option) {\n    //spread operator expands tacoOptions into a new array\n    setTacoOptions([...tacoOptions, option]);\n  }\n\n  function showSelections() {\n    return tacoOptions.reduce(\n      (accumulator, currentValue, currentIndex, tacoOptions) => {\n        if (currentIndex === tacoOptions.length - 1) {\n          return `${accumulator}, and ${currentValue}`;\n        }\n        return `${accumulator}, ${currentValue}`;\n      },\n    );\n  }\n\n  return (\n    <>\n      <div className=\"mains\">\n        <button type=\"button\" onClick={() => addOption('chicken')}>\n          Chicken\n        </button>\n        <button type=\"button\" onClick={() => addOption('beef')}>\n          Beef\n        </button>\n        <button type=\"button\" onClick={() => addOption('vegetarian')}>\n          Vegetarian\n        </button>\n      </div>\n      <div className=\"cheeses\">\n        <button type=\"button\" onClick={() => addOption('cheddar')}>\n          Add Cheddar\n        </button>\n        <button type=\"button\" onClick={() => addOption('queso fresco')}>\n          Add Queso Fresco\n        </button>\n      </div>\n      <div className=\"extras\">\n        <button type=\"button\" onClick={() => addOption('sour cream')}>\n          Add Sour Cream\n        </button>\n        <button type=\"button\" onClick={() => addOption('salsa')}>\n          Add Salsa\n        </button>\n      </div>\n      <div>\n        <p>Your taco includes: {showSelections()}</p>\n      </div>\n    </>\n  );\n}\n```\n\nObject-based state value takes a similar approach. In the example below, the `CreateUserForm` component contains two input fields that are wired to listen to changes. Each time their contents change, they call `updateFirstName` or `updateLastName`. These functions use the `value` from the event object to determine the new value.\n\n```jsx\n//useState with an object\n\nfunction CreateUserForm() {\n  const [userInfo, setUserInfo] = useState({ firstName: '', lastName: '' });\n\n  function handleSubmit(event) {\n    //logic to handle form submission\n  }\n  function updateFirstName(event) {\n    //more on the event object later this lesson...\n    //pulling the first name out of the event object\n    const firstName = event.target.value;\n    setUserInfo({ firstName: firstName, lastName: userInfo.lastName });\n  }\n  function updateLastName(event) {\n    //pulling the last name out of the event object\n    const lastName = event.target.value;\n    setUserInfo({ firstName: userInfo.firstName, lastName: lastName });\n  }\n  return (\n    //more on forms in\n    <form submit={handleSubmit}>\n      <label>\n        First Name\n        <input onChange={updateFirstName} />\n      </label>\n      <label>\n        Last Name\n        <input onChange={updateLastName} />\n      </label>\n    </form>\n  );\n}\n```\n\nOther things to know about the state value:\n\n- It's private - unless it's is passed through props, a state value can only be referenced in the component where it's defined.\n- We don't need to worry about using too many `useState`s. React batches state updates together to keep the render cycle efficient.\n\n#### useEffect\n\n`useEffect(setup, dependencies?)`\n\n> [!note]\n> A question mark (on `dependencies?`) is a common way to indicate an argument is optional\n\nThe `useEffect` hook allows us to synchronize a component with data found outside the application. This could be an API request, accessing local storage, managing a non-React feature on the same page, or any other scenario where we need to \"step outside\" of React. This hook takes two arguments: a setup function, and an optional dependency array.\n\nThe setup function contains logic needed for the effect and optionally returns a cleanup function. A cleanup function is used to for any necessary cleanup tasks before the component unmounts or before the effect is re-run. This can include clearing timers, unsubscribing from subscriptions, or any other clean-up activities to prevent memory leaks or unexpected behavior in a React component.\n\nThe dependency array is an optional list of props, state, and variables and functions defined directly in the component. After a component renders, if any of these have changed, React re-runs the `useEffect`. If this array is empty, the effect is ran only after the initial render. It will not do anything on subsequent re-renders. If the dependency array is omitted, the `useEffect` runs after first render and after each subsequent re-render.\n\nFor the example below, we've implemented another counter component. Each time the button is clicked, it updates count. After the component re-renders, React looks at the useEffect's dependencies - if any of the dependencies have changed, it will then re-run the effect. In this case, each time the component re-renders, the `useEffect` logs out a message and the `count` value to the console.\n\n```jsx\n//useEffect with dependency array\n\nfunction AnotherCounter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    // This code will run when the component first loads\n    // and each time `count` changes\n    if (count === 0) {\n      console.log(`Count has started at: ${count}`);\n    } else {\n      console.log(`Count has changed to: ${count}`);\n    }\n  }, [count]);\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>Increment Count</button>\n      <p>Count: {count} </p>\n    </>\n  );\n}\n```\n\nIn `WebSocketComponent` below, we use the `useEffect` to create a new web socket connection after the component first renders. The connection remains intact during subsequent re-renders of the component. The `useEffect` returns a cleanup function that disconnects the component from the web socket when the component is removed from the DOM. If this step was not included, the web socket connection would remain open and would not close until the application was closed out or the page manually refreshed.\n\n```jsx\n//useEffect with dependency array and cleanup function\n\nfunction WebSocketComponent {\n\n  useEffect(() => {\n    const socket = new WebSocket('sockets://example.com/socket');\n\n    socket.onopen = () => {\n      console.log('WebSocket connection opened');\n    };\n\n    socket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    return () => {\n      console.log('Cleanup - Closing WebSocket connection');\n      socket.close();\n    };\n  }, []);\n\n  return <div>WebSocket Component</div>;\n};\n```\n\nThe `useEffect` in the example logs a message to the console when the component first renders. It does nothing else on subsequent re-renders.\n\n```jsx\n//useEffect with empty dependency array\nconst ExampleComponent = () => {\n  useEffect(() => {\n    console.log('Component mounted');\n  }, []);\n\n  return <div>Example Component</div>;\n};\n```\n\nIn the final example, the `useEffect` logs a message to the console on the initial render and after each re-render.\n\n```jsx\n//useEffect with no dependency array\nconst ExampleComponent = () => {\n  useEffect(() => {\n    console.log('Effect without dependencies - runs on every render');\n  });\n\n  return <div>Example Component</div>;\n};\n```\n\n#### useRef\n\n`const ref = useRef(intialValue)`\n\n`useRef` is a React Hook that returns an object whose `current` property is initialized with the provided value. The ref's `current` property can be used to hold a value that we can change but remains intact across component re-renders. A change a ref does not trigger a component re-render. `useRef` is commonly used to access DOM nodes and managing focus on input fields.\n\nIn the following example, we store a reference to the page title and then use useEffect to keep it updated with the latest `count` value.\n\n```jsx\n//useRef used in conjunction with useEffect to update a page title\n\nfunction PageTitleUpdatingCounter() {\n  const [count, setCount] = useState(0);\n  const title = useRef(document.querySelector('title');\n\n  useEffect(() => {\n    // This code will run when the component first loads\n    // and each time `count` changes\n    title.current.text = `Times pressed: ${count}`\n  }, [count]);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment Count</button>\n    </div>\n  );\n};\n\n```\n\nUsing `useRef` comes with a few rules.\n\n1. This value can be updated during initialization but should never be read or written during the re-render cycle. This means that we should only be working with it in other hooks or functions defined in the component. Changing or reading the value at the top level of the component after the first render leads to unpredictable behavior:\n\n```jsx\n//do NOT do this:\nfunction BadComponent() {\n  const someValue = useRef('foo');\n  someValue.current = 'bar'; //accessing or changing here can lead to problems\n  //rest of the component code...\n}\n```\n\nUpdating the value during initialization is alright so long as the initial value is predictable.\n\n```jsx\n//this is OK\nfunction ExampleComponent() {\n  const title = useRef(null);\n  if (title.current === null) {\n    title.current = document.querySelector('title');\n  }\n  //rest of the component code...\n}\n```\n\n1. Don't use it in the component's return body. These values are not meant for rendering and DOM references cannot be accessed outside of the component without additional tools. [`forwardRef`](https://react.dev/reference/react/forwardRef) helps with this but is an advanced topic so we will not be covering it in this course.\n\nWith hooks like useState, useEffect, and useRef, React developers can handle component state, side effects, and manage DOM elements outside the application. Understanding hooks is fundamental in modern React development and essential for building scalable and efficient applications. These are just a few hooks available and we will add new hooks to our toolkit as the weeks continue. We still have events to cover so let's keep on moving…",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b23d"
        },
        {
          "subsectionOrder": 3,
          "title": "Events and Handlers",
          "content": "#### Child Component to Parent Component Communication\n\nLast week we discussed how props are used to communicate in a component tree from parent components down to their children. The data passed is used to configure a component's appearance when it renders but this does not solve the challenge of managing state across an application. Recall that props are read-only and can only be changed with the state update function provided by `useState`.\n\nWe cannot pass props up the component tree (child to parent), but we can take advantage of functions passed through props to communicate back to the parent. A function, when it is used this way, is referred to as a \"callback\" or a handler function. We can use state update functions as callbacks or we can define our own. When we invoke the callback in our child component, we are communicating that a state update needs to be processed. Depending on the the type of state being update, we can include a new value or allow the callback to determine what that new value needs to be.\n\n```mermaid\n---\ntitle: Flow of Information in React\n---\nflowchart LR\nParent --->|props| Child\nChild -->|callback invocation| Parent\n```\n\n#### Synthetic Events\n\nBrowsers emit objects called events that signal when things happen on a web page. This gives developers information about the event so that they can program behavior around it. React introduces a concept of a _React event object_, more frequently known as a _synthetic event_, which is very similar to a browser's _event object_. In fact, a synthetic event is just a wrapper around a normal event object with the main goal of having consistent event APIs across all the different browsers.\n\n[React's documentation](https://react.dev/reference/react-dom/components/common#react-event-object) includes a full list of common properties and methods on the synthetic event. A few are worth mentioning because we will see them frequently:\n\n- properties\n  - **`currentTarget`**: DOM node where the event listener has been is attached.\n  - **`target`**: DOM node where event was triggered - this could be anywhere in the tree at or below the Component that is reading this property due to [event bubbling](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling).\n- methods\n  - **`preventDefault()`**: Prevents the default browser action on the event. eg: preventing a page refresh from a form submission.\n  - **`stopPropogation()`**: Stops the event from bubbling up the React tree.\n\n#### Handler Props\n\nReact includes an [exhaustive list](https://react.dev/reference/react-dom/components/common#common-props) of built in handler props that we can add to our components. Each one is designed to take a callback function and pass it a synthetic event that it can optionally consume. React adds additional properties to the synthetic event relevant to the event type whenever the listener is triggered. All of these event-based handler props have a prefix `on`, as in `onClick`, `onChange`, etc. Since there are 14 event types, we have to prioritize learning event types and props that relate to our project. We can save the other event types less common handler props for future exploration.\n\n- `MouseEvent` - events that involve mouse navigation\n  - example handlers: `onClick`, `onMouseEnter`, `onMouseOver`, and `onMouseLeave`\n  - properties added to the synthetic event: which button is pushed, keyboard modifiers, cursor location, cursor movement\n- `TouchEvent` - events from interacting with screen interfaces like cell-phones or tablets.\n  - `onTouchStart`, `onTouchMove`, `onTouchEnd`, `onTouchCancel`\n  - properties added to the synthetic event: keyboard modifiers, touches, and targets of touches\n- `InputEvent` - events involving editable inputs such as check boxes, text fields, text-areas etc.\n  - `onChange`, `onSelect`\n  - properties added to the synthetic event: keyboard modifiers",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b23e"
        },
        {
          "subsectionOrder": 4,
          "title": "Updating State",
          "content": "#### Handler Composition Options\n\nReact provides a great deal of flexibility when it comes to composing handler props and handler/callback functions in our applications. Creating a custom callback in the parent or the child are equally acceptable. To help with readability, it is common to prefix a custom function's name with \"handle\", as in `handleClick`, `handleUpdatePassword`, or `handleAddItemToCart`. This approach lets us know that data related to an event is being handled. The example below transforms a email address to all lowercase letters before it is passed to `setEmail`. It also prevents the default form behavior which is to trigger a page refresh.\n\n```jsx\n//setEmail is a state update function provided as a callback by the parent component\nfunction EmailInput({ setEmail }) {\n  const emailInput = useRef();\n\n  function handleSubmit(event) {\n    //prevents page refresh\n    event.preventDefault();\n    const lowerCaseEmail = emailInput.current.value.toLowerCase();\n    setEmail(lowerCaseEmail);\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Email:\n        {/*assigning ref selects the element on the page*/}\n        <input type=\"text\" ref={emailInput} />\n      </label>\n      <button />\n    </form>\n  );\n}\n```\n\nIn the example below, we've created 2 custom callbacks, `increment` and `decrement` and then pass them each to an instance of a `Button` component. When clicked, `onClick` invokes the callback which uses `setCount` to update state with the appropriate value.\n\n```jsx\n//Parent component using custom callbacks on 2 buttons\n\nfunction YetAnotherCounter(){\n const [count, setCount] = useState(0);\n\n function increment(){\n  setCount(count + 1);\n }\n function decrement(){\n  setCount(count -1);\n }\n return (\n <>\n  <Button updateCount={increment} text={\"increase\"}/>\n  <Button updateCount={decrement} text={\"decrease\"}/>\n  <p>Counter: {count}</p>\n </>\n  );\n )\n}\n//each instance of Button above behaves differently because it was given a different callback\nfunction Button({updateCount, text}){\n return (\n  <button type=\"button\" onClick={updateCount}>{text}</button>\n )\n}\n```\n\nWe can even add an inline arrow function on a handler props directly.\n\n```jsx\n//inline arrow function\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment Count</button>\n      <p>Button pressed {count} times.</p>\n    </div>\n  );\n}\n```\n\n#### Putting it all Together\n\nWe need to make a minor change to the inventory. Currently, we're not using the updater function for the cart but we will when transition over to API use. Let's implement `useEffect` to load in the inventory in preparation for this move. To make sure we load the inventory only once, we include an empty dependency array in the `useEffect`.\n\n```jsx\n//App.jsx\n//...component code\nconst [inventory, setInventory] = useState([]);\nuseEffect(() => {\n setInventory([...inventoryData.inventory);\n}, []); //<--- don't forget the dependency array or you can end up with an infinite loop!!\n//...component code\n```\n\nIt loads the same as before but now the code is a bit more flexible for future changes.\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-04/render-priority-product-list.png)\n\nLet's fix up the styling to make it look more like a storefront and then add a shopping cart! For now, we'll add classes to elements so that they're easy to select and add style rules to `App.css` - the same that we would do with a static html page. We'll talk about css and images in depth in week 10 because there are other, more flexible options for styling in React, especially as an app grows and becomes more complex.\n\n![product cards](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-04/product-cards.png)\n\nFor a cart feature, we need to be able to track items that have been put into a cart. To do so, we'll to add another `useState` to hold and update the items a user has selected. The initial state will be an empty array and we need handler function to add items from the cart. Removing items will come next week when we work with forms. We're also going to remove the special limited edition tee to simplify the product list. It will end up causing bugs because it's not a part of the inventory that we import from `catalog.json`. Sorry Frank, it'll come back later!\n\n```jsx\n//App.jsx\n//...component code\nconst [cart, setCart] = useState([]);\nfunction addItemToCart(item) {\n  setCart([...cart, item]);\n}\nfunction removeItemFromCart(id) {\n  const updatedCart = cart.filter((item) => item.id !== id);\n  setCart([...updatedCart]);\n}\n//...component code\n```\n\nThere's a problem with this implementation… what if a user adds the same item to their cart twice? That would mean there is more than one item in the cart with the same `id`. As it's implemented, the `id` that's used would filter out all the inventory items with a matching `id`. That's not a desired behavior so we need to come up with a unique cart item identifier.\n\nWe might employ `Math.random()` to generate a random number but this is not a great idea. [`Math.random`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) only generates pseudo-random numbers and we may end up with the identical id every once in a while. A better option would be the `Date.now()` method. This returns a number, in milliseconds from January 1, 1970, UTC. In production, we would probably use a UUID library but this works for our purposes. As we add an item into the cart, we'll assign it a `cartItemId` with the timestamp so we are better able to manage the cart.\n\n```jsx\n//App.jsx\n//...component code\nconst [cart, setCart] = useState([]);\nfunction handleAddItemToCart(id) {\n  const target = inventory.find((item) => item.id === id);\n  //if no inventory items are found\n  //we want to prevent the app from crashing\n  //by exiting this function now\n  if (!target) {\n    console.error('cart error: item not found');\n    return;\n  }\n  //create an new object, spread the contents of the item selected\n  //and add a `cartItemId`\n  const cartItem = { ...target, cartItemId: Date.now() };\n  console.log(cartItem);\n  setCart([...cart, cartItem]);\n}\n//...component code\n```\n\nNow that we have a handler function to update the cart state, we need to wire `handleAddItemToCart` to the UI so a user can add items to the cart. We will do so by adding buttons to each of the cards so that its product can added to the cart. This will not account for different t-shirt sizes or products that have color variations but we will address those cases after we get the basics of the cart in place.\n\n1. Add the props `handleAddItemToCart={handleAddItemToCart}` to `ProductList`, then from `ProductList` pass down to `ProductCard` using `handleAddItemToCart={handleAddItemToCart}`\n2. Create a button in `ProductCard`\n3. We then add an `onClick` event prop to the button. Since we have to provide it with an argument unrelated to the synthetic event, we'll create an anonymous arrow function to call our handler with the correct args.\n\n- `<button onClick={() => handleAddItemToCart(cartItemId)}>Add to Cart</button>`\n\nWith that done, we can now look at the state in `App` using our [React Dev Tools](https://react.dev/learn/react-developer-tools) (it's highly recommended that you have them installed!). The second State entry grows every time one of the buttons is clicked. When the entries are expanded, they contain all the details of the product but there is also a unique `cartItemId`.\n\n![adding items to cart updates state](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-04/add-product-state.gif)\n\nNow that we have a state representation of the cart, we can add it to the page. The cart does not need to remain open all the time - it would get in the way of the products. We'll keep the cart minimized and add a cart icon with an item count in the upper-left corner which is controlled by the Header component.\n\n1. We add in the icon and place it on the page and use styling to push it over to the side of the screen.\n2. We then add a `cart` props to the Header component definition: `function Header({ cart }) {`\n3. Back in App, we then add the cart props to the header tag: `<Header cart={cart} />`\n4. To get an item count to appear, we calculate the length of the cart array.\n\nSince we haven't talked about conditional rendering, we cannot work on displaying a full cart list. We would have to have this full list available to implement the `removeItemFromCart` handler function. For now, we'll update the `Header` so that it prints the shopping cart to the console. To run useEffect every time the component renders, we'll exclude the dependency list.\n\n```jsx\n//Header.jsx\n\n//... component code\nuseEffect(() => {\n  cart.forEach((item) => {\n    console.log(item.baseName, item.cartItemId);\n  });\n  if (cart.length > 0) {\n    console.log('--end of cart--');\n  }\n});\n//...component code.\n```\n\n![print shopping cart to console](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-04/add-product-console.gif)\n\n> [!note]\n> A handler function's name doesn't have to remain the same when it passed through props. We could have called the props `addItem` when defining ProductCard and then added that to the `onClick`",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b23f"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b243",
      "lessonNumber": 5,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 5",
        "objective": "## Weekly Assignment Instructions\n\n## Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- conditionally render a message when the todo list is empty\n- disable the Add Todo button when the input is empty\n- allow users to complete a todo\n- utilize a controlled form",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Conditional Rendering a Message",
            "description": "In TodoList.jsx:\n\n- create a [ternary statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator) that compares the todoList's length to zero.\n  - if `true`, render a paragraph tag that includes the text \"Add todo above to get started\"\n  - if `false`, render the unordered list includes the mapped todo list.\n\nYour app should show the paragraph if the list is empty or the todos if the `todoList` contains any.\n\n![hitting enter adds todo](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-05/enter-todo.gif)",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b247"
          },
          {
            "taskNumber": 2,
            "title": "Mark Todo as Complete",
            "description": "Rather than deleting a todo item outright, we want to indicate it has been completed. We'll update the schema that the todos use and create a helper function that toggles the value when the user clicks a checkbox on the todo.\n\n- In `App`, update `newTodo` in the `addTodo` event handler with a new property called `isCompleted` and set it to `false`. Each todo should now consist of 3 properties: `title`, `id`, and `isCompleted`.\n- Create a helper function `completeTodo`. It:\n  - takes an `id`\n  - maps through the `todoList` and:\n  - if the current `todo.id` matches the `id`, return a new object that destructures the current todo and `isCompleted` set to `true`\n  - otherwise (if `todo.id` does not match the `id`) return the `todo`\n  - saves the resulting array to a const `updatedTodos`\n  - update the `todoList` state with `updatedTodos`\n\nthe function will use logic very similar to the example below:\n\n```js\nfunction favoriteColor(colorId) {\n    const updatedColors = colors.map((color) => {\n        if (color.id === colorId) {\n        return { ...color, isFavorite: true };\n    }\n        return color;\n    });\n    //update `colors` state with `updatedColors`\n}\n```\n\n- pass your new helper function to a `TodoList` props named `onCompleteTodo`\n- in `TodoList`, destructure that out of the component's props.\n- add the same props to the `TodoListItem` instance and pass in that helper.\n- in `TodoListItem`\n  - destructure the function out of props\n  - create a form element in the list item and move `{todo.title}` into it.\n  - above that, create an input\n    - give it the type of \"checkbox\"\n    - add the prop `checked` and set it equal to `todo.isCompleted`\n    - add an `onChange` event listener and then invoke an anonymous function that returns the helper function with the `todo` object's id.\n\n> [!remember]\n> You do not want to call the helper function directly in an event listener props. If you do this, the function will immediately fire off when the component renders, causing bugs!\n\nTo assist with the structure of the components elements, follow this layout:\n\n```jsx\n{/*extract from TodoListItem.jsx*/}\nfunction TodoListItem({ todo, onCompleteTodo }) {\n  return (\n    <li>\n      <form>\n        <input\n          {/* set the `type` prop to \"checkbox\" */}\n          {/* add the `checked` props */}\n          {/* add `onChange` event listener that uses the `onCompleteTodo` helper` */}\n        />\n        {todo.title}\n      </form>\n    </li>\n  );\n}\n\nexport default TodoListItem;\n```\n\nEach todo should now have a checkbox. When the checkbox is clicked, the helper function will set `isCompleted` to `true`. Our final step is to filter out the completed todos.\n\nIn `TodoList`, we need to filter out the completed todos before we map the todos to `TodoListItem` instances.\n\n- create a constant `filteredTodoList` that contains the `todoList` that has been filtered to remove any todo whose `.isCompleted` property is `true`\n- replace the `todoList` references in the JSX with the `filteredTodoList`\n\nNow, when a user clicks on the checkbox beside an item, that todo disappears from the list.\n\n![submit and complete a todo](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-05/add-complete-todo.gif)",
            "codeExample": "```js\nfunction favoriteColor(colorId) {\n    const updatedColors = colors.map((color) => {\n        if (color.id === colorId) {\n        return { ...color, isFavorite: true };\n    }\n        return color;\n    });\n    //update `colors` state with `updatedColors`\n}\n```\n\n```jsx\n{/*extract from TodoListItem.jsx*/}\nfunction TodoListItem({ todo, onCompleteTodo }) {\n  return (\n    <li>\n      <form>\n        <input\n          {/* set the `type` prop to \"checkbox\" */}\n          {/* add the `checked` props */}\n          {/* add `onChange` event listener that uses the `onCompleteTodo` helper` */}\n        />\n        {todo.title}\n      </form>\n    </li>\n  );\n}\n\nexport default TodoListItem;\n```",
            "_id": "68d6a34988b86b203f95b248"
          },
          {
            "taskNumber": 3,
            "title": "Convert Form to Controlled Component",
            "description": "### Create Local State\n\n- import `useState` into `TodoForm`\n- create a `workingTodoTitle` state variable with the accompanying state update function.\n- give the `useState` an initial value of an empty string.\n\n### Connect Form Input to Component State\n\n- to the `input` element in the form, add a `value` props set to `workingTodoTitle`.\n- add an `onChange` listener to the `input`.\n  - it should call an anonymous arrow function that takes in the event object.\n  - the anonymous function should call `setWorkingTodo` and pass in the event's target value.\n\n### Update `handleAddTodo`\n\n- remove the lines that access the title's value from the event object\n  - hint: there's one that retrieves the value and one that sets the target's title `value` back to `\"\"`\n- update `onAddTodo` so that it gets passed `workingTodoTitle` instead of `title`.\n- after `onAddTodo`, call the `setWorkingTodo` state update function with an empty string to reset the form input.",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b249"
          },
          {
            "taskNumber": 4,
            "title": "Disable Form Button when Input is Empty",
            "description": "We are pretty close to being complete for this week but there is one minor problem with the interface. A user is able to add empty todos to their list. Since the form was converted to a controlled component, we can do so based on the value of the working state in the component.\n\n![user is able to hit add todo even when input is empty](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-05/submit-enabled.gif)\n\n- In `TodoForm`'s button element, add a `disabled` prop that evaluates to true when `workingTodo` is an empty string.\n\n![submission button disabled when input is empty](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-05/submit-disabled.gif)",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b24a"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b244"
        },
        {
          "subsectionOrder": 2,
          "title": "Conditional Rendering",
          "content": "When we left off with CTD Swag, we had a shopping cart icon and a counter on the upper-right portion of the screen. This gave the user a count of their cart contents but left them without the means to see everything they've selected. A detailed shopping cart takes up a lot of screen real estate and gets in the way of the shopping experience. Components like these are commonly developed so they can be toggled open or closed by some user action.\n\nConditional rendering allows us to develop an interface that adapts to different states, user interactions, or data inputs. Developers can employ different techniques to hide and show elements, change styles, and update visual content to create interactive and personalized user interfaces. Before we create a shopping cart that we can show/hide, let's look some common techniques we can employ.\n\n#### Ternary Operator\n\n`condition? expressionIfTrue : expressionIfFalse`.\n\nThe ternary operator is a useful tool that evaluates a condition and then executes one of two possible expressions. If true, the expression on the left executes. False causes the right-hand expression to execute. These expressions can be written in JSX which results in compact code.\n\n```jsx\n//ternary operator that shows 1 of 2 components\nconst [isTruthy, setIsTruthy] = useState(true);\nreturn(\n <>\n  {isTruthy ? <TrueComponent /> : <FalseComponent /> }\n  <button type=\"button\" onClick=(()=> setIstTruthy(!isTruthy))>Toggle Value</button>\n </>\n);\n```\n\nReact allows us to use `null` in place of an expression so we can show or hide an element.\n\n```jsx\n//ternary operator to conditionally show a component\nconst [isRendered, setIsRendered] = useState(true);\nreturn(\n <>\n  {isTruthy ? <SpecialComponent /> : null }\n  <button type=\"button\" onClick=(()=> setIsRendered(!isRendered))>Show/Hide Element</button>\n </>\n);\n```\n\n#### Logical && Operator\n\nWe can take advantage of the way JavaScripts logical `&&` operator works to show or hide an element. Remember that JavaScript evaluates the left side (operand) first before continuing onto the right hand side. When the first operand is truthy, the second operand is evaluated - that is where we return our element. If that first operand is false, JavaScript stops the entire evaluation which prevents the item from being rendered.\n\n```jsx\n//logical && operator to conditionally show a component\nconst [isRendered, setIsRendered] = useState(true);\nreturn(\n <>\n  {isTruthy && <SpecialComponent /> }\n  <button type=\"button\" onClick=(()=> setIsRendered(!isRendered))>Show/Hide Element</button>\n </>\n);\n```\n\n#### Display Logic in a Function\n\nIn cases where we have more than two options or our rendering logic is complex, we can define functions inside the component and use their return values. What's nice about this approach is that we can return JSX. We'll talk about some performance implications in [[Code The Dream/Intro to React V3/Curriculum/Week-09|Week-09]] that may arise from functions inside components but we will not be writing anything that will cause any performance problems during this course.\n\nIn the example below, the interface renders a button that calls `cycleLight`. Each time it does, it cycles through traffic light colors (green->yellow->red->green->…and so on). Each time `trafficLightColor` is updated, the component is re-rendered, calling `renderLight`. `renderLight` uses a switch-case statement to determine the correct component to render.\n\n```jsx\nconst [trafficLightColor, setTrafficLightColor] = useState('green');\n\nfunction cycleLight() {\n  switch (trafficLightColor) {\n    case 'green':\n      setTrafficLightColor('yellow');\n      return;\n    case 'yellow':\n      setTrafficLightColor('red');\n      return;\n    default:\n      setTrafficLightColor('green');\n      return;\n  }\n}\n\nfunction renderLight() {\n  switch (trafficLightColor) {\n    case 'green':\n      return <YellowLight />;\n    case 'yellow':\n      return <RedLight />;\n    default:\n      return <GreenLight />;\n  }\n}\n\nreturn (\n  <>\n    {renderLight()}\n    <button type=\"button\" onClick={cycleLight}>\n      Cycle Light\n    </button>\n  </>\n);\n```\n\n#### Putting Conditional Rendering into Action\n\n> [!tip]\n> When we need to see dynamic elements in our layout but are not ready to code them, we can add placeholders in the JSX. These can be plain text substitutions for values like a cart's total price or placeholder images similar to the one found on each product's card. This helps us determine our layout and anticipate any tasks that we are going to have to complete. As we continue to build the feature we can replace these substitutions with live code.\n\n##### Combining `baseItems`\n\nNow that we know how to show and hide components, we can start making improvements to the store. The first task is to update cards to let users choose from product variations. This will allow us to combine items of different colors or models into a single card that the user opens to select which variant they want to add to their cart.\n\nTo achieve this, we have to change the way ProductList handles inventory items. Rather than mapping them to a `ProductCard` component, we make state variable, `products`, that is updated when `inventory` props changes. Inside this `useEffect` we create an empty array containing `workingProducts` and then iterate over the inventory to compose the each product in `workingProducts` before using that array to set the `products` variable.\n\n`forEach` basically looks at each item's `baseName` property to see if it matches any object already in `workingProducts`. If a match is found, that item is pushed into a `variants` array. If there is no match, a new object is composed for a product and then pushed into `workingProducts`.\n\n```jsx\n//extract from ProductList.jsx\n//...component code\nconst [products, setProducts] = useState([]);\n\nuseEffect(() => {\n  const workingProducts = [];\n  inventory.forEach((item) => {\n    if (!item.inStock) {\n      return;\n    }\n    if (\n      !workingProducts.find(\n        (productItem) => productItem.baseName === item.baseName,\n      )\n    ) {\n      workingProducts.push({\n        baseName: item.baseName,\n        price: item.price,\n        baseDescription: item.baseDescription,\n        variants: [{ ...item }],\n      });\n    } else {\n      const index = workingProducts.findIndex(\n        (productItem) => productItem.baseName === item.baseName,\n      );\n      workingProducts[index].variants.push({ ...item });\n    }\n  });\n  setProducts([...workingProducts]);\n}, [inventory]);\n//component code...\n```\n\nOur next step is to make changes to the `ProductCard` component so it can conditionally show a \"Show Options\" button instead of \"Add to Cart\" when a card contains more than one product variant. We can do so by examining the `variants` length. Our handleAddItemToCart is also updated to grab the id off of the default variant when only one exists.\n\n```jsx\n//extract from ProductCard.jsx\n<div className=\"productButtons\">\n  {product.variants.length > 1 ? (\n    <button>Show Options</button>\n  ) : (\n    <button onClick={() => handleAddItemToCart(product.variants[0].id)}>\n      Add to Cart\n    </button>\n  )}\n</div>\n```\n\nFinally, we need to display the variants to the user so they can add them to their cart. For this, we create another component, `ProductCardVariants` that accepts an array of variants, a handler function to close the display, and a handler function to add an item to the cart.\n\n```jsx\n//ProductCardVariants.jsx\n\nfunction ProductCardVariants({ variants, closeVariants, handleAddItemToCart }) {\n  return (\n    <div className=\"productVariantsWrapper\">\n      <ul>\n        {variants.map((variant) => {\n          return (\n            <li key={variant.id} className=\"productVariant\">\n              <div className=\"variantPreview\">\n                <img\n                  src={`/public/product-images/${variant.image}`}\n                  alt={variant.variantDescription}\n                />\n                <p>${variant.price}</p>\n              </div>\n              <div className=\"variantDetails\">\n                <h3>{variant.variantName}</h3>\n                <p>{variant.variantDescription}</p>\n                <button\n                  onClick={() => {\n                    handleAddItemToCart(variant.id);\n                    closeVariants();\n                  }}>\n                  Add to cart\n                </button>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n      <button\n        className=\"variantsCloseButton\"\n        type=\"button\"\n        onClick={closeVariants}>\n        Close\n      </button>\n    </div>\n  );\n}\n\nexport default ProductCardVariants;\n```\n\nThat component is imported into ProductCard, and its visibility will depend on a state variable `areVariantsShown` the accompanying state variable updater function is then used to show/hide the options.\n\n```jsx\n//ProductCard.jsx extract\n\nreturn (\n  <li className=\"productCard\">\n    <div className=\"productPreview\">\n      <img src={placeholder} alt=\" \" />\n    </div>\n    <div className=\"productCopy\">\n      <h2>{product.baseName}</h2>\n      <p>{product.baseDescription}</p>\n    </div>\n    <div className=\"productButtons\">\n      {product.variants.length > 1 ? (\n        <button onClick={() => setAreVariantsShown(true)}>Show Options</button>\n      ) : (\n        <button onClick={() => handleAddItemToCart(product.variants[0].id)}>\n          Add to Cart\n        </button>\n      )}\n    </div>\n    {areVariantsShown && (\n      <ProductCardVariants\n        handleAddItemToCart={handleAddItemToCart}\n        variants={product.variants}\n        closeVariants={() => setAreVariantsShown(false)}\n      />\n    )}\n  </li>\n);\n```\n\nHere is the resulting change:\n\n![show bucket hat options](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/show-options.gif)\n\n##### Create Cart Component\n\nLooking back at CTD swag, we can now determine which approaches to use that best suites our needs at each step of building out the feature.\n\nTo get started, we create a cart component which contains the contents of the shopping cart, a cart total, and a button to close the cart. We need to include props for the cart and the handler function that handles closing the cart. The inside an unordered list, items are mapped to `li.cartListItem` similar to how the products were mapped to a list of cards in the store. We can then include a cart total and a button to close the cart. We pass an `onClick` props to the button with the handler function.\n\n```jsx\n//Cart.jsx\n\nimport placeholder from './assets/placeholder.png';\n\n// `handleCloseCart` is not made yet but we know we will need it\nfunction Cart({ cart, handleCloseCart }) {\n  return (\n    <>\n      <div className=\"cartScreen\"></div>\n      {/*\n   .cartScreen covers the product list with\n   a div that has a blur effect placed on it.\n   this makes the product buttons unclickable\n  */}\n      <div className=\"cartListWrapper\">\n        <ul className=\"cartList\">\n          {cart.map((item) => {\n            return (\n              <li className=\"cartListItem\" key={item.cartItemId}>\n                <img src={placeholder} alt=\"\" />\n                <h2>{item.baseName}</h2>\n                <div className=\"cartListItemSubtotal\">\n                  <p>${item.price}</p>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        {/* cart total will need to be calculated */}\n        <h2>Cart Total: $0.00</h2>\n        <button onClick={handleCloseCart}>CloseCart</button>\n      </div>\n    </>\n  );\n}\n\nexport default Cart;\n```\n\n#### Track Cart's Display Status\n\nWe next move to the `App` component to add the `Cart` component to the UI. The logic to show and hide the cart is simple so we do not need to extract a function to perform our conditional rendering. We are left with ternary operator or the logical `&&`. Both choices are valid but implementing the feature with the logic `&&` operator will give us with the least amount of code. Let's insert the toggle-able cart underneath the `ProductList` component.\n\nWe need a boolean state value that starts out with a value that hides the cart when the SPA is first visited. `const [isCartOpen, setIsCartOpen] = useState(false);` We then conditionally render the `Cart` based on `isCartOpen`. The code below provides the `App`'s full return statement:\n\n```jsx\n// App.jsx excerpt\n\nreturn (\n  <>\n    <Header cart={cart} handleOpenCart={handleOpenCart} />\n    <main>\n      <ProductList\n        inventory={inventory}\n        handleAddItemToCart={handleAddItemToCart}></ProductList>\n      {/*`isCartOpen has to be true for the cart to be rendered*/}\n      {isCartOpen && <Cart cart={cart} />}\n    </main>\n    <footer>\n      <p>\n        Made with ❤️ | &copy; {year.current}{' '}\n        <a href=\"https://codethedream.org/\">CTD </a>\n      </p>\n    </footer>\n  </>\n);\n```\n\nLet's open the React dev tools to see how things are working. We don't have our button wired up yet but we should be able to modify that state value to show/hide the cart.\n\n![showing state change in components tab](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/open-cart-state.gif)\n\n#### Opening and Closing Cart\n\nThe cart is working so now it's time to make handlers to open and close the cart.\n\n```jsx\n//App.jsx\n//component code...\nfunction handleCloseCart() {\n  //prevents re-render if unchanged\n  if (isCartOpen) {\n    setIsCartOpen(false);\n  }\n}\n\nfunction handleOpenCart() {\n  //prevents re-render if unchanged\n  if (!isCartOpen) {\n    setIsCartOpen(true);\n  }\n}\n//component code...\n```\n\nWe then need to add the props for the handler function into the component definition of the `Header`. When that's been added, we go back to `App` and pass the props into the `Header` `<Header cart={cart} handleOpenCart={handleOpenCart} />`. We complete the handling for opening of the cart by wrapping the image with a button element and then adding in an `onClick` props with the handler function. We also can remove the `useEffect` since it was just to log the cart contents to the console. The `Header`'s code will now look like this:\n\n```jsx\n//Header.jsx\nimport { useEffect } from 'react';\nimport ctdLogo from './assets/icons/mono-blue-logo.svg';\nimport shoppingCart from './assets/icons/shoppingCart.svg';\n\nfunction Header({ cart, handleOpenCart }) {\n  return (\n    <header>\n      <div className=\"siteBranding\">\n        <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n        <h1>CTD Swag</h1>\n      </div>\n      <div className=\"shoppingCart\">\n        <button type=\"button\" onClick={handleOpenCart}>\n          <img src={shoppingCart} alt=\"\" />\n          <p className=\"cartCount\">{cart.length}</p>\n        </button>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n```\n\nSince we already have the `handleCartClose` in the props of the `Cart` component, it's now a matter of passing the handler as props: `{isCartOpen && <Cart cart={cart} handleCloseCart={handleCloseCart} />}`.\n\n![cart opening and closing](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/open-close-cart.gif)\n\n#### Render a Message Instead of an Empty List\n\nIt may also be nicer for the user to see a message rather than rendering an empty list. Showing a message or a list is another conditional rendering scenario to address. The logic to change between the two elements is still simple enough that we don't need to extract a function for conditional rendering. The `&&` operator will not work here either so we are left with using a ternary. We look at the `cart`'s length and then determine if it's empty or not. If `cart.length === 0` then the lefthand expression executes, showing the message. If it contain items, the righthand executes, showing the list.\n\n```jsx\n// extract from Cart.jsx\n//...component code\n{\n  cart.length === 0 ? (\n    <p>cart is empty</p>\n  ) : (\n    <ul className=\"cartList\">\n      {cart.map((item) => {\n        return (\n          <li className=\"cartListItem\" key=\"{item.cartItemId}\">\n            <img src=\"{placeholder}\" alt=\"\" />\n            <h2>{item.baseName}</h2>\n            <div className=\"cartListItemSubtotal\">\n              <p>${item.price}</p>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n//component code...\n```\n\nWe are left with updating the cart total. It's not important to hide this total from the user so we'll add the cart total after the ternary block that shows the list or the empty cart message. To calculate the total, we iterate over the `cart` items to add up the price. Since the logic to do this is a little more complicated, we create a function to return the cart total for display.\n\n```jsx\n//extract from Cart.jsx\n\nfunction Cart({ cart, handleCloseCart }) {\n  function getCartPrice() {\n    // using `.toFixed` because floating point arithmetic\n    // introduces suprising rounding issues\n    // eg: `console.log(.99 + .99 +.99)` will print 2.9699999999999998\n    return cart.reduce((acc, item) => acc + item.price, 0).toFixed(2);\n  }\n  return (\n    <div className=\"cartListWrapper\">\n      //...component code\n      <h2>Cart Total: ${getCartPrice()}</h2>\n      <button onClick={handleCloseCart}>CloseCart</button>\n    </div>\n  );\n}\n\nexport default Cart;\n```\n\n#### Updating Cart to Accept User Inputs\n\nOur shopping cart looks pretty good but there are a few improvements that can be made. In shopping carts on other sites frequently users to make changes to their carts - they can remove items or change the quantity of items in the cart.\n\n![updating cart at mechanicalkeyboards.com](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/keyboard-switch.gif)\n![updating cart at louisianapantry.com](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/lousiana-pantry.gif)\nCurrently, the state value, `cart`, is just an array that lists the cart's contents. We want to update `cart` so it creates only one list item for each unique product. The product, in turn, contains data about how many times it's been added to the cart using `itemCount`. We can remove `cartItemId` property and then resume using the item's id as a key in the cart's list. An example cart item now looks like:\n\n```js\n//typical `cart` item\n{\n  \"baseName\": \"Mouse Pad\",\n  \"variantName\": \"Default\"\n  \"id\": \"6\",\n  \"price\": 12.99,\n  \"baseDescription\": \"A pad perfect for mousing\",\n  \"variantDescription\": \"\",\n  \"image\": \"mouse-pad.png\",\n  \"inStock\": \"TRUE\",\n  \"itemCount\": 3\n}\n```\n\nWe then need to update the handler that adds item to `cart`. After doing some error handling on `inventoryItem` we search the `cart` for an item that includes the product id. If one exists, the handler needs to increment `itemCount`. If not, it creates a new item to add to the `cart`.\n\n```jsx\n//extract from App.jsx\n\nfunction handleAddItemToCart(id) {\n  const inventoryItem = inventory.find((item) => item.id === id);\n  if (!inventoryItem) {\n    console.error('cart error: item not found');\n    return;\n  }\n  const itemToUpdate = cart.find((item) => item.id === id);\n  let updatedCartItem;\n  if (itemToUpdate) {\n    updatedCartItem = {\n      ...itemToUpdate,\n      itemCount: itemToUpdate.itemCount + 1,\n    };\n  } else {\n    updatedCartItem = { ...inventoryItem, itemCount: 1 };\n  }\n  setCart([...cart.filter((item) => item.id !== id), updatedCartItem]);\n}\n```\n\nWe need to update the logic that provides the cart icon its number. Rather than retrieving the cart's length, we have to add together all of the item's `itemCount`s. We extract this to a function since `.reduce`would make the JSX difficult to read if we inline it between the paragraph tags.\n\n```jsx\n//Header.jsx\n\nimport ctdLogo from './assets/icons/mono-blue-logo.svg';\nimport shoppingCart from './assets/icons/shoppingCart.svg';\n\nfunction Header({ cart, handleOpenCart }) {\n  function getItemCount() {\n    return cart.reduce((acc, item) => acc + item.itemCount, 0);\n  }\n\n  return (\n    <header>\n      <div className=\"siteBranding\">\n        <img src={ctdLogo} alt=\"Code The Dream Logo\" />\n        <h1>CTD Swag</h1>\n      </div>\n      <div className=\"shoppingCart\">\n        <button type=\"button\" onClick={handleOpenCart}>\n          <img src={shoppingCart} alt=\"\" />\n          <p className=\"cartCount\">{getItemCount()}</p>\n        </button>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n```\n\nWe can then update `Cart` component's JSX to reflect the changes we've made. We replace the item price with an item count and a price sub-total. The cart's total also needs to be recalculated.\n\n```jsx\n//Cart.jsx\nimport placeholder from './assets/placeholder.png';\n\nfunction Cart({ cart, handleCloseCart }) {\n  function getCartPrice() {\n    return cart\n      .reduce((acc, item) => acc + item.price * item.itemCount, 0)\n      .toFixed(2);\n  }\n\n  return (\n    <>\n      <div className=\"cartScreen\"></div>\n      <div className=\"cartListWrapper\">\n        {cart.length === 0 ? (\n          <p>cart is empty</p>\n        ) : (\n          <ul className=\"cartList\">\n            {cart.map((item) => {\n              return (\n                <li className=\"cartListItem\" key={item.id}>\n                  <img src={placeholder} alt=\"\" />\n                  <h2>{item.baseName}</h2>\n                  {item.variantName !== 'Default' ? (\n                    <p>{item.variantName}</p>\n                  ) : null}\n                  <div className=\"cartListItemSubtotal\">\n                    <p>Count: {item.itemCount}</p>\n                    <p>Subtotal: ${(item.price * item.itemCount).toFixed(2)}</p>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n        <h2>Cart Total: ${getCartPrice()}</h2>\n        <button onClick={handleCloseCart}>CloseCart</button>\n      </div>\n    </>\n  );\n}\n\nexport default Cart;\n```\n\nWith the cart ready, we can make its data updatable for users.\n\n![cart open](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/cart.png)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b245"
        },
        {
          "subsectionOrder": 3,
          "title": "Controlled Components",
          "content": "React controlled components are form elements where the component state is controlled by React. The component state is updated through user interactions like typing into input fields or selecting options in drop-downs. This ensures that React has full control over the input values and allows for dynamic updates and validation. Controlled components provide a single source of truth for the data, making it easier to manage and synchronize with other components in the application.\n\nTo get started with controlled components, we will compare an uncontrolled form with a controlled form.\n\n```jsx\nimport React, { useRef } from 'react';\n\nconst UncontrolledForm = () => {\n  const firstNameRef = useRef();\n  const lastNameRef = useRef();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const firstName = firstNameRef.current.value;\n    const lastName = lastNameRef.current.value;\n    console.log(`First Name: ${firstName}, Last Name: ${lastName}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        First Name:\n        <input type=\"text\" ref={firstNameRef} />\n      </label>\n      <label>\n        Last Name:\n        <input type=\"text\" ref={lastNameRef} />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default UncontrolledForm;\n```\n\n```jsx\nimport React, { useState } from 'react';\n\nconst ControlledForm = () => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(`First Name: ${firstName}, Last Name: ${lastName}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        First Name:\n        <input\n          type=\"text\"\n          value={firstName}\n          onChange={(e) => setFirstName(e.target.value)}\n        />\n      </label>\n      <label>\n        Last Name:\n        <input\n          type=\"text\"\n          value={lastName}\n          onChange={(e) => setLastName(e.target.value)}\n        />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default ControlledForm;\n```\n\nMain differences between the two:\n\n|                      | **UncontrolledForm**                                   | **ControlledForm**                                                                |\n| -------------------- | ------------------------------------------------------ | --------------------------------------------------------------------------------- |\n| **state management** | `useRef` to access form inputs each time values needed | `useState` to manage contents of form inputs                                      |\n| **form elements**    | `ref` to keep track of DOM element                     | `val` set to state variables, state update functions that fire when input changes |\n| **form submission**  | selects values out of DOM using refs                   | retrieves values from state variables                                             |\n\nAt first glance, an uncontrolled form is simpler to develop. There's less code to write since we don't need to set input values or implement state update functions to synchronize input values. Overall performance is also better because the browser manages the form - changes to inputs do not trigger re-renders. Using uncontrolled forms may be a good choice for simple forms or when when integrating 3rd party libraries that work with traditional forms.\n\nUsing a controlled component for a form provides some advantages over traditional forms:\n\n- **easier to manage state**: Controlled components make it easier to manage and synchronize form state with other components or global state in the application.\n- **better field validation**: We can implement custom validation like validating a phone number's format or limiting a field to alphabet characters only.\n- **dynamic updates**: React state updates trigger re-renders that reflect real-time changes in the input fields.\n- **increased testability**: With a controlled form, it's easier to test form interactions and state changes by directly manipulating the state in test scenarios.\n\nReact developers tend to favor controlled forms for these reasons. Even if it is more effort to wire up the input to a state variable, the benefits are worth it.\n\n#### Controlled Components Update Cycle\n\nWith the advantages of each discussed, we need to look closer at a controlled component's update cycle. The following code is a form written as a controlled component and the diagram that comes after it illustrates the communication cycle.\n\n```jsx\n//example controlled component\nimport { useEffect, useState } from 'react';\n\nfunction ControlledComponent({ formState, setFormState }) {\n  const [input1, setInput1] = useState('');\n  const [input2, setInput2] = useState('');\n  useEffect(() => {\n    setInput1(formState.input1);\n    setInput2(formState.input2);\n  }, [formData]);\n  function handleSubmit(event) {\n    event.preventDefault();\n    setFormState({ input1, input2 });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Input 1\n        <input\n          type=\"text\"\n          value={input1}\n          onChange={(e) => setInput1(e.target.value)}\n        />\n      </label>\n      <label>\n        Input 2\n        <input\n          type=\"text\"\n          value={input2}\n          onChange={(e) => setInput2(e.target.value)}\n        />\n      </label>\n      <button>Submit</button>\n    </form>\n  );\n}\n```\n\n```mermaid\n---\ntitle: Flow of State in ControlledComponent\n---\nflowchart TD\n    App -->|initial form state|Controlled[Controlled Component]\n    Controlled -->|useEffect to set initial state|Local1[Local State - Input1] & Local2[Local State - Input2]\n    Controlled -->|\"submitted changes\"|App\n    Local1 -->|input1|Input1\n    Local2 -->|input2|Input2\n    Input1 -->|\"value update\"|Local1\n    Input2 -->|\"value update\"|Local2\n```\n\nTo keep a field synchronized in a controlled component, it must have a `value` props that takes a state variable and an `onChange` props with a handler function to update the local state. This update triggers a re-render which then causes the interface to show the new value. All of this happens almost instantaneously so you are left with an input that, for the user, behaves like a normal input but now we have continuous access to the field's value.\n\n![input syncing live on page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/input-1.gif)\n\n#### Putting Controlled Components into Action\n\nWe want our users to be able to modify the count of a particular cart item so we will use elements that accept user input. These include elements such as `input`, `textarea`, `radio-buttons`, etc. It's also considered a best practice to use a form wherever we accept user inputs. We will need to prevent form submission and manage form data so this is a perfect use case for a controlled component.\n\nThe `App` component manages our application's state, including the cart, so it's considered our \"single source of truth\". While a user is updating the form, we want to avoid updating this source of truth with every change. This makes it difficult to cancel/undo changes and has negative performance implications. Recall that every time state is changed, React re-renders the component managing that state and all of its children. Done too high up the component tree, this can lead to large UI re-renders.\n\nTo keep our app smooth and responsive, we want to manage state as close to the element as possible. In our case, we want to contain re-renders to the `Cart` component. We make a working copy of the cart's data by duplicating the `App`'s state variable `cart` into a `Cart` component's state variable, `workingCart`. `workingCart` manages the user's inputs while they make changes. Only after they confirm those changes do we use `workingCart` to update `cart`.\n\n```mermaid\nsequenceDiagram\n    App->>+Cart: pass `cart` & `setCart` props\n    Cart->>+useState: set `workingCart` initialState to `cart`\n    participant form as form and inputs\n    loop Every `onChange`\n        useState->>+form: `workingCart` manages form value\n        form->>+useState: `setWorkingCart` updates local state\n    end\n        form->>+Cart: user confirms update with `handleConfirm`\n    Cart->>+App: `handleConfirm` calls `setCart` with state values\n    Note over App,form: **or if the user cancels**\n    form->>+Cart: user cancels with `handleCancel`\n    Cart->>+useState:  `handleCancel` calls `setWorkingCart` to set `workingCart` back to `cart`\n```\n\n##### App Component Changes\n\nApp needs only one small change: we pass the state update function, `setCart` to the cart component as props.\n\n```jsx\n//extract from App.jsx\n//...component code\n{\n  isCartOpen && (\n    <Cart\n      cart={cart}\n      setCart={setCart} // only change\n      handleCloseCart={handleCloseCart}\n    />\n  );\n}\n//component code...\n```\n\n##### Cart Component Changes\n\nTo get started with `Cart`, we add `setCart` to the function definition and establish 2 state variables: `workingCart` and `isFormDirty` and their associated state update functions. We will use `isFormDirty` as a boolean to disable certain aspects of the interface while a user is making changes to the cart. We do so we can to 1.) prevent users from closing the cart or adding more items the cart while performing edits.\n\n```jsx\n//extract from Cart.jsx\nfunction Cart({ cart, handleCloseCart, setCart }) {\n  const [workingCart, setWorkingCart] = useState(cart);\n  const [isFormDirty, setIsFormDirty] = useState(false);\n  //component code...\n```\n\nWe next;\n\n- replace all references to `cart` in the return statement with `workingCart`\n- wrap the unordered list with a form and convert the paragraph containing `itemCount` into an `input` that accepts numbers.\n\n```jsx\nfunction Cart({ cart, handleCloseCart, setCart }) {\n  const [workingCart, setWorkingCart] = useState(cart);\n  const [isFormDirty, setIsFormDirty] = useState(false);\n  function getWorkingCartPrice() {\n    return workingCart\n      .reduce((acc, item) => acc + item.price * item.itemCount, 0)\n      .toFixed(2);\n  }\n\n  function handleUpdateField() {}\n  function handleCancel() {}\n\n  return (\n    <>\n      <div className=\"cartScreen\"></div>\n      <div className=\"cartListWrapper\">\n        {workingCart.length === 0 ? (\n          <p>cart is empty</p>\n        ) : (\n          <form>\n            <ul className=\"cartList\">\n              {workingCart.map((item) => {\n                return (\n                  <li className=\"cartListItem\" key={item.id}>\n                    <img src={placeholder} alt=\"\" />\n                    <h2>{item.baseName}</h2>\n                    {item.variantName !== 'Default' ? (\n                      <p>{item.variantName}</p>\n                    ) : null}\n                    <div className=\"cartListItemSubtotal\">\n                      <label>\n                        Count:\n                        <input\n                          type=\"number\"\n                          value={item.itemCount}\n                          onChange={(event) =>\n                            handleUpdateField({ event, id: item.id })\n                          }\n                        />\n                      </label>\n                      <p>\n                        Subtotal: $\n                        {(item.price * item.itemCount).toFixed(2) || 0}\n                      </p>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </form>\n        )}\n        <h2>Cart Total: ${getWorkingCartPrice() || 0}</h2>\n        <button onClick={handleCloseCart}>CloseCart</button>\n      </div>\n    </>\n  );\n}\n\nexport default Cart;\n```\n\nWith these changes, we are left with an cart that displays the item count in an input and a nifty screen is cast across the shop so none of the products are clickable.\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/open-cart-disabled-bg.gif)\n\nWe next add in the confirm and cancel buttons for the working form. We don't want them showing until the user makes a change so we conditionally render them based in `isCartDirty`\n\n```jsx\n//extract from Cart.jsx\n\n{\n  isFormDirty && (\n    <div>\n      <button onClick={handleConfirm}>Confirm Update</button>\n      <button onClick={handleCancel}>Cancel Update</button>\n    </div>\n  );\n}\n```\n\nWe now need to finish the handler functions so that the user can confirm or cancel their changes. `handleUpdateField` combines several tasks:\n\n- prevent page refresh\n- prevent inadvertent re-renders by calling `setIsFormDirty` only if the value changes\n- find the target item to change and it's index - we are going to replace the cart item with a new object so need both values.\n- validate the updated field value\n  - return out of the handler before any changes are made. This disposes the change.\n  - return out of the handler if user tries to delete a number\n    - note - the update cycle happens so fast, it doesn't even look like the number is deleted!\n- create a replacement object for the target item\n- call `setWorkingCart` making sure to keep the array order for the cart remains intact\n  - slice beginning of working cart up to the `targetIndex`\n  - insert new item\n  - slice 1 after `targetIndex` to the end of working cart\n\n```jsx\n// extract from Cart.jsx\n\nfunction handleUpdateField({ event, id }) {\n  event.preventDefault();\n  // prevent re-render if already dirty\n  if (!isFormDirty) {\n    setIsFormDirty(true);\n  }\n  const targetProduct = cart.find((item) => item.id === id);\n  const targetIndex = cart.findIndex((item) => item.id === id);\n  if (!targetProduct) {\n    console.error('cart error: item not found');\n    return;\n  }\n  //reject negative values or if user deletes value\n  if (event.target.value < 0 || event.target.value === '') {\n    return;\n  }\n  // create new object instead of updating old\n  const updatedProduct = {\n    ...targetProduct,\n    itemCount: parseInt(event.target.value, 10),\n  };\n  //avoid re-ordering array when updating cart item\n  setWorkingCart([\n    ...workingCart.slice(0, targetIndex),\n    updatedProduct,\n    ...workingCart.slice(targetIndex + 1),\n  ]);\n}\n```\n\n`handleCancel` is much simpler than its counterpart. With `handleCancel`, we call `setWorkingCart` with the `cart` to reset `workingCart` to the source of truth. `setIsFormDirty` then sets `isFormDirty` to false which re-enables a user's ability to close out the cart.\n\n```jsx\n//extract from Cart.jsx\n\nfunction handleCancel(e) {\n  e.preventDefault();\n  setIsFormDirty(false);\n  setWorkingCart([...cart]);\n}\n```\n\nThe final helper we need to create handles the user's change confirmation. `handleConfirm` prevents the form from refreshing, calls `setCart` with the `workingCart` value. We also add in a helper function `removeEmptyItems` that removes any item that has a count of 0. It's okay to have an item in the cart with a value of 0 while the user is still editing but it should be removed once they are okay with their edits.\n\nCTD Swag is coming along! A user can brows items in the list, add items to their cart, and they can modify item counts in the cart. With our work, the `App` and `Cart` components continue to grow in size.\n\n![adding product variants to cart](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-05/add-products-mod-cart.gif)\n\nWe still have a ways to go before this app is complete though. We still need to allow users to chose item variants, shirt sizes, a checkout, and an order history. Before CTD Swag become challenging to continue to develop, we will take some time next week to refactor our code into further sub-components and some utility functions. We will also talk about organizing a React project so that it continues to be easy to manage as the codebase grows.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b246"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b24c",
      "lessonNumber": 6,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 6",
        "objective": "## Weekly Assignment Instructions\n\n1. assignment URL #1 - code updates to refactor project\n2. assignment URL #2 - diagnose 3-4 failed tests, stretch goal: write a test for a component\n\n#### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- be organized by feature and shared components\n- use the same label and input on new todo form and edit todo\n- allow the user to edit their todo's title",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Re-organize Project",
            "description": "*While running the Vite development server, these changes will throw errors about non-existent files until all of the import statements are corrected.*\n\n![error fail to load file](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-06/does-file-exist.png)\n\n- Create two new directories in `src`: `features` and `shared`\n- Inside of `src/features`, create a new directory `TodoList`\n- Move `TodoForm.jsx` into `src/features`\n  - Update the import statement in `App.jsx`\n- Move `TodoList.jsx` and `TodoListItem.jsx` into `src/features/TodoList`\n  - Update the import statement in `App.jsx`\n- Troubleshoot any remaining import errors before proceeding.\n- Add all changes to the stage and then commit to the current working branch.\n\nCommitting periodically allows us to set up a safe recovery point that we can get back to without undoing all changes to the working branch.\n\n#### Refactor Input and Label into a Re-usable Component\n\nYou will be refactoring out the label and the input from the `TodoForm` so that we can re-use it to allow users to edit existing todos.\n\n- Inside of `src/shared` create a new file, `TextInputWithLabel.jsx`\n- Create a component `TextInputWithLabel`\n  - Add a label and an input that are wrapped in a React fragment to the return statement. Their props don't matter for now.\n  - Add a default export to the bottom of the file.\n\n##### Determining Props\n\nWe next have to determine which props we have to pass into the new component. In the TodoForm label and input, you'll see:\n\nfor the label:\n\n- `htmlFor`\n\nfor the input:\n\n- `type`\n- `id`\n- `ref`\n- `onChange`\n\nWe can reduce this list of props by combining `htmlFor` and `id` since they used together to associate a label with its input. We will call the new props `elementId`. We also do not need to pass in `type` since the component will only be for text inputs. This leaves us with `elementId`, `ref`, `onChange`. We will also want to dynamically update our label's text (call it `labelText`) and include the todo's title(call it `value`). With this list of five props identified, we can update the `TextInputWithLabel` component.\n\n- Destructure the props `elementId`, `label`, `onChange`, `ref`, and `value` from the props argument in `TextInputWithLabel`'s function definition.\n- Assign the destructured props to the matching label props and input props. You will end up with a component that looks like:\n\n```jsx\n{/*extract from TextInputWithLabel.jsx*/}\nfunction TextInputWithLabel({\n  elementId,\n  label,\n  onChange,\n  ref,\n  value,\n}) {\n  return (\n    <>\n      <label htmlFor={elementId}>{label}</label>\n      <input\n        type=\"text\"\n        id={elementId}\n        ref={ref}\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nexport default TextInputWithLabel\n```\n\n##### Refactor TodoForm to use TextInputWithLabel\n\n- Over in `TodoForm.jsx`, import `TextInputWithLabel`.\n- Above the existing label, add an instance of that component.\n- Move the `ref`, `value`, and `onChange` props from the input to `TextInputWithLabel`\n- Add `elementId` props and set it to the same value as the input's `id`.\n- Add a `labelText` props and set it to the string \"Todo\"\n- Delete the existing label and input elements from the form.\n\nThe form should behave the same as it did previously but you can see that there's a new component in the component tree:\n\n![TextInputWithLabel in react dev tools](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-06/text-input-with-label-dev-tools.png)\n\n#### Allow Users to Edit Existing Todos\n\n##### Toggle Between Todo Display and Edit\n\nIn the `TodoListItem` component:\n\n- Add a state variable `isEditing` and its associated state update function. Use an `initialValue` of `false`;\n- Import `TextInputWithLabel` component.\n- In the return statement, create a ternary statement that evaluates `isEditing`\n  - If true, display an instance of `TextInputWithLabel` with its props `value` set to `todo.title`. We will update all props later.\n  - If false, display the existing form and its contents. The form will contain the checkbox input and the todo title.\n- Surround the `{todo.title}` with a span element.\n- Add an `onClick` handler to the `span` that toggles the `isEditing` state value to `true`.\n\nYour list item should resemble:\n\n```jsx\n{/*extract from TodoListItem.jsx*/}\n{/*...code*/}\n<li>\n    <form>\n        {isEditing ? (\n            <TextInputWithLabel value={todo.title}/>\n        ) : (\n            <>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        id={`checkbox${todo.id}`}\n                        checked={todo.isCompleted}\n                        onChange={() => onCompleteTodo(todo.id)}\n                    />\n                </label>\n                <span onClick={() => setIsEditing(true)}>{todo.title}</span>\n            </>\n        )}\n    </form>\n</li>\n{/*code continues...*/}\n```\n\nAt this point, when you click on the todo in the list, it will toggle between being displayed as text and showing in a form input:\n\n![editing a todo](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-06/edit-todo.gif)\n\n- Create a new state variable, `workingTitle` and its associated state update function. Set the `initialValue` to `todo.title`\n- Create a `handleCancel` event helper that:\n  - resets the `workingTitle` to `todo.title`\n  - sets `isEditing` state value to `false`\n  - there is no need to include an argument\n- Add a button below the `TextInputWithLabel` component:\n  - Set its type to \"button\" to prevent the default behavior of submitting a form.\n  - Attach `handleCancel` to an `onClick` props\n  - Add the text \"Cancel\" in the button.\n\n##### Create Local State and Controlled Form\n\n- Create a `handleEdit` event helper that:\n  - takes an `event` argument\n  - uses the `event.target.value` to update the `workingTitle` state value\n- Update `TextInputWithLabel`\n  - `value` should now use `workingTitle`\n  - add an `onChange` props to `TextInputWithLabel` that takes `handleEdit`\n\nYou should now be able to make changes to the todo in the input. We cannot save quite yet though!\n\n![including a cancel button on edit-able todo](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-06/edit-todo-cancel-button.gif)\n\n##### Update Todo State from Local State\n\n- In the `App` component, create an `updateTodo` handler that:\n  - takes an `editedTodo` argument.\n  - maps through the todos, comparing each `todo.id` with the updated todo's id\n    - if it matches - return a new object that destructures the `editedTodo`\n    - if not a match - return the current todo.\n    - saves the array returned by `map` to `updatedTodos`\n  - updates the `todoList` state value with `updatedTodos`.\n  - Hint: this function closely resembles the existing `completeTodo` helper function.\n- Pass `updateTodo` to a new props in `TodoList` instance and name it `onUpdateTodo`.\n- In `TodoList`, destructure that helper out of the component's props then pass it to `TodoListItem` in the same manner.\n- In `TodoListItem`:\n  - destructure `onUpdateTodo` out of props.\n  - Create a helper function, `handleUpdate` that\n    - takes event object\n    - if `isEditing` is false, return immediately to exit the function\n    - calls `event.preventDefault()`\n    - calls `onUpdateTodo` and pass in an object that destructures `todo` and sets the `title` equal to `workingTitle`.\n    - sets `isEditing` state value to false.\n- Add another button below the \"Cancel\" button:\n  - Give it the text \"Update\"\n  - Set its type to \"button\"\n  - add a click handler that takes `handleUpdate`\n- Add an `onSubmit` handler to the form element and pass it `handleUpdate`\n\n![adding and completing multiple todos](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-06/add-todos.gif)\n\n#### Closing Notes\n\nAt this point, we've created a solid [MVP](https://www.geeksforgeeks.org/minimum-viable-product-mvp/) or \"minimum viable product\". Next week, we are going to work with Airtable to synchronize the todo list remotely so a user can save todos.\n\nAlso, don't forget that this week contains 2 coding assignments. Continue on down below to work with testing!\n\n### Assignment #2 - Diagnose Failed Tests\n\nFor the second assignment, you'll fork a repo containing several failing tests. Your task will be to update the code so that the tests pass. The repo can be found here: [Code-the-Dream-School/multicalc-tests: RTL and Vitest testing for Intro to React v3](https://github.com/Code-the-Dream-School/multicalc-tests). The instructions to install the repo and run the tests can be found in the repo's readme file.\n\n#### Submitting the Assignment\n\n*Make sure that both the PR for your todo app and the testing assignment before submitting.*\n\n1. Work through the tests, fixing the code so that the tests fail. *Don’t make any changes to the test files!*\n2. Once all your tests pass, publish your working branch to GitHub.\n3. Open a PR on your own cloned repo, not CTD's.\n4. Include the PR link for the tests as the second URL on the assignment submission form.\n\n#### Stretch Goal for Testing (optional)\n\n- Create a new test file for Form.\n- Assert that the button is disabled when the operand contains no value. (hint: make sure you use `userEvent` from @testing-library/user-event to empty the field since it has a default value)",
            "codeExample": "```jsx\n{/*extract from TextInputWithLabel.jsx*/}\nfunction TextInputWithLabel({\n  elementId,\n  label,\n  onChange,\n  ref,\n  value,\n}) {\n  return (\n    <>\n      <label htmlFor={elementId}>{label}</label>\n      <input\n        type=\"text\"\n        id={elementId}\n        ref={ref}\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nexport default TextInputWithLabel\n```\n\n```jsx\n{/*extract from TodoListItem.jsx*/}\n{/*...code*/}\n<li>\n    <form>\n        {isEditing ? (\n            <TextInputWithLabel value={todo.title}/>\n        ) : (\n            <>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        id={`checkbox${todo.id}`}\n                        checked={todo.isCompleted}\n                        onChange={() => onCompleteTodo(todo.id)}\n                    />\n                </label>\n                <span onClick={() => setIsEditing(true)}>{todo.title}</span>\n            </>\n        )}\n    </form>\n</li>\n{/*code continues...*/}\n```",
            "_id": "68d6a34988b86b203f95b252"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b24d"
        },
        {
          "subsectionOrder": 2,
          "title": "Reusable Components",
          "content": "Components are one of the fundamental building blocks of any React application. One of their main strengths is reusability. By writing components once and instantiating them as needed, we can streamline development and improve code maintainability. Certain elements in a UI tend to repeat themselves. These repeated elements might look same but contain different content. Conversely, they may have slightly different appearances but are structurally similar. These include:\n\n- article excerpts on a blog's home page\n- product cards\n- list items\n- day boxes in a calendar\n\nWe have already seen a few examples of repeated elements in CTD Swag. The blurred out product cards and the shopping cart items are both elements that repeat themselves. In fact, we've already had some experience with the card components. The shopping cart items are a prime example of an element that can be turned into a re-usable component. Inside of the `Cart` component, we map over the `workingCart` to create each list item. Rather than housing the code in `Cart` component, it can be extracted out to a `CartItem` component. Doing so saves space in the existing component file plus make it easier to read.\n\n![displaying cart list](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/cart.png)\n\nAnother category of reusable components are elements that are used throughout an interface that allow user to navigate or interact with the page. They can also be visual details that unify the look and feel of an interface. Such components could include:\n\n- buttons\n- tooltips\n- dialog boxes\n- navigation menus\n- forms\n\nAny visual element is a candidate to become a reusable component as long as 2 criteria are met. 1.) They accept the same props and 2.) they have the same underlying structure. If we also take advantage of default props values and children props, we can further increase opportunities for creating re-usable components. Lets step away from CTD Swag to examine a `Dialog` component to see how we can make it into a flexible, reusable component.\n\nDialog boxes convey messages to users based on their actions, such as success messages, error notifications, or warnings, or general information the user may need. A typical dialog box consists of its container, a heading, message, and one or more buttons to take an action on the message.\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/info-dialog-white-header.png)\n\nBelow is the equivalent code, excluding styles to neaten up the dialog's appearance.\n\n```jsx\n//Dialog.jsx\n\nimport info from './assets/info.svg';\n\nexport function Dialog() {\n  return (\n    <div className=\"dialog\">\n      <div className=\"heading\">\n        <p>INFO dialog</p>\n        <div className=\"icon\">\n          <img src={info} />\n        </div>\n      </div>\n      <div className=\"content\">\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Possimus\n        exercitationem quos quam, nihil cum voluptates tempore enim! Vel,\n        provident adipisci quos, similique iusto repellendus culpa obcaecati\n        libero, nostrum reiciendis quidem.\n      </div>\n      <div className=\"controls\">\n        <button>Okay</button>\n      </div>\n    </div>\n  );\n}\n```\n\nWe can categorize the information that we provide into one of several categories: **info**, **success**, **error**, or **warning**. Each one of these are commonly associated with colors and icons to help convey the message's tone to the user. Adding these to our dialog could help our user better understand the information that we are trying to convey.\n\n- success: green, ✔️ (check mark)\n- error: red, ❌ (cross mark - not to be confused with x or X)\n- warning: yellow, ⚠️ (warning)\n- info: no color or blue, ℹ️ (information)\n\n> [!accessibility note]\n> Do not rely on color alone! [Around 300 million people](https://my.clevelandclinic.org/health/diseases/11604-color-blindness) around the world have some form of color blindness. This is why it's important to also include an icon when using any sort of color coding. More information about common color accessibility issues can be found on [deque's website](https://www.deque.com/blog/3-common-color-accessibility-issues-one-can-easily-avoid/). They are a maker of a popular suite of accessibility tools.\n\nThe first step in making a `Dialog` component extensible is to add a `kind` prop to the `Dialog`'s definition. We'll set it to default value of \"info\" since that's the most generic category and can act as the default fallback. We can then use that prop to configure the rest of the component.\n\n- import images for each category and create an image lookup object\n- create a background-color lookup object\n- add in a background style for the dialog's heading\n- update the image's src using the props and image lookup object\n\nOur updated `Dialog` component code now looks like:\n\n```jsx\n//Dialog.jsx\nimport error from './assets/error.svg';\nimport info from './assets/info.svg';\nimport success from './assets/success.svg';\nimport warning from './assets/warning.svg';\n\nconst images = {\n  error,\n  info,\n  success,\n  warning,\n};\n\nconst colors = {\n  error: '#f6bed7',\n  info: '#bec7f6',\n  success: '#bef6c5',\n  warning: '#f6eebc',\n};\n\nexport function Dialog({ kind = 'info' }) {\n  return (\n    <div className=\"dialog\">\n      <div className=\"heading\" style={{ backgroundColor: colors[kind] }}>\n        <p>{kind.toUpperCase()} dialog</p>\n        <div className=\"icon\">\n          <img src={images[kind]} />\n        </div>\n      </div>\n      <div className=\"content\">\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Possimus\n        exercitationem quos quam, nihil cum voluptates tempore enim! Vel,\n        provident adipisci quos, similique iusto repellendus culpa obcaecati\n        libero, nostrum reiciendis quidem.\n      </div>\n      <div className=\"controls\">\n        <button>Okay</button>\n        <button>Dismiss</button>\n      </div>\n    </div>\n  );\n}\n```\n\nWe then go back to the parent component and pass a `kind` props into the instance of `Dialog` component. Finally, add some buttons that will let us toggle between the dialogs.\n\n```jsx\n//App.jsx\nimport { useState } from 'react';\nimport { Dialog } from './Dialog';\n\nconst dialogKind = {\n  error: 'error',\n  info: 'info',\n  success: 'success',\n  warning: 'warning',\n};\n\nfunction App() {\n  const [kind, setKind] = useState(dialogKind.info);\n  return (\n    <>\n      <main>\n        <Dialog kind={kind} />\n        <div className=\"buttonWrapper\">\n          <button onClick={() => setKind(dialogKind.error)}>Error</button>\n          <button onClick={() => setKind(dialogKind.info)}>Info</button>\n          <button onClick={() => setKind(dialogKind.success)}>Success</button>\n          <button onClick={() => setKind(dialogKind.warning)}>Warning</button>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n```\n\n![toggle through dialog types](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/toggle-dialogs.gif)\n\nThe dialog has a default `kind` when first rendered and when changed, it displays a different color and a helpful icon in its heading. Suppose that we have messages that come from an API response that we wanted to include them instead of the static paragraph we currently had. We have two options with this approach - we can add a `message` props or we can place the message into the instance using `children` props. Using the `children` approach has the added advantage that we can further format the message or include other jsx.\n\nTo do this, we'll add a `children` props to `Dialog` component's definition and replace the paragraph of [lorem ipsum](https://en.wikipedia.org/wiki/Lorem_ipsum) text with `{children}`. This acts as an outlet for any jsx nested in between the component instance's tags.\n\n```jsx\n//excerpts from Dialog.jsx\nexport function Dialog({ children, kind = 'info' }) {export function Dialog({ children, kind = 'info' }) {\n//component code...\n return (\n     <div className=\"dialog\">\n       <div className=\"heading\" style={{ backgroundColor: colors[kind] }}>\n         <p>{kind.toUpperCase()} dialog</p>\n         <div className=\"icon\">\n           <img src={images[kind]} />\n         </div>\n       </div>\n       <div className=\"content\">{children}</div> {/*displays content placed between Dialog tags*/}\n       <div className=\"controls\">\n         <button>Okay</button>\n         <button>Dismiss</button>\n       </div>\n     </div>\n );\n}\n```\n\n```jsx\n//excerpts from App.jsx\nfunction App() {\n  const [kind, setKind] = useState(dialogKind.info);\n\n  return (\n    <>\n      <main>\n        <Dialog kind={kind}>\n          {/*using curly brackets as text inside of jsx will confuse the compiler*/}\n          {/*&#123; and &#125 are html character codes for { and }, respectively*/}\n          <h2>Flexibility of children props</h2>\n          <p>\n            Anything that is placed here shows up in the document structure\n            where the &#123;children&#125; props was placed inside the\n            `.content` div of the Dialog component.\n          </p>\n        </Dialog>\n        <div className=\"buttonWrapper\">\n          <button onClick={() => setKind(dialogKind.error)}>Error</button>\n          <button onClick={() => setKind(dialogKind.info)}>Info</button>\n          <button onClick={() => setKind(dialogKind.success)}>Success</button>\n          <button onClick={() => setKind(dialogKind.warning)}>Warning</button>\n        </div>\n      </main>\n    </>\n  );\n}\n```\n\n![info dialog with blue heading](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/info-dialog.png)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b24e"
        },
        {
          "subsectionOrder": 3,
          "title": "Organizing Files in a React Project",
          "content": "We inevitably add more components and refactor out non-React code into separate files as a project grows. If we maintain a flat file structure as the file count increases, it become challenging to navigate codebase or to see how files relate. In this section, we will discuss some considerations that go into determining the directory structure and organizing files for CTD Swag so we can continue to add functionality.\n\n> [!note]\n> The internet hosts many discussions and even more opinions about how to structure software projects. What we provide is a sensible approach that works well with small to medium React projects. Some larger projects require structures tailored to the problems that they solve and features they implement. Other React projects using frameworks such as Next.js, Astro, Remix must adhere to rules prescribed by the framework since they tend to use specific directories for features such as page routing or asset management.\n\n#### Details to Consider\n\nBefore we start reorganizing our project, we ask the following questions about each file or code passage as we review the project's contents:\n\n- **What feature(s) does it support?** In the context of organizing a React project, a \"feature\" typically refers to a distinct and self-contained functionality or section of the application that serves a specific purpose. If a component supports multiple features, it's considered shared.\n  - CTD Swag currently has 2 features: a list of items for sale and a checkout cart. This list will grow as we add more functionality.\n  - The `ProductCard` is already componentized and is used inside of the list of items for sale. Since it is only meant for use with the cart, we group it with feature code related to `ProductList`.\n  - Another portion of feature-related code is the checkout item - the elements that it uses have not been converted into component but will be as we refactor the project this week. Since it's only is found in a single feature, we'll group it with code related to `Cart`.\n- **Does a component serve mostly as a layout structure or help organize the UI?** For example, is it a heading, footer, a sidebar, or help contain the main content of the app?\n  - CTD Swag already includes a Header component and we will refactor out the footer into its own component this week.\n- **Is it reused or does the same code show up in multiple places?**\n  - Buttons, forms, and other reusable elements we discussed earlier should be considered here. We do not have any at this time but we can be assured that we will develop some so we can create a placeholder for them in the structure.\n- **Does it help us work with a 3rd party library, data retrieval, or storage?**\n  - This is not a question that we are ready to answer for CTD Swag. We don't implement any other libraries but we will eventually need a payment processing system. Processors such as Stripe, PayPal, or ApplePay provide developers with a software development kit (SDK) which include necessary resources to work with their platforms. We also don't implement LocalStorage, IndexedDB, or any APIs yet but will in future lessons. We can make a placeholder for these so we remember where they go.\n- **Is it a helper utility that can function independently from React?**\n  - `getCartPrice` in the Cart component is a function that tallies up the cost of each item in the cart. It doesn't rely on any React code. We could turn it into helper utility since we may use it again during the checkout process we build later. For now, it will remain in place since we can take care of that refactor when we build the checkout feature. The same rationale applies to `getItemCount` in Header.\n\nAnswers for each of these questions help us determine how to group aspects of the codebase. We end up with an anticipated project structure that resembles the following:\n\n```terminal\n.\n├── node_modules/\n├── public/\n│   └── .gitkeep\n├── src/\n│   ├── assets/\n│   ├── fonts/\n│   ├── icons/\n│   ├── catalog.json\n│   └── product images\n├── features/\n│   ├── ProductList/\n│   ├── ProductList.jsx\n│   └── ProductCard.jsx\n│       └── Cart/\n│           ├── Cart.jsx\n│           └── CartItem.jsx (new component)\n├── services/\n│    └── .gitkeep\n├── shared/\n│   └── .gitkeep\n│   └── layout/\n│   ├── Footer.jsx (new component)\n│   └── Header.jsx\n├── .eslint.cjs\n├── .gitignore\n├── .prettierignore\n├── .prettierrc\n├── index.html\n├── package-lock.json\n├── package.json\n├── README.md\n└── vite.config.js\n\n```\n\nThe outline below provides a few more notes on the directories.\n\n- **assets/** - static resources such as fonts and images used for the UI\n  - product images and catalog.json are for placeholder data until we establish an API to manage a live inventory\n- **features/** - components grouped by functionality\n  - if a feature does not need sub-components, its primary component can be placed directly in this folder\n  - when features are refactored into sub-components, a folder of the same name as the feature is added to store all related files\n  - any component used by multiple features gets moved to `shared/`\n- **services/** - non-React functionality extracted from components\n  - **.gitkeep**[^gitkeep] - placeholder file\n- **shared/** - re-usable components that are used in more than one feature\n  - **.gitkeep** - placeholder file\n- **layout/** - components used to help organize and divide the UI into manageable pieces",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b24f"
        },
        {
          "subsectionOrder": 4,
          "title": "Refactoring a Project for Expansion",
          "content": "#### Create Directories and Organize Existing Files\n\nTo start the refactor, we create the new directories and move existing files into their updated location. As each file is moved, it's important to make sure that import statements are updated - both inside the file as well as wherever it is being imported. Running the dev server provides in-browser errors that are handy at letting us know where file imports are incorrect.\n\n![vite fails to resolve import](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/error-hint-fail-import.png)\n\nVS Code is helpful in making some of these updates automatically as we move around files too. Be careful to double-check the imports in the file being moved - VS Code may not recognize non-JavaScript imports. Being able to import images and other non-JavaScript files is a feature of Vite and is not a part of [JavaScript module syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/import-dialog.png)\n\n#### Refactoring Out Components\n\nAfter the files have been moved into place, we need to refactor out the footer and the cart's item card. To determine how to refactor the footer into a component, we first must look at the elements that make up the footer.\n\n```jsx\n//extract from App.jsx\n//component code...\nconst year = useRef(\n  (() => {\n    const now = new Date(Date.now());\n    return now.getFullYear();\n  })(),\n);\n//component code...\n<footer>\n  <p>\n    Made with ❤️ | &copy; {year.current}{' '}\n    <a href=\"https://codethedream.org/\">CTD </a>\n  </p>\n</footer>\n```\n\nThe footer consists of a single html element, `<footer></footer>` that contains a few nested elements and text that uses a `ref`. We copy the footer and `useRef` over to a new file for the `Footer` component. This new file resides in `/src/layouts` since it's a portion of the UI and is named Footer.jsx.\n\n```jsx\n//layout/Footer.jsx\nimport { useRef } from 'react';\n\nexport default function Footer() {\n  const year = useRef(\n    (() => {\n      const now = new Date(Date.now());\n      return now.getFullYear();\n    })(),\n  );\n  return (\n    <footer>\n      <p>\n        Made with ❤️ | &copy; {year.current}{' '}\n        <a href=\"https://codethedream.org/\">CTD </a>\n      </p>\n    </footer>\n  );\n}\n```\n\nAfter saving the file, we need to import the `Footer` into `App` and then replace the html footer element and its contents with a self-terminating `<Footer />` tag. Once complete, everything in the browser page should look the same.\n\n```jsx\n// return statement from App.jsx\n\nreturn (\n  <>\n    <Header cart={cart} handleOpenCart={handleOpenCart} />\n    <main>\n      <ProductList\n        inventory={inventory}\n        handleAddItemToCart={handleAddItemToCart}></ProductList>\n      {isCartOpen && (\n        <Cart cart={cart} setCart={setCart} handleCloseCart={handleCloseCart} />\n      )}\n    </main>\n    <Footer /> {/*this replaces <footer>...</footer> */}\n  </>\n);\n```\n\nOur next task is to extract the cart's product item into `ProductItemCard`. We create a file co-located with Cart.jsx inside the Cart directory and then examine the JSX of cart we need to extract:\n\n```jsx\n//Cart/Cart/jsx\n{/* ...component code */}\n      <div className=\"cartListWrapper\">\n        {workingCart.length === 0 ? (\n          <p>cart is empty</p>\n        ) : (\n          <form>\n            <ul className=\"cartList\">\n              {workingCart.map((item) => {\n               {/**********START HERE*********/}\n                return (\n                  <li className=\"cartListItem\" key={item.id}>\n                    <img src={placeholder} alt=\"\" />\n                    <h2>{item.baseName}</h2>\n                    <div className=\"cartListItemSubtotal\">\n                      <label>\n                        Count:{' '}\n                        <input\n                          type=\"number\"\n                          value={item.itemCount}\n                          onChange={(event) =>\n                            handleUpdateField({ event, id: item.id })\n                          }\n                        />\n                      </label>\n                      <p>\n                        Subtotal: $\n                        {(item.price * item.itemCount).toFixed(2) || '0.00'}\n                      </p>\n                    </div>\n                  </li>\n                );\n             {/**********END HERE************/}\n              })}\n            </ul>\n\n{/* ...component code */}\n```\n\nWe have a lot more code to work with than with the Footer component so we need to take an inventory if the details we need to account for during the conversion. Using a decision tree is an invaluable analytic technique that helps you recall everything that needs to be considered while extracting components. We start with the multi-step decision tree below as we look over each passage in the code. The end of each branch of the following decision tree includes a conclusion we can make about that portion of code.\n\n>[!note]\n>The flowchart below may have a sideways scroll bar, depending on your screen size.\n\n```mermaid\nflowchart TD\n    entry{is an element \\nor contains props?}\n    entry--->both[yes to both]\n    entry--->element[yes to element \\nand \\nno to props]\n    entry--->block[no to element \\nand \\nyes to props]\n    element-->end1([can copy over as-is])\n    both-->external-props{do props use state, \\ncallbacks, variables, functions \\ndefined at top level of \\noriginal component? }\n    external-props-->yes-external[yes]\n    external-props-->no-external[no]\n    yes-external-->end2([account for them based on usage])\n    no-external-->static-props{are props static?}\n    static-props-->end3([can copy as-is])\n    static-props-->no-static[no]\n    no-static-->in-block{are values \\ndefined in block \\nbeing extracted?}\n    in-block-->no-in-block[no]\n    in-block-->yes-in-block[yes]\n    no-in-block-->end4([account for them based on usage])\n    yes-in-block-->end5([can be copied as-is])\n    block-->self-contained{is it a comment \\nor contain no references \\nexternal to the block?}\n    self-contained-->no-self-contained[no]\n    self-contained-->is-self-contained[yes]\n    no-self-contained-->end6([account for values referenced])\n    is-self-contained-->end7([can be copied as-is])\n```\n\nFor those who prefer a text-based approach, the following is a bulleted outline of the diagram above:\n\n- Is it an _element tag_ and does it contain any _props_?\n  - **yes to element, no to props**: we can copy it as-is\n  - **yes to element, yes to props**\n    - does the _props_ reference any _state_ or _callbacks_, _variables_, or _functions_ defined in the top level of the component?\n      - **no**: are props **static**?\n  - **yes**: the element can be copied as-is\n  - **no**: are all the values defined in a block contained in the element being extracted to a new component?\n    - **yes**: the element can be copied with the block as-is\n    - **no**: we need to account for them based on their usage in the application\n    - **yes**: we need to account for them based on their usage in the application\n  - **no to element**: is it a _comment_ or a self-contained block that _does not reference_ anything outside of the JSX being extracted?\n    - **yes**: it can be copied as-is\n    - **no**: we need to account for any props, variables, or functions referenced and how they're being used\n\n> [!note]\n> These questions form a good foundation for planning how to extract a component but there will always be room for improvement. As developers, we solve problems and update our practices based on our experiences. Your decision making processes will evolve as you continue to work with React and gain better a understanding of it and its companion technologies.\n\nWe go through the decision tree as we examine the JSX to come up with the following details for consideration:\n\n1. **`workingCart.map()`**: This is outside of the component we plan to extract but but creates `item` which `CartItem` uses. We will need to pass `item` into `CartItem` as props.\n2. **`<li>` opening tag**: `className` is a static value. `key` is a special props that allows React to track component instances and is not added to `CartItem`'s function definition. We will end up adding it to the `CartItem` instance.\n3. **list item's contents**\n4. **`<img>`**: uses an image imported in by the `Cart` component. We will move the import with the refactor since it's not used anywhere else.\n5. **`<h2>`**: references `item` which will be in `CartItem`'s props so can be copied as-is.\n6. **`<div>`**: `className` is a static value but contains sub-elements to examine\n7. **`<input>`**: references `item` and uses a handler function for field updates. We will need to pass the handler as props into `CartItem`\n8. **`<p>`**: references `item` which we already know how to handle so can be copied as-is.\n\nFor ease of reference, the image below highlights the considerations listed above:\n\n![highlighting workingCart map JSX](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/working-cart-map.png)\n\nWith these considerations identified, we can finally plan our refactor to extract `CartItem`. We first create the new file inside `src/features/cart` and define the `CartItem` component. We include `{item}` in the arguments so that we have it to work with. We next copy over (don't remove it yet) the entire list item into `CartItem's` return statement. We also copy over the image import. Remove the `key` props from the list item in the new component since it's not needed any more. We add `onHandleItemUpdate` to `CartItem`'s arguments so that we can pass the handler function as props.\n\nWe have a completed `CartItem` component ready for use. As you can see, most of the code extracted remains the same. Only the `key` is removed and the input's handler function name changes.\n\n```jsx\n// src/features/Cart/CartItem.jsx\nimport placeholder from '../../assets/placeholder.png';\n\nfunction CartItem({ item, onHandleItemUpdate }) {\n  return (\n    <li className=\"cartListItem\">\n      {/*key removed since no longer used here*/}\n      <img src={placeholder} alt=\"\" />\n      <h2>{item.baseName}</h2>\n      <div className=\"cartListItemSubtotal\">\n        <label>\n          Count:{' '}\n          <input\n            type=\"number\"\n            value={item.itemCount}\n            onChange={(event) => onHandleItemUpdate({ event, id: item.id })} //handler name updated\n          />\n        </label>\n        <p>Subtotal: ${(item.price * item.itemCount).toFixed(2) || '0.00'}</p>\n      </div>\n    </li>\n  );\n}\n\nexport default CartItem;\n```\n\nOver in the `Cart` component we import `CartItem` then replace the list item with and instance of `CartItem`. We next pass in `item` to the `item` props, `item.id` to the key props, and `handleUpdateField` to `onHandleItemUpdate`.\n\n```jsx\n//extract from Cart.jsx\n\n{\n  workingCart.map((item) => {\n    return (\n      <CartItem\n        key={item.id}\n        item={item}\n        onHandleItemUpdate={handleUpdateField}\n      />\n    );\n  });\n}\n```\n\nAll of these changes should result in an interface that continues to look and behave just the same. However, our code is now organized better and it's easer to read the code in `App` and `Cart` components.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b250"
        },
        {
          "subsectionOrder": 5,
          "title": "Testing React Components",
          "content": "#### Purpose of Testing\n\nTesting plays a crucial role in detecting bugs and errors during the development process. Tests validate the behavior of a codebase under various conditions, ensuring consistent functionality. They provide a safety net that can catch unintended side effects that may arise while making updates. A well-designed test suite ensures that existing functionality continues to work correctly after adding new features. Writing tests alongside code encourages modularity and separation of concerns within the application architecture. If it's easy to test, it's easy to maintain. Testing also serves as a communication tool within teams, documenting component specifications and expected behaviors. Writing tests initially requires additional time from developers but it ultimately improves developer efficiency.\n\nTests come in three basic categories: unit, integration, and end to end (E2E). Each type serves a specific purpose and comes with advantages and disadvantages.\n\n#### Types of Testing\n\n![venn diagram of test types - unit, integration, end-to-end](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/tests-venn_diagram.png)\n\n##### Unit\n\nUnit tests verify the behavior of a component or portion of code in isolation to ensure it performs as expected. Typically, unit tests are small, quick to run, and automated but are used judiciously. Not every component or code passage needs to be tested. Unit tests are generally not useful for presentational components or those that don't manage state. Also avoid testing implementation details:\n\n- **private functions or any purely internal state** - Focus on testing the external behavior that is visible to users or other components.\n- **UI layout and styling**: Other testing methods are more appropriate for styles, layout, or positioning details.\n- **third-party libraries**: Trust that these libraries have their own tests and focus on how your code interacts with them.\n- **exception handling**: Avoid testing error handling logic. Test how your application responds to errors rather than trying to simulate different error scenarios.\n\n###### Common Unit Testing Scenarios\n\n- **Rendering Test:** Ensure that the component renders without crashing and contains the expected UI elements.\n- **Props Test:** Verify that the component correctly handles different prop values, including default props, required props, and prop changes.\n- **Conditional Rendering Test:** Test that the component correctly renders different UI elements based on conditional logic or state values.\n- **Event Handling Test:** Validate that event listeners trigger the expected actions or state changes when corresponding events occur.\n- **Error Boundary Test:** Test error boundary components to ensure they catch and handle errors gracefully without crashing the entire application.\n- **Accessibility Test:** Validate that components meet accessibility requirements by testing for proper keyboard navigation, ARIA attributes, and screen reader compatibility.\n\nBecause of their focused nature, unit tests will not catch problems arising from how components work together. They do not examine how portions of code or components interact. For this, integration testing is more appropriate.\n\n##### Integration\n\nIntegration tests validate interactions between components or modules of an application. They help developers identify issues that can arise from interactions or communication gaps. As a result, they focus on validating integration points and communication between components. When testing communication with external resources, we will need to provide simulated data also known as \"mock\" data. Some key focus points for integration testing:\n\n- **integration points**: Tests interactions between modules, services, databases, APIs, or external systems to verify data flow and communication.\n- **dependencies**: Validates how components interact with each other and handle data exchanges to ensure seamless integration.\n- **data integrity**: Checks the consistency and correctness of data as it moves between different components during integration.\n- **configuration testing**: Verifies that configurations, settings, and dependencies are correctly set up and integrated within the application.\n- **interface testing**: Ensures that interfaces between components are functioning correctly and passing data accurately.\n\n###### Common Integration Test Case Scenarios\n\n- **Component Interaction**: Integration tests in React can validate interactions between multiple components, ensuring they communicate and render correctly.\n- **API Integration**: Testing how React components interact with APIs and handling responses to verify data fetching and updating functionalities.\n- **State Management**: Verifying state changes and updates across components when actions or events trigger state modifications.\n\n##### End to End\n\nEnd-to-end (E2E) testing in React involves testing the application's flow from start to finish. It verifies if all components work together correctly as a complete system. E2E tests simulate real user scenarios, interacting with the UI similar to how an actual user would. Tools like Cypress or Selenium can be used for E2E testing in React applications.\n\n###### Common Integration Test Case Scenarios\n\n- **User authentication**: Verify if users can sign up, log in, and perform actions based on their authentication status.\n- **Form submissions**: Validate form inputs, submission functionality, and corresponding actions.\n- **API calls**: Ensure data fetching and updating through API requests work as expected.\n- **User interactions**: Validate interactions like clicking buttons, scrolling, or dragging components.\n- **State management**: Verify if state changes within components or across the application are handled correctly.\n- **Responsiveness**: Ensure the application behaves as intended on various devices and screen sizes.\n\nOf all the testing approaches, E2E tends to be the most complex to set up and maintain. The test suite needs to replicate user behavior so often requires a custom browser to emulate user interactions and capture event details from events that fire in the UI. Many if these interactions visually play out while these tests run so take a long time for a suite of tests to complete. Even if it took only 10 seconds to complete a test, it could take 2 and a half minutes to execute a suite of 15 tests. These type of tests also need to be rewritten as features change or a UI element is updated.\n\n#### Unit Tests for React Components\n\nUnit testing is a good place to start when introducing tests. Using Vite, it does not take long to install testing software and get started with unit testing. Integration and E2E tests are just as important but are much more complex to manage. This complexity extends to setting up each of the tests and tend to be highly tailored to the codebase where they are used. Because of time limitations in this course, we will focus only on unit testing.\n\n#### Introduction to Libraries Used\n\nWe will be installing [Vitest](https://vitest.dev/guide/), [React Testing Library (RTL)](https://testing-library.com/docs/react-testing-library/intro). Vitest runs the codebase's tests and provides some handy, non-React specific tools to author tests including [Chai](https://www.chaijs.com/) and a few helper libraries. Vitest is a test runner library that also includes [Chai](https://www.chaijs.com/) assertions built in and assertions that are compatible with Jest's [expect API](https://jestjs.io/docs/expect). RTL provides APIs to work with React Components. It is built on top of the core [DOM Testing Library](https://testing-library.com/) which helps with querying and interacting with DOM nodes in an application.\n\nThere are a few common terms that need to be defined as they relate to our testing software:\n\n**Assertion** is a function that evaluates a condition or behavior in the software application to see if it matches an expected outcome. In some documentation, an assertion can also be referred to as an \"expectation\". Vitest includes three interfaces that allow us to create test cases using different techniques:\n\n- `assert()`: this function accepts an expression to be evaluated and an error message.\n  - `assert` evaluates the expression for truthiness.\n    - example: `assert(1 + 1 === 2, \"this message will not be shown\")`\n    - example: `assert(\"4\" + \"2\" === 6, \"this message will be shown since JS concatenates strings\")`\n  - other assertion functions are accessed from `assert` through dot notation\n    - example: ``assert.typeOf(foo, 'string', '`foo` is not a string');``\n    - we will not be using this approach but it is worthwhile to review a full list of assertions which can be found in the [Chai's assertion documentation](https://www.chaijs.com/api/assert/)\n- `expect()`: this function takes an expression to be evaluated. `expect` is then chained to one or more chain-able assertions that take an outcome as an argument. This approach uses a natural language approach that makes it a popular way to write unit tests.\n  - Eg: `expect(foo, 'test failure message').toEqual('bar');`\n  - Because of its popularity, we will use `expect` most of the time.\n  - assertions are named after the type of assertion that they are making: `toBe` `toBeTruthy`, `toContain`, `toMatch`, `toThrowError`, `toHaveReturned` and so on.\n  - A full list of assertions can be found in [Vitest's documentation](https://vitest.dev/api/expect.html) - There's no need to memorize them but it's good to review all of them. Some have similar sounding names that have some subtle but important differences.\n- `should()`: extends `Object.prototype` to allow assertions to be chained to the expression being examined. There may be use cases where `should` has advantages but it's generally not a good idea to manipulate any global prototypes. This approach also has limited utility for testing the existence of an objects such a database response object.\n\n**Test cases** include one or more assertions a test runner executes to determine if functionality works as intended.\n\n- uses a `test` function that takes in a test name, and a function that contains one or more assertions, and an optional timeout.\n- `it` is an alias of `test` so it can be used interchangeably.\n- each assertion should be testing the same code but with different parameters\n\n**Fixture** is a fixed state or set of data used as the baseline for running tests. It can include pre-defined data, settings, or configurations that ensure consistent test conditions for reproducible and reliable testing.\n\n**Mock** is a simulated object, function, or component that replicates the behavior of real code. Mocks help us isolate the tested unit while examining its behavior or output.\n\n**Test suite** is a collection of related tests. Vitest uses the `describe` function to group test cases together. If test cases are written outside of a test suite, they are implicitly grouped together in a top-level suite. All test cases in a suite share a \"context\" which may include utilities and fixtures that we can define to guarantee consistent tests.\n\n#### Unit and Integration Testing Put into Practice\n\n#### Installation\n\nTo get started, we need to install testing libraries. From the terminal, we issue the command `npm install --save-dev @testing-library/dom @testing-library/react @testing-library/jest-dom @testing-library/user-event eslint-plugin-jest-dom jsdom vitest`. This installs:\n\n- **DOM Testing Library** (@testing-library/dom) - base library which RTL is built on top of\n- **RTL** (@testing-library/react)\n- **jest-dom** (@testing-library/jest-dom) - this package also includes some handy assertions to work with dom elements\n- **user-event**(@testing-library/user-event) - simulates user interactions by dispatching events as if they happened in the browser\n- **ESLint's Jest-DOM plugin** (eslint-plugin-jest-dom) - this plugin provides some linting rules that address common errors while writing tests.\n- **JSDOM** - implements DOM and HTML in JavaScript so our test library can render components since unit tests don't use a web browser.\n- **Vitest**\n\nWe then add a test command to package.json.\n\n```json\n{\n... other config info\n\"scripts\": {\n \"dev\": \"vite\",\n \"build\": \"vite build\",\n \"lint\": \"eslint .\",\n \"preview\": \"vite preview\",\n \"test\": \"vitest\"\n},\nother config info...\n}\n```\n\nWe now have to configure Vitest to work with the libraries and look for a setup file we create in the next step.\n\n1. **environment: 'jsdom'**: Informs Vitest to use JSDOM for any html rendering\n2. **globals: true**: this is a convenience setting so Vitest doesn't need to be imported into test files\n3. **setupFiles**: points Vitest towards a file that customizes the test runner\n\n```javascript\n// vite.config.js\n\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n    globals: true,\n    setupFiles: './test.setup.js',\n  },\n});\n```\n\nNext we create a setup file for the test runner. We use this file to extend the built-in assertions we get from Vitest with those that are provided in RTL(Jest calls them \"matchers\" in their documentation). We also add a `cleanup` function that unmounts components after each test runs. This will save us from having to do so manually in our tests.\n\n```javascript\n//test.setup.js\n\nimport { expect, afterEach } from 'vitest';\nimport { cleanup } from '@testing-library/react';\nimport * as matchers from '@testing-library/jest-dom/matchers';\n\nexpect.extend(matchers);\n\nafterEach(() => {\n  cleanup();\n});\n```\n\nOur next step is to confirm the testing libraries work properly. By convention, we name test files after the files containing the tested module(s) and append \".test\" to the filename. We will start with `App.jsx` first so we create a file `App.test.jsx` in the same location as `App.jsx`. When Vitest is ran, it scans the repository looking for any files that contain `.test` or `.spec` in their filename and will automatically run them.\n\nSome developers prefer creating a new test directory. Having a dedicated directory supports the principle of single responsibility by maintaining a dedicated location for tests. Others prefer co-locating their test files with the tested components or modules. This approach allows a developer to know at a glance whether a component or module is being tested without having to look into a test directory. Either approach is acceptable so long as it is followed consistently.\n\nLet's write our first test!\n\n```javascript\nimport { expect, it } from 'vitest';\n\nit('1 plus 1 equals 2', () => {\n  expect(1 + 1).toBe(2);\n});\n```\n\nRunning `npm test` in the terminal will start up the test runner. Similar to the dev server, Vitest will watch the test files and their dependencies and will re-run the tests every time one of the monitored files is updated. If we update App, the tests are not re-ran yet. This is resolved by importing the App component into the test file. Even if a test does not reference App yet, since it's imported, Vitest will monitor it for changes.\n\nWhile it's running, Vitest will show the results of the test in the terminal window.\n\n![test passed](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/app-test-passed.png)\n\nLet's look at the output for a failing test. In the example below, our original test passes but the second one contains an invalid assertion which causes that test to fail. Each test that passes has a checkmark beside it and failed tests have an x-mark. Failed tests display in the terminal and uses a caret the point to the first assertion that fails. This is handy since a test case can contain more than one assertion.\n\n![test suite highlight failure point](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/test-error-hilight.png)\n\nUsing multiple assertions in a test case keeps the tests compact but it comes with a tradeoff. An assertion is only ran if the previous assertion is valid. At this point, we can't tell the outcome of the final assertion (`.not.toMatch`). This may be acceptable depending on the test but let's refactor this so that all of the assertions are ran. We will also take this opportunity place `App`'s tests into a suite.\n\n```javascript\nimport { describe, expect, it } from 'vitest';\nimport App from './App';\n\ndescribe('App test suite', () => {\n  it('1 plus 1 equals 2', () => {\n    expect(1 + 1).toEqual(2);\n  });\n\n  it('expect up to not equal down', () => {\n    expect('up' !== 'down').toBe(true);\n  });\n\n  it('expect up to equal down', () => {\n    expect('up').toEqual('down');\n  });\n\n  it('expect up to not match regular expression /down/', () => {\n    expect('up').not.toMatch(/down/);\n  });\n});\n```\n\nNow we know the outcome of the last assertion even though the previous one still fails:\n\n![cli test suite passes](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/test-suite-pass.png)\n\n#### Evaluating a Component\n\nLet's remove those tests and start working with components. Starting with a simple example first, we will test if the App contains a `<main>` html element.\n\n```javascript\nimport { describe, expect, it } from 'vitest';\nimport App from './App';\nimport { render, screen } from '@testing-library/react';\n\ndescribe('App test suite', () => {\n  it('contains a `main` html element', () => {\n    render(<App />);\n    expect(screen.getByRole('main')).toBeInTheDocument();\n  });\n});\n```\n\nYou may notice the keyword `screen`. When a component or a portion of HTML is rendered, DOM Testing Library gives us a `screen` object that contains rendered content and all of the queries available to select various text or elements. `screen` also includes a method, `.debug()` that is very useful for exploring the contents of the of the `screen` while writing tests. When `screen.debug()` is added to the test, it outputs the rendered elements in neatly formatted html. Notice that everything inside of `App` is rendered into HTML, including its children components.\n\n![test outputting html to cli](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/test-html-output.png)\n\nTo focus in on a single element, `.debug()` can accept a `screen` query.\n\n```javascript\ndescribe('App test suite', () => {\n  it('contains a `main` html element', () => {\n    render(<App />);\n    expect(screen.getByRole('main')).toBeInTheDocument();\n    screen.debug(screen.getByRole('heading', { level: 1 }));\n  });\n});\n```\n\n![h1 highlighted in test output to cli](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/h1-hilight.png)\n\nTesting props for a component differs from case to case but can be as simple as passing some data into the component as rendered. We'll create a new file to test the ProductCard component.\n\n```javascript\nimport { describe, expect, it } from 'vitest';\nimport ProductCard from './ProductCard';\nimport { render, screen } from '@testing-library/react';\n\ndescribe('ProductCard component', () => {\n  const testProduct = {\n    name: 'Test Product',\n    description: 'Test product description',\n    handleAddItemToCart: 'todo',\n  };\n\n  it('includes an h2 containing \"Test Product\"', () => {\n    render(\n      <ProductCard\n        name={testProduct.name}\n        description={testProduct.description}\n      />,\n    );\n    expect(screen.getByRole('heading', { level: 2 })).toHaveTextContent(\n      testProduct.name,\n    );\n  });\n});\n```\n\n![test passes for product card](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/product-card-test-passed.png)\n\nEven though we now have 2 test files, only results for the ProductCard test is displayed. Vitest will not re-run tests unless the evaluated code, or its dependencies, has changed.\n\nTo test interactive elements, we need to use the user-event library and change to async test case functions. user-library provides a `userEvent.setup()` method that allows us to emulate UI interactions. It can be invoked in a test case before rendering the component. If we have 2 or more tests cases in a test suite, we should create a new `setup` function that takes care of the setup and rendering at the same time.\n\n```javascript\n//ProductCard.test.js\n\ndescribe('ProductCard component', () => {\n  function setup(jsx) {\n    return {\n      user: userEvent.setup(),\n      ...render(jsx),\n    };\n  }\n// testing code continues...\n```\n\nWe can then use the setup function in place of the render function in the tests.\n\n```jsx\n//instead of `render`\nrender(<ProductCard .../>)\nconst {user} setup(<ProductCard .../>)\n```\n\nThe `user` that is assigned through destructuring is the tool we use to emulate user actions.\n\n```javascript\nawait user.click(screen.getByRole('button'));\n```\n\nWe don't have access to the original `handleAddItemToCart` so we have to create a mock to simulate its behavior. By looking at the handler function `ProductCard` uses, we can see that it is only returning the product's id. This is easy to replicate: `const returnId = (id) => id`.\n\nAlthough it has a return value, we don't have direct access to it. We still need a way to observe the behavior of the mock function. For this, we use a spy. Spies record a function's behaviors each time it is called, including any arguments and return values. In Vitest's [Vi Utility](https://vitest.dev/api/vi.html) library we use `fn()` to create a spy on a function. To do so, we wrap the mock function `vi.fn((id) => id)` and then place it into the `testProduct` object to make it available to our ProductCard's test suite.\n\n```javascript\n//ProductCard.test.js\n//...testing code\nconst testProduct = {\n  id: 'testId',\n  name: 'Test Product',\n  description: 'Test product description',\n  handleAddItemToCart: vi.fn((id) => id),\n};\n//testing code continues...\n```\n\nThe following test confirms that a `ProductCard` button is clicked.\n\n```javascript\n//ProductCard.test.js\n//...testing code\nit('button fires callback', async () => {\n  const { user } = setup(\n    <ProductCard\n      name={testProduct.name}\n      description={testProduct.description}\n      id={testProduct.id}\n      handleAddItemToCart={testProduct.handleAddItemToCart}\n    />,\n  );\n  await user.click(screen.getByRole('button'));\n  expect(testProduct.handleAddItemToCart).toHaveBeenCalled();\n  vi.clearAllMocks();\n});\n```\n\nAfter the user click, the assertion examines `handleAddItemToCart` with `.toHaveBeenCalled()` to determine whether or not the mock handler has been called. Since we've used a spy, it has recorded the event so the test case passes.\n\nThis next test asserts that the value that the mock returns is the product's id.\n\n```javascript\n//ProductCard.test.js\n//...testing code\nit('callback returns product id', async () => {\n  const { user } = setup(\n    <ProductCard\n      name={testProduct.name}\n      description={testProduct.description}\n      id={testProduct.id}\n      handleAddItemToCart={testProduct.handleAddItemToCart}\n    />,\n  );\n  await user.click(screen.getByRole('button'));\n  expect(testProduct.handleAddItemToCart).toHaveReturnedWith(testProduct.id);\n  vi.clearAllMocks();\n});\n```\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-06/product-card-tests-passed.png)\n\nTesting in React is a fundamental practice that aids in identifying bugs and errors throughout the development process. By validating code behaviors in different scenarios, tests establish a reliable foundation for consistent functionality. They act as a protective layer, catching unintended repercussions when code modifications occur. A robust test suite guarantees that system integrity is maintained even after changes have been made. This week's discussion covers the basics of unit testing, and it's important to acknowledge that there is much more to explore beyond these foundational materials.\n\n[^gitkeep]: Git does not track empty directories. Empty directories are retained on the local machine but are not pushed. They will not show up on GithHub or for anyone else who pulls down a copy of the repo. To get around this, developers place a `.gitkeep` file in empty directories that git will track. As a consequence, the directory is now _not_ empty so is preserved. We can create a `.gitkeep` file using the terminal command `touch .gitkeep` or right-clicking in VS Code and creating a new file in the target directory. Any type of empty file works here but `.gitkeep` usage lets developers know it's just a placeholder so can be deleted whenever the directory is used.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b251"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b254",
      "lessonNumber": 7,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 7",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Save todos to an Airtable base\n- Load saved todos from Airtable on loading\n- Display pending messages during network requests\n- Display error messages on network or authentication error",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Set up Airtable Base",
            "description": "An Airtable base is a collection of tables that stores data, similar to a database, but with a user-friendly interface that resembles a spreadsheet. Each base can contain multiple tables, each with its own set of rows and columns to organize and store different types of information.\n\nWe will use an Airtable table as an API to save data for the todo list.\n\n#### Before You Begin\n\nYou'll need a place to store your personal access token, base id, and table name. These are details that we do not want to publish with our project so we'll use an environment file, .env.local. It has already been listed in the project's .gitignore so we don't have to worry about it being saved into version control.\n\nAfter creating this week's working branch, create a environment file, `.env.local`, in the base directory of the project then paste in the following text:\n\n```text\nVITE_PAT=super_secret\nVITE_BASE_ID=xxxxxxxxxxxxxxxxx\nVITE_TABLE_NAME=TableName\n```\n\nAs you go through the setup and documentation, you'll save those values for the project's use.\n\n#### Create Base\n\n- Your first steps is to [sign up for an Airtable account](https://airtable.com/signup). Once completed, follow the screenshots to set up your todo's base.\n- Choose the Create button at the bottom left and choose to start from scratch.\n\n![choose start from scratch](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/start-scratch.png)\n\n- Rename the table's default name of \"Table 1\" to \"Todos\" by clicking on the down arrow on Table 1's tab.\n- Save the table name to your environment file under the variable `VITE_TABLE_NAME`\n- Update the first field name so that it reads \"title\" instead of \"Title\".\n- Delete the other fields.\n\n![hit down arrow and select edit field](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/update-fields.png)\n\n- Create a new checkbox field named \"isCompleted\". This type of field acts a boolean.\n\n![add isCompleted field](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/add-is-complete.png)\n\n#### Generate Connection Credentials\n\n- Click on profile picture to open menu.\n- Select \"Builder hub\"\n\n![navigate to builder hub](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/builder-hub.png)\n\n- Select \"Create new token\".\n\n![create a new personal access token](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/new-pat.png)\n\n- Give the token a name that you'll remember.\n- Add the scopes `data.records:read` and `data.records.write`\n- Under the Access heading. Hit \"Add a base\" and choose your new one.\n- Hit \"Save changes\" Copy the token value that shows on the next screen\n- Save it to `VITE_PAT` in your environment file.\n\n![configure access token](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/config-pat.png)\n\n- We next have to find the base's id - one approach is to use the API documentation accessed from the base's help menu.\n\n![navigate to customized api documentation](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/find-api-docs.png)\n\n- After the introduction paragraphs, the documentation includes your personal base's id. Save that to `VITE_BASE_ID` in the environmental file.\n\n![documentation is customized to match base config](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/custom-base-docs.png)\n\nTake some time to look over the documentation for Airtable. As you read it over, keep in mind that we will **not** be using Airtable's JavaScript API client. It does not provide anything useful for us in React so it's better to look at the `curl` examples. That'll let you see how the urls and payloads look. Some of the things you can do with the API are pretty cool! Go take a look!\n\n> [!note]\n> The backslash `\\` in the `curl` code examples lets us hit enter to continue adding arguments to the `curl` command.\n\n```terminal\n\n## using backslash\n\ncurl \"https://api.airtable.com/v0/app8c6VR6IQ26pgKP/Todos?maxRecords=3&view=Grid%20view\" \\\n  -H \"Authorization: Bearer super_secret_api_key\"\n\n## without backslash and new line, it's harder to read the command\n\ncurl \"https://api.airtable.com/v0/app8c6VR6IQ26pgKP/Todos?maxRecords=3&view=Grid%20view\" -H \"Authorization: Bearer super_secret_api_key\"\n```",
            "codeExample": "```text\nVITE_PAT=super_secret\nVITE_BASE_ID=xxxxxxxxxxxxxxxxx\nVITE_TABLE_NAME=TableName\n```\n\n```terminal\n\n## using backslash\n\ncurl \"https://api.airtable.com/v0/app8c6VR6IQ26pgKP/Todos?maxRecords=3&view=Grid%20view\" \\\n  -H \"Authorization: Bearer super_secret_api_key\"\n\n## without backslash and new line, it's harder to read the command\n\ncurl \"https://api.airtable.com/v0/app8c6VR6IQ26pgKP/Todos?maxRecords=3&view=Grid%20view\" -H \"Authorization: Bearer super_secret_api_key\"\n```",
            "_id": "68d6a34988b86b203f95b258"
          },
          {
            "taskNumber": 2,
            "title": "Load Todos from Airtable",
            "description": "You will be updating your app to load the todos from Airtable and adopting a pessimistic update approach. While the todos are loading, you'll display a wait message to the user.\n\nIn App.jsx:\n\n#### Establish Transition State\n\n- Create an `isLoading` state variable with with a `defaultValue` of `false`. Destructure out its associated update function, `setIsLoading`, too.\n- Create another state variable but name it `errorMessage` and default to an empty string, `\"\"`. Include its update function too.\n\n#### Fetch in App\n\nYou will use the `useEffect` hook to define and send off the initial fetch request that loads the todos from Airtable. You'll also work with `isLoading` to conditionally show a loading message to the user. If we ever have to make a user wait, it's important to indicate that our app is in the middle of a slow process. This lets the user know that the app is processing a request and they should wait for it to complete.\n\nWhile still in App.jsx:\n\n- Create constants, `url` and `token`, which will be used in the fetch requests.\n  - ``const url = `https://api.airtable.com/v0/${import.meta.env.VITE_BASE_ID}/${import.meta.env.VITE_TABLE_NAME}`;``\n  - ``const token = `Bearer ${import.meta.env.VITE_PAT}`;``\n- create the `useEffect` that was discussed above:\n  - Give it an empty dependency array.\n  - In the body of the function in `useEffect`'s first argument do the following:\n    - Define an async anonymous arrow function that takes no arguments and save it to `fetchTodos`\n    - Make sure to call `fetchTodos()` before closing out the `useEffect`'s first argument.\n\nSo far, it should look like:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nuseEffect(() => {\n    const fetchTodos = async () => {};\n    fetchTodos();\n}, [])\n{/*code continues...*/}\n```\n\n- continuing in `fetchTodos`\n  - Use `setIsLoading` to update `isLoading` to `true`\n  - Create an `options` object for the fetch request. Include:\n    - A `method` property set to \"GET\",\n    - And a `headers` property set to an object containing the following key/value pair: `\"Authorization\": token`.\n  - Set up `try/catch/finally` blocks to handle the fetch:\n    - in `try`\n      - Save an awaited `fetch` to the const `resp` and pass in the `url` and `options` : `const resp = await fetch(url, options);`\n      - If `resp.ok` evaluates to false in an `if` statement, throw a new `Error` that takes in `resp.message`.\n\nAfter the `if` block that throws, you'll place your remaining logic to process the API's response.\n\n- Await the value that `response.json()` returns. We will be working with the `records` array in the response. An example response would be:\n\n```JSON\n{\n    \"records\": [\n        {\n            \"id\": \"recEAx4TQF6JjzZLV\",\n            \"createdTime\": \"2025-02-19T22:04:12.000Z\",\n            \"fields\": {\n                \"title\": \"test todo\"\n            }\n        },\n        {\n            \"id\": \"recx22h6JwjsMhCku\",\n            \"createdTime\": \"2025-02-19T22:04:15.000Z\",\n            \"fields\": {\n                \"isCompleted\": true,\n                \"title\": \"make dinner\"\n            }\n        },\n        {\n            \"id\": \"recFwX5Nyp1TpkUXI\",\n            \"createdTime\": \"2025-02-19T22:04:17.000Z\",\n            \"fields\": {\n                \"title\": \"code out assignment examples\"\n            }\n        }\n    ]\n}\n```\n\nThere are several important details to note when you compare this response against the `todoList` state value:\n\n- The properties, `isCompleted` and `title` are stored in a `fields` object.\n- The `id` is at the top level of each todo object.\n- Any fields that equal false or contain an empty string will not be returned with the todos.\n- The `records` value will always be an array.\n\nBecause the \"shape\" of each todo is different than how they are represented in the app's `todoList` array, you will have to map the contents of `record` out of the response body. The same will be true for the payload of any PUT and PATCH requests.\n\n- in a `map` method called on `records`, define an anonymous function:\n  - It takes a `record` param.\n  - It contains a `const todo = {}`.\n  - Inside the object, assign the `record` properties to the appropriate todo properties.\n  - If `isCompleted` is not truthy, you will want to explicitly set the property equal to `false`.\n\nUse the below `map` examples as reference if needed:\n\n```js\n//example map from an Airtable response.records\n\nconst response = await response.json();\nconst fetchedExamples = response.records.map((record) => {\n    const example = {\n        id: record.id,\n        //destructuring is a compact way to move all fields over\n        //won't need to change this a lot as the app evolves\n        ...record.fields,\n        };\n    if(!example.booleanProperty){\n        //Airtable doesn't return properties whose values are false or empty strings\n        //explicity setting property to false so field exists and prevents logic bugs\n        example.booleanProperty = false;\n    }\n    return example;\n})\nsetExamples([...fetchedExamples])\n```\n\n-or a more compact version-\n\n```js\nconst {records} = await response.json()\nsetExamples(records.map(record)=> {\n    const example = {\n    id: record.id,\n    ...record.fields,\n    };\n    if(!example.booleanProperty){\n        example.booleanProperty = false;\n    }\n    return example;\n})\n\n```\n\nAfter this, it's time to move on to the `catch` and `finally` blocks.\n\n- The `catch` block:\n  - Takes in an error parameter.\n  - Use `setErrorMessage` with `error.message` to set an error message that we will display to the user shortly.\n- The `finally` bock:\n  - Set the `isLoading` state value back to false.\n\n#### Display Loading Indicator in TodoList\n\n- While still in App.jsx, pass `isLoading` into props for the `TodoList` instance.\n- In TodoList:\n  - Destructure `isLoading` out of its props.\n  - Add a statement that evaluates `isLoading` in the JSX that conditionally renders the existing paragraph OR a new paragraph for the loading message.\n  - The new paragraph should have a loading message to display the user. Eg: `<p>Todo list loading...</p>`\n\nAt this point, the todo list should display a message while the API is loading the todos. Once the fetch resolves, it re-renders with the todo list (Or the original paragraph if 0 todos are loaded).\n\n![todo list displays loading message](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/loading-message.gif)\n\n#### Display Error\n\nIn App:\n\n- Add conditional block after the `TodoList` instance. Use the block to evaluate `errorMessage`.\n  - If not empty, display a div containing:\n    - A horizontal rule `<hr/>`.\n    - A paragraph that renders `errorMessage`.\n    - A dismiss button that empties `errorMessage`.\n\nWhen an error happens with our initial fetch, a message is displayed to the user. We've intentionally made this setup as simple as possible so that we can re-use this error message for other operation errors.",
            "codeExample": "```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nuseEffect(() => {\n    const fetchTodos = async () => {};\n    fetchTodos();\n}, [])\n{/*code continues...*/}\n```\n\n```JSON\n{\n    \"records\": [\n        {\n            \"id\": \"recEAx4TQF6JjzZLV\",\n            \"createdTime\": \"2025-02-19T22:04:12.000Z\",\n            \"fields\": {\n                \"title\": \"test todo\"\n            }\n        },\n        {\n            \"id\": \"recx22h6JwjsMhCku\",\n            \"createdTime\": \"2025-02-19T22:04:15.000Z\",\n            \"fields\": {\n                \"isCompleted\": true,\n                \"title\": \"make dinner\"\n            }\n        },\n        {\n            \"id\": \"recFwX5Nyp1TpkUXI\",\n            \"createdTime\": \"2025-02-19T22:04:17.000Z\",\n            \"fields\": {\n                \"title\": \"code out assignment examples\"\n            }\n        }\n    ]\n}\n```\n\n```js\n//example map from an Airtable response.records\n\nconst response = await response.json();\nconst fetchedExamples = response.records.map((record) => {\n    const example = {\n        id: record.id,\n        //destructuring is a compact way to move all fields over\n        //won't need to change this a lot as the app evolves\n        ...record.fields,\n        };\n    if(!example.booleanProperty){\n        //Airtable doesn't return properties whose values are false or empty strings\n        //explicity setting property to false so field exists and prevents logic bugs\n        example.booleanProperty = false;\n    }\n    return example;\n})\nsetExamples([...fetchedExamples])\n```\n\n```js\nconst {records} = await response.json()\nsetExamples(records.map(record)=> {\n    const example = {\n    id: record.id,\n    ...record.fields,\n    };\n    if(!example.booleanProperty){\n        example.booleanProperty = false;\n    }\n    return example;\n})\n\n```",
            "_id": "68d6a34988b86b203f95b259"
          },
          {
            "taskNumber": 3,
            "title": "Update Add New Todo Functionality",
            "description": "In part 3, you'll use an pessimistic state update approach for adding todos. You'll use transient state to change the text content of the button while the request is processing. We don't want pause the user but it's useful for them to know that the application is processing the last action before their todo is rendered . When the API has processed the response, the todo in the payload response gets added into the todo list state.\n\nIn App:\n\n- Create state value`isSaving` with a `defaultValue` of false. You will need its update function too.\n- In the add todo button\n  - Replace the button text with a ternary block that evaluates `isSaving`.\n    - If true, display \"Saving...\"\n    - If `false`, display \"Add Todo\" or the text value you were already using.\n\nIt should now look like:\n\n```jsx\n<button disabled={workingTodoTitle.trim() === ''}>\n    {isSaving ? 'Saving...' : 'Add Todo'}\n</button>\n```\n\n- Update `addTodo(newTodo)`:\n  - Convert it to an async function.\n  - Inside the function body...\n    - Create a `payload` object containing a `records` array containing a single todo object.\n    - Create an `options` object for the fetch request:\n      - Use the \"POST\" method.\n      - Use the same header options from the last request.\n      - Stringify the `payload` object for `options.body`.\n\nAt this point, `addTodo` should look like:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n\nconst addTodo = async (newTodo) => {\n    const payload = {\n      records: [\n        {\n          fields: {\n            title: newTodo.title,\n            isCompleted: newTodo.isCompleted,\n          },\n        },\n      ],\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        Authorization: token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    };\n{/*code continues...*/}\n```\n\n- Continuing from inside `addTodo`\n  - `try` block logic:\n    - Set `isSaving` true.\n    - Send a fetch request and assign it's awaited return value to `resp`.\n      - (hint: `const resp = await fetch(url, options);`)\n      - Throw an Error if `!resp.ok`\n    - Destructure the `records` from the response by using `const { records } = await resp.json();`\n    - Create a `savedTodo` object that:\n      - assigns the `id` to the first array entry's id property.\n      - destructures the remaining key/values pairs out of the only `records` object.\n    - If the `isCompleted` property in the `records` object is not true, explicitly set that on property on `savedTodo` to `false`\n      - This looks like `if (!records[0].fields.isCompleted) {savedTodo.isCompleted = false;}`\n      - Recall that Airtable does not return false or empty fields in the `records`.\n    - Update state using `setTodoList([...todoList, savedTodo]);`\n  - `catch` block logic:\n    - Log the error to console.\n    - Update `setErrorMessage` state value with `error.message`. This will cause errors to show up for users.\n  - `finally` block:\n    - Set `isSaving` to false.\n\nThe updates you've made should flash a brief message on the button while the response processes:\n\n![saving message shows briefly on submit button](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/saving-message.gif)",
            "codeExample": "```jsx\n<button disabled={workingTodoTitle.trim() === ''}>\n    {isSaving ? 'Saving...' : 'Add Todo'}\n</button>\n```\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n\nconst addTodo = async (newTodo) => {\n    const payload = {\n      records: [\n        {\n          fields: {\n            title: newTodo.title,\n            isCompleted: newTodo.isCompleted,\n          },\n        },\n      ],\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        Authorization: token,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    };\n{/*code continues...*/}\n```",
            "_id": "68d6a34988b86b203f95b25a"
          },
          {
            "taskNumber": 4,
            "title": "Update Functionality of Update and Complete Todo",
            "description": "For the final two refactors, you will be using an optimistic approach to UI management. This introduces the need to undo state changes and communicate unexpected API failures to the user. You'll set the updated value into state at the beginning of the `updateTodo` function but not before saving the original version temporarily. If there's a network disruption or some other issue that causes the fetch to fail, you'll use this original version to revert the todoList state back to its state before the error.\n\n#### Update Todos Functionality\n\nIn App:\n\n- update `updateTodo:\n  - Convert it to an async function.\n  - Save the original todo to `originalTodo`:\n    - By finding it's associated object in the `todoList` array by each object's id.\n    - It should look like: `const originalTodo = todoList.find((todo) => todo.id === editedTodo.id)`\n  - Create `payload` object for the fetch request using `editedTodo`\n    - The API expects `payload` to be a JSON object containing a `records` array of table records for the Todo table. For reference, here's the JavaScript object you define in preparation to do this:\n\n```JSON\nconst payload = {\n    records: [\n        {\n            id: editedTodo.id,\n            fields: {\n                title: editedTodo.title,\n                isCompleted: editedTodo.isCompleted,\n            },\n        },\n    ],\n};\n```\n\n- Continued...\n  - Create an `options` object for the fetch request.\n    - Use the PATCH method.\n    - Use the same Authentication header and include `'Content-Type': 'application/json'` in the `headers` object.\n    - For the `body` property, convert the `payload` object to a JSON string using `JSON.stringify(payload)`\n  - `try` block:\n    - Send a fetch request using `url` as the endpoint and the `options` object just created.\n      - Throw an error if `!resp.ok`.\n  - `catch` block:\n    - Log the error to console.\n    - Update `errorMessage` using the ``setErrorMessage(`${error.message}. Reverting todo...`);``\n    - Create a `revertedTodos` using the `originalTodo` to reset that todo's value to a previous state.\n    - Update state with `setTodoList([...revertedTodos]);`\n  - `finally` block:\n    - Set the state value, `isSaving`, to false.\n\nIn TodoListItem:\n\nWe need to cover an edge case where an outdated value is displayed when a user saves a todo and clicks it again immediately.\n\n- add a useEffect that resets the `workingTitle` to the `todo` prop's `.title` value\n  - add `todo` to the dependency array.\n  - call `setWorkingTitle` and pass in the value of `todo.title`\n\nAt this point, the todo app should:\n\n1. Load the todos from Airtable.\n2. Create new todos with the todo form and persist them in Airtable.\n3. Allow users to edit todos which will then update in Airtable.\n4. Display errors messages to the user if there are any fetch issues.\n\n![error displayed to user at bottom of screen](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-07/error-message.png)\n\n#### Update Functionality to Complete Todos\n\nYou'll be left to update `completeTodo` with the necessary logic to communicate the completed todo to the Airtable API and keep the UI synced. You can use `updateTodo` as a reference as you work through this final portion. So that you have a checklist of details to think about: the final code should:\n\n- [ ] optimistically update the UI:\n  - [ ] The todo completes immediately in the UI immediately and allows user to continue to work with the todo list.\n  - [ ] The fetch request happens in the background unless there's a request error.\n  - [ ] The UI for the todo list reverts to its original state if the fetch response does not come back okay.\n  - [ ] Display an error message to the user, using the `errorMessage` state if fetch encounters any problems.\n- [ ] Fetch should use the same headers and method, and take in a payload very similar to the fetch found in `updateTodo`\n- [ ] The same object transformation has to happen between the todo object as represented in state and the todo represented in the `records` property on the payload.\n\n### Stretch Goals: Refactor for Reusable Code\n\nYou will probably have noticed that you are starting to introduce some duplicate code. While that is okay during prototyping and early development, before submitting any final code for a feature (in our case, this assignment), take the time to refactor your code to make it **[DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)**. This will keep the codebase clean and easy to manage. Remember that you should commit your code now so that you have a good save point to return to if you need to start the refactor over again.\n\n- Look for any items that are defined multiple times and assign them to a variable.\n- Compare functions or procedures to find common logic that could be shared in a helper or utility function.\n- Brainstorm some more user-friendly error messages.\n- If you visual learner and have to add styling to help visualize the interface better:\n  - Stick to class-based styles that you define in App.css.\n  - Don't restructure anything in the JSX. We want to maintain a semantically sound html structure so that when we cover styling in week 10, several style choices applied during the assignment will work out properly.\n  - Have fun but don't let styling get away of completing the weekly lesson. After all, a baker doesn't ice a cake until after it's baked and cooled.\n\n### Closing Notes\n\n Next week we cover sorting and filtering. The discussion will take us through implementing sorting and searching on both local and API data stores. We'll then implement an API-based sorting and filtering strategy.",
            "codeExample": "```JSON\nconst payload = {\n    records: [\n        {\n            id: editedTodo.id,\n            fields: {\n                title: editedTodo.title,\n                isCompleted: editedTodo.isCompleted,\n            },\n        },\n    ],\n};\n```",
            "_id": "68d6a34988b86b203f95b25b"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b255"
        },
        {
          "subsectionOrder": 2,
          "title": "Data Fetching",
          "content": "Integrating with an API is a common development task for SPAs. Seldom do they operate without pulling in external data. We can use established APIs for viewable information such as [news articles](https://medium.com/rakuten-rapidapi/top-10-best-news-apis-google-news-bloomberg-bing-news-and-more-bbf3e6e46af6), [movie summaries](https://developer.themoviedb.org/docs/getting-started), or [important Pokemon facts](https://pokeapi.co/?ref=public-apis). For interactive data, we usually work with a custom server hosting API to fetch data that is tailored for use in the UI. This can include user profile or account information, article or video view history, forum posts, and so on. Since some of this data is meant to be managed by the user, we also need to be able to save data changes to the backend.\n\nMost of these data fetching tasks can be categorized into one of four basic tasks - creating, reading, updating, and deleting. These are so common across applications that they are collectively referred to as CRUD operations. Each type of operation uses a specific fetch method when creating a network request.\n\n- **Create** - \"POST\"\n- **Read** - \"GET\" - this is the default action when a fetch method is not specified\n- **Update** - \"PUT\" or \"PATCH\"\n  - PUT is used to completely replace an existing record with new data\n  - PATCH only changes some parts of a record. Eg - a user updates their username then that field only is updated in the record\n- **Delete** - \"DELETE\"\n\nEvery network request is a very slow process from the perspective of a browser. During a data request, we want to avoid making JavaScript to wait for the request to resolve before it continues running. Since JavaScript shares the main thread with other browser tasks, processing a network request synchronously causes the browser to become unresponsive. To allow the main thread to continue executing while the request is not yet fulfilled, we turn to _[Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)_. This article, [States and Fates](https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md) helps explain the terminology promises use. There are two approaches to promises and asynchronous JavaScript code: using a promise's `then/finally/catch`methods or asynchronous functions with `await`.\n\n> [!note]\n> From here on, we will shorten **asynchronous** to **async** since that term is more frequently used than the full word.\n\n#### Then/Finally/Catch\n\nUsing `then`, `finally`, and `catch` with fetch allows us to handle async operations with promise chaining. We can chain multiple `then` (or [`thenable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) ) blocks together to process a response. We use `.catch` for error handling and `.finally` to run code after a promise settles, regardless of its outcome. This approach provides explicit control over async code execution flow. The example code below fetches a url for a random dog picture and then appends it to an html document body. Regardless if it is successful or throws, the `.finally` logs a statement to the console.\n\n```jsx\nfetch('https://dog.ceo/api/breeds/image/random')\n  .then((resp) => {\n    if (!resp.ok) {\n      throw new Error(resp.status);\n    }\n    return resp.json();\n  })\n  .then((data) => {\n    if (data.status != 'success') {\n      throw new Error(data.status);\n    }\n    placeImage(data.message);\n  })\n  .catch((error) => {\n    console.log(error.message);\n  })\n  .finally(() => {\n    console.log('action completed');\n  });\n\nfunction placeImage(url) {\n  const img = document.createElement('img');\n  img.src = url;\n  document.body.append(img);\n}\n```\n\n#### Async/Await\n\nAsync/await, which also uses promises, is another JavaScript feature that allows us to write async code - but in a synchronous[^synchronous] style. In an async function we use the `await` keyword to pause the function's execution until a promise is resolved. The main thread can continue on with other JavaScript code or browser tasks during this time. Once the promise fulfills or is rejected, execution of the async function resumes and it has. A try/catch block is used to handle errors in async fetch operations when using async/await. The below is the async/await equivalent of the code from the previous example. We end up with code that slightly easier to read so we will continue using this approach.\n\n```javascript\nconst fetchDog = async () => {\n  try {\n    const resp = await fetch('https://dog.ceo/api/breeds/image/random');\n    if (!resp.ok) {\n      throw new Error(resp.status);\n    }\n    const data = await resp.json();\n    if (data.status != 'success') {\n      throw new Error(data.status);\n    }\n    placeImage(data.message);\n  } catch (error) {\n    console.error(error.message);\n  } finally {\n    console.log('action completed');\n  }\n};\n\nfunction placeImage(url) {\n  const img = document.createElement('img');\n  img.src = url;\n  document.body.append(img);\n}\nfetchDog();\n```\n\n#### GET with useEffect\n\nThere are libraries that help us integrate network requests but the simplest way to get started us with `useEffect` and a `GET` request. Remember that this hook is used to [synchronize data with external systems](https://react.dev/learn/synchronizing-with-effects). Whenever a component first mounts the useEffect runs regardless its list of dependencies. We can take advantage of this to initiate a fetch request when `App` or some other component first mounts.\n\nWe place the fetch request into the parent component that maintains relevant state. The `useEffect` function is synchronous and expects there to be either 1.) no return value or 2.) a cleanup function. Fetch always returns a promise which will cause problems with the `useEffect`. Also, the `await` keyword is only available inside async functions. To get around these limitations, we declare and execute an async function containing the fetch inside the `useEffect` as seen in the example below. We're sticking with dogs for now, so this component includes the same fetch but adapted to work in a component and is [immediately invoked](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) after it is defined.\n\n```jsx\nimport { useEffect, useState } from 'react';\n\nexport default function RandomDogPicture() {\n  const [img, setImg] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const url = 'https://dog.ceo/api/breeds/image/random';\n    //fetchDog is now an IIFE\n    (async () => {\n      try {\n        const resp = await fetch(url);\n        if (!resp.ok) {\n          throw new Error(resp.status);\n        }\n        const data = await resp.json();\n        if (data.status != 'success') {\n          throw new Error(data.status);\n        }\n        setImg(data.message);\n      } catch (error) {\n        setError(error.message);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {error && <p>{error}</p>}\n      <img src={img} alt=\"\" />\n    </>\n  );\n}\n```\n\n> [!important]\n> If you're coding along, you may have already noticed the occasional double image change when the app first loads. We need to resolve this bug.\n\nRemember that in the development environment, `<StrictMode>...</StrictMode>` causes components to mount twice to expose impure component functions. This means that the useEffect is firing twice so two network requests are being sent off in rapid succession. In most other API fetch scenarios the data that is returned is same between the requests. The double mount in this typical case does not cause a problem with the UI. Since the [DOG CEO](https://dog.ceo) API returns a different picture for each request, the differing results of the two fetches causes our application to behave in an undesired manner.\n\nWe discuss rate limiting in week 9 but it's worth looking at a way to fix the component's behavior. As a good coding practice, we do not want to modify our component to behave differently based on StrictMode's presence. _This is akin to disabling ESLint warnings in an IDE - it hides warnings about undesired behavior but does not fix it!_ We cannot prevent the network request from happening twice but we can ignore the results of the first request. We accomplish this by setting a boolean `let isRan = false` at the beginning of the `useEffect`. We then only call `setImg(data.message)` if `isRan` is false when the the `if` block is finally evaluated. The final, and most important detail is to include a cleanup function that toggles `isRan` to true. Let's look at the refactored code:\n\n```jsx\nimport { useEffect, useState } from 'react';\n\nexport default function RandomDogPic() {\n  const [img, setImg] = useState(null);\n  const [error, setError] = useState('');\n  const url = 'https://dog.ceo/api/breeds/image/random';\n\n  useEffect(() => {\n    let isRan = false;\n    (async () => {\n      console.log('useEffect running');\n      try {\n        const resp = await fetch(url);\n        if (!resp.ok) {\n          throw new Error(resp.status);\n        }\n        const data = await resp.json();\n        if (data.status != 'success') {\n          throw new Error(data.status);\n        }\n        if (isRan) {\n          console.log('skipped setImg()');\n        } else {\n          console.log('ran setImg()');\n          setImg(data.message);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    })();\n    return () => {\n      console.log('cleanup performed');\n      isRan = true;\n    };\n  }, []);\n\n  return (\n    <>\n      {error && <p>{error}</p>}\n      <img src={img} alt=\"\" />\n    </>\n  );\n}\n```\n\nTo appreciate what this is accomplishes, we have to consider where the execution is being paused and the lexical scope of `isRan`. `isRan` is declared inside of the useEffect so is available to anything else written in that scope. This means that the cleanup function has access to it. This function also happens to be a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) so continues to have access to `isRan` whenever it is eventually executed.\n\nGoing back into the function that runs fetch, code execution stops at `const resp = await fetch…`. While the fetch is pending, execution has not reached the `if` statement that evaluates `isRan`. As a result, if the cleanup function runs while the fetch is still pending, `isRan` is changed to `true` so the state update function, `setImg` isn't called. This drops the request's payload and avoids the changing image during the second render. In summary, the `RandomDogPic` component ends up ignoring the first request and displays the result of the second request.\n\nThe code above also includes a few `console.log` statements that provide us some insight into the execution order across the useEffect.\n\n![page loads dog image](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/useeffect-skip-image.gif)\n\nThe following is logged to the console when the app first loads:\n\n```console\n[vite] connecting...                     client: 495:8\n[vite] connected.                       client: 614:14\n\nuseEffect running                       App.jsx: 27:14\ncleanup performed                       App. jsx:49:14\nuseEffect running                        App.]sx:27:14\nskipped setImg ()                        App.]sx:38:18\nran setImg()                            App. jsx:41:18\n»\n```\n\nThe diagram below illustrates the sequence of execution.\n\n```mermaid\nsequenceDiagram\n    participant UI\n    participant Component\n    participant img state\n    box transparent useEffect\n    participant useEffect\n    participant fetch\n    participant cleanup\n    end\n    participant API as DOG.CEO API\n\n\n    Component-->>useEffect: 1st mount\n    useEffect-->>fetch: 1st fetch\n    fetch--)API: GET random image\n    Component-->>cleanup: unmount\n    cleanup-->>fetch: sets fetch 1 `isRan` to true\n    Component->>useEffect: 2nd mount executes\n    useEffect->>fetch: 2nd fetch\n    fetch-)API: GET random image\n    note right of fetch: 1st and 2nd response<br/> resolve after 2nd mount\n    API--)fetch: 1st response\n    rect lightgray\n    fetch --xfetch: `isRan === true`<br/>drop 1st response\n    end\n    API-)fetch: 2nd response\n    fetch->>img state: `isRan !== true` <br/>response 2 updates img state\n    img state->>Component: state update requests re-render\n    Component->>UI: dog picture appears\n```\n\nWhen the app is loaded it mounts the component which then executes its `useEffect`. This sends off a fetch request and returns a cleanup function. As soon as the component mounts, it is unmounted, firing the returned cleanup function which updates `isRan` to be true. The component then mounts again, causing `useEffect` to run, sending a second network request. After the API returns the first response, it's dropped because its instance of `isRan` is true. React uses the second request because useEffect does not run the cleanup function so its instance of `isRan` is still false. This allows the fetch to set the state variable. This finally gives us a cute puppy to look at!\n\nOf course, seeing only one dog is boring! Let's add a button that will load a new random dog picture each time it is clicked. Unfortunately, because of the internal dependency `isRan`, the first fetch request cannot be re-used. We want to create another request for the button.\n\n```jsx\n//...component code\n  const fetchNewDog = async () => {\n    try {\n      const resp = await fetch(url);\n      if (!resp.ok) {\n        throw new Error(resp.status);\n      }\n      const data = await resp.json();\n      if (data.status != \"success\") {\n        throw new Error(data.status);\n      }\n      setImg(data.message);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  //component code...\n  return (\n    <main>\n      <button style={{ display: \"none\" }} onClick={fetchNewDog}>\n        Another Please!\n      </button>\n      {error && <p>{error}</p>}\n      <img src={img} alt=\"\" />\n    </main>\n  );\n}\n```\n\nWe can then update the JSX with the new button. `fetchDog` can be passed to the button's onClick handler props.\n\n![clicking button loads another dog image](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/another.gif)\n\n#### Loading CTD-Swag with Product Data from an API\n\nLet's get back to CTD and load the product list in from the API.\n\nA copy of the backend API can be found in here: [Code-the-Dream-School/ctd-swag-backend](https://github.com/Code-the-Dream-School/ctd-swag-backend). Instructions on how to set up and run the server are found in the project's readme. You will need to have a postgres database running locally - plenty of guides to set this up can be found online - choose one for your specific operating system.\n\n> [!warning]\n> Avoid putting API or authentication data directly into an application. These values, referred to as environmental variables, change between environments (local, staging, production, etc.) and some information such as credentials or API tokens are sensitive information that we do not want to publish with our repo. It's very difficult to remove these values out of version control history if accidentally committed!\n\nAssuming that the API is in place, the first step is to create a configuration file, `.env.local`, at the top level directory of CTD-Swag. After it is created, confirm that there is a `*.local` entry in the `.gitignore` so that version control is not tracking this file. As a Vite-specific security precaution, all variable keys must have the prefix `VITE_` to be available for use inside our code. For now, all we need is a `VITE_API_BASE_URL=\"localhost:8641\"`. This is the URL that forms the base of our fetch request. We access that value using `import.meta.env.VITE_API_BASE_URL`.\n\nNow that we can access the base url, we update `useEffect` to get the list of products. We don't need to worry about discarding one of the responses since the request should contain the same data between API calls.\n\nHere's the updated `useEffect`:\n\n```jsx\n//App.jsx\n//... component code\nconst baseUrl = import.meta.env.VITE_API_BASE_URL;\n\nuseEffect(() => {\n  (async () => {\n    try {\n      const resp = await fetch(`${baseUrl}/products`);\n      if (!resp.ok) {\n        throw new Error(resp.status);\n      }\n      const products = await resp.json();\n      console.log(products);\n      setInventory([...products]);\n    } catch (error) {\n      console.error(error);\n    }\n  })();\n}, []);\n//component code...\n```",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b256"
        },
        {
          "subsectionOrder": 3,
          "title": "UI Update Strategies",
          "content": "Before we plan any more changes, we need to consider how to manage UI state as the application interacts with an API. Network operations, even on a fast connection, are not instantaneous. They take milliseconds to seconds to resolve. While that does not sound like much, it's enough time to to frustrate users depending on what they are doing and what feedback they expect the app. We need to address the state of the application between the time when a user commits a change and when it is actually processed by a back end.\n\nThis _intermediate_ state affects both the perceived performance and the users ability to rely on highly reliable representation of state. When do we want to ensure that the information displayed is accurate and when do we prefer the UI to be fast? In other words: do we want to make sure that the data is saved first before updating the UI, or should we update the UI immediately based on a user event and then save changes to the API's backend afterwards? The first approach is known as a \"pessimistic\" UI update strategy while the second is \"optimistic\". Setting the emotional tone of each word aside, they describe how we prioritize data and state synchronization. Each has its advantages and disadvantages.\n\n#### Pessimistic\n\nA pessimistic strategy is based on the assumption that there is a possibility of operation failure and places an emphasis on making sure a system update is successful before updating the UI. This approach requires that the state of the UI accurately reflects the data as it is stored on the back end. Rather than speculating about the success of a transaction, we wait for the API to send a success or failure response and then use that response's payload to update application state.\n\nFor example from life is transferring money between two accounts using a banking app. When a user submits the transfer request, the interface doesn't automatically update account balances. Instead, it waits for the bank's server to process the request and send a response back. Usually during this time, the UI may show a spinning wheel or loading bar that lets the user know that the transaction is still pending. When a response is received it will contain updated account balance information that the application then uses to update state.\n\nThis strategy is much easier of the two to implement. The implementation details are usually formulaic and result in compact, easy to read code. A typical breakdown of state change operations using the pessimistic strategy:\n\n1. A user triggers an event that requires an API response\n2. Relevant data is gathered and inserted into a fetch request\n3. The request is sent off to an API. Note: This pauses any updates to the UI that depend on the values being updated\n4. The API server formulates a response containing data up update the UI state\n5. The server responds with an update.\n6. The response data is applied to state.\n\n##### Advantages\n\n- **Accurate State**: The UI's state accurately reflects the data saved on the back end\n- **Simplicity**:Simpler to implement than optimistic strategies\n\n##### Disadvantages\n\n- **Slow**: Some UI operations feels sluggish to users even on fast internet connections\n\n##### Best Used For\n\n- **Data Integrity**: Maintaining the integrity and accuracy of data displayed in the UI, ensuring that updates are finalized and reflected accurately after successful confirmation from the backend.\n- **Risk Mitigation**: When the impact of displaying incorrect or incomplete information in the UI is significant, a pessimistic approach reduces the risk of misleading users with incomplete or erroneous data.\n- **Form Submissions**: In scenarios where form submissions require validation from the server before proceeding, especially in cases involving sensitive data or multi-step processes.\n- **Compliance Requirements**: For applications subject to regulatory compliance or audit requirements, a pessimistic strategy helps enforce strict data validation and auditing controls.\n- **Concurrency Control**: When dealing with shared resources or collaborative editing scenarios, pessimistic locking mechanisms help prevent conflicts and ensure data consistency.\n- **Code Simplicity**: When the application's developer(or team) prioritizes code simplicity so that features can be rapidly implemented or refactored with relative ease.\n\n#### Optimistic\n\nThe Merriam-Webster dictionary provides a definition for optimism as \"an inclination to put the most favorable construction upon actions and events or to anticipate the best possible outcome\". When approaching a UI change optimistically, we prioritize a responsive UI assuming that most of the API interactions will succeed. The smoothness of operation is also worth the effort that comes with complex error handling and recovery.\n\nWe handle errors just like when using the pessimistic strategy but also need to be able to roll back intermediate state changes. For example, a user of a social media app hits the like button on a post. A thumbs-up, smiley face, heart, or some other icon shows up in a reactions area along with other people's reaction icons. This happens instantaneously in the UI, giving the user feedback that indicates they've liked the post and can continue skimming their feed. Meanwhile, the app sends off a request to the social media platform's API with data needed for the backend to update the post. If all goes well, nothing else needs to be done and the user is already engaged in other tasks. The UI is already updated and reflects the data stored on the API.\n\nHowever, if there's a failure while processing the request, the app needs to undo changes to the UI and notify the user that there was an issue. The code to implement this can get very complex. Depending on the application, developers tend to rely on specialized frameworks or libraries to manage state synchronization between the front end and back end. We will not be using any libraries and keep any examples as simple as possible.\n\n##### Advantages\n\n- **Perceived Performance**: Provides instant feedback to users without waiting for server responses, enhancing the perceived speed of the application.\n- **Improved Responsiveness**: Enhances user experience by creating a smoother and more responsive interface.\n- **Offline Support**: Enables functionalities even when offline by immediately updating the UI, with actual data sync happening later.\n\n##### Disadvantages\n\n- **Reconciliation of Server Responses with Local State**: Requires careful handling to ensure a seamless user experience and data integrity.\n- **Data Consistency**: Risk of inconsistency if the optimistic update doesn't match the actual server response.\n- **Recovery From Errors**: Handling errors becomes more complex as you need to manage discrepancies between the optimistic update and server response.\n\n##### Best Used For\n\n- **Highly Responsive Interfaces:** When user experience and perceived speed are crucial, such as interactive messaging platforms or collaborative editing tools.\n- **Non-critical Data Operations:** Suitable for non-critical operations where occasional inconsistencies are acceptable and can be resolved later without significant impact on user experience.\n- **Offline Functionality:** Useful for scenarios where users need to perform actions offline and sync data later, like note-taking apps or task managers.\n\n#### A Note on Transient State\n\nWith the the ability to save data to a server, it's important to remember that state changes which are limited to the UI do not create data worth saving. These temporary UI state values should not be synchronized with the back end. Here are a few examples:\n\n1. **Form Field Validation State:** Flags indicating the validity of user input in client-side form validation.\n2. **Sorting or Filtering Preferences:** User-defined sorting or filtering options applied to view data on the client side, such as changing the order of displayed items in a list.\n3. **UI Theme Preferences:** User selected themes, color schemes, or layout preferences for the interface that enhance the user experience but are specific to individual users and do not affect shared data. _This depends on the importance placed on user experience customization for the specific app._\n4. **Local Notifications:** Displaying temporary notifications or alerts within the app for user feedback.\n5. **Client-Side Calculations:** Intermediate results or calculations performed in the UI for dynamic updates or real-time feedback.\n\n#### Planning User and Cart Features in CTD-Swag\n\n##### Identify Development Tasks\n\n> [!note]\n> Most of the time this sort of information is brainstormed as a team so you'll rarely have to do this on your own as a junior developer.\n\nAfter learning about asynchronous operations and how to synchronize application state with an API, we're ready to make some expansions to CTD-Swag. As we build out each new feature, we have to determine which strategy we to use. To do so we start by listing the tasks a user should be able accomplish in the UI after the new feature is implemented. Then need to consider what role state plays while a user interacts with the application. To help with the thought process we take an educated guess about what key tasks that we can anticipate while developing the feature. From there we'll determine if it needs optimistic or pessimistic UI features.\n\n- **An existing user needs to be able to sign in**\n  - an authentication form needs to be displayed by hitting a login button\n    - the login form can be re-used by conditionally displaying certain fields and the correct button\n  - a POST request needs to be sent to `/login`\n  - on a successful API response, the user is logged in (this will be same data as sign up response )\n    - response data will include user info:\n      - account info, excluding password\n      - user id - needed to create a fetch request to GET cart\n      - JWT authentication token needs be saved as an HttpOnly cookie\n- **A new user needs to be able to sign up for an account.**\n  - a user details form needs to be displayed by a hitting a sign up button\n  - a POST request needs to be sent to `/users` on submit\n  - on a successful API response, the user is logged in\n    - response data will include user info:\n      - account info, excluding password\n      - user id - needed to create a fetch request to GET cart\n      - JWT authentication token saved as HttpOnly cookie\n- **A user's cart should be saved to their account if they are logged in**\n  - when user is signed in, a fetch GETs the user's shopping cart.\n  - when user adds item to cart\n    - cart in UI should update automatically\n    - PUT request containing the full cart is sent to API\n      - success is silent\n      - failure rolls back cart change and displays error message to user\n- **A user submitting the cart update expects the cart to reflect the updated as it's represented on the server.**\n  - users expect to wait for remote confirmation when submitting a form\n  - only local state is updated while making changes\n  - when user submits the form, a PUT request containing cart is sent to API\n  - a successful cart update response replaces the cart in the app state which automatically updates state managed locally on the form\n  - when the back end reports a failure of that operation\n  - UI rolls local state back to the previous app state before user edits (this is the same way the current cancel button works)\n  - display error message\n\n##### Matching Actions to UI Updating Strategy\n\n###### Pessimistic\n\n- **An existing user needs to be able to sign in.**\n- **A new user needs to be able to sign up for an account.**\n- **User cart edits should update the user's saved cart when the user confirms the updates.**\n\nAll of the data changes from the above tasks can be considered major operations. A user record is needed to save user info to the server so it must exist before they are able to log in. For a user to log in or resume a previous session, their user information and cart contents must be loaded on the front end before populating UI elements. The cart edits also need to be confirmed before updating the interface. Since this is done through a form, the user already expects a save confirmation from the back end before changes are finalized. For these features to behave in a desired manner where we are emphasizing data accuracy, we will take a pessimistic approach.\n\n###### Optimistic\n\n**A logged in user's cart items should be saved to their account**\n\nWe want to avoid making a user having to wait to take further actions after adding an item to their cart. Delaying a user to make sure the item has been added to the stored cart is a detriment to the shopping experience. The increased wait time a user must endure decreases the likeliness that they will add more items to their cart. This is definitely not good for the user or the store! To keep the shopping experience pleasant, an item it should immediately appear in the cart while the app is synchronizes cart information in the background. If the API fails for any reason, we will need to revert the state changes. An emphasis on user experience indicates we should adopt an optimistic strategy for this feature. Luckily, our state recovery mechanism is already implemented!\n\n##### Implementing User and Cart Features\n\nWe are now ready to expand the functionality of CTD Swag. The discussion will focus on state updates and API synchronization using fetch and how they relate to intermediate UI state. In week 11, we'll cover some more advanced state management techniques that will help simplify UI state updates. For now, we will stick with the `useState` hook.\n\n##### Log in an Existing User\n\nFor this task we need to create a form that accepts an email and password. Since we don't want to clutter the interface any further, we will add a Log In button beside the cart that toggles the visibility of a dialog containing the auth form. We will use a state variable, `isAuthFormShown` to control this dialog's visibility.\n\n![submitting auth form](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login3.gif)\n\nWe next consider the POST request that we send to authenticate. An initial request looks like:\n\n```jsx\n// extract from App.jsx\n//...component code\n\nasync function handleAuthenticate(credentials) {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n    headers: { 'Content-Type': 'application/json' },\n  };\n  try {\n    const resp = await fetch(`${baseUrl}/auth/login`, options);\n    if (!resp.ok) {\n      //status will be 401 if authentication fails\n      //we want to handle it differently than other errors\n      if (resp.status === 401) {\n        console.dir(resp);\n      }\n      throw new Error(resp.status);\n    }\n    console.dir(userData);\n  } catch (error) {\n    console.dir(error);\n  }\n}\n//...continued component code\n```\n\nThis function is passed through props to the login form and fired off with an event handler that also prevents the page from reloading:\n\n```jsx\n// extract from src/features/Auth/AuthForm.jsx\n\nimport { useState } from 'react';\nimport ctdLogo from '../../assets/icons/mono-blue-logo.svg';\n\nfunction AuthForm({ handleCloseAuthForm, handleAuthenticate }) {\n  const [email, setEmail] = useState('dev@test.com');\n  const [password, setPassword] = useState('password123');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleAuthenticate({ email, password });\n  }\n  return (\n    <>\n  <div className=\"authFormScreen\"></div>\n     <form className=\"authForm\">\n{/*continued component code...*/}\n  <div className=\"authButtons\">\n          <button\n            disabled={!email || !password}\n            type=\"button\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n          <button type=\"button\" onClick={handleCloseAuthForm}>\n            Cancel\n          </button>\n        </div>\n        {/*continued component code...*/}\n```\n\nWith that in place with a few `console.dir` statements, we get the auth response's payload logged to the console.\n\nHere's the current UI appearance for successful login and failed login:\n\n![failed login attempt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-error.gif)\nHere are the relevant console outputs so that we can determine how to integrate it to our existing state:\n\n```javascript\n// successful login\nObject {\n cartItems: Array [ {…}, {…} ],\n message: \"Login successful\",\n token: \"<<secret-token-string>>\";\n user: Object { id: 19, firstName: \"First\", lastName: \"Last\", … };\n // continued...\n​}\n\n// failed login\nResponse {\n url: \"http://localhost:8641/auth/login\",\n status: 401,\n ok: false,\n statusText: \"Unauthorized\",\n ​​// continued...\n}\n\n```\n\nWhen the user hits the submit button, it initiates the POST request and the UI should display that the system is processing the login. When we get the success message from the server, we'll close the login form and use the API response to populate the user's cart. If the API informs us that a login attempt failed we will show an appropriate message in the modal and give the user a chance to log in again.\n\nWe now have to consider intermediate state. To indicate when the app is waiting for a response, we create a boolean state variable `isAthenticating`. We also create another state variable, `user` to hold the user's information while they are logged in. We'll tell whether a user is logged in when it is no longer an empty object. Finally, we need to be able to display an error if there is an authentication issue.\n\n```jsx\n//extract from App.jsx\nconst [isAuthenticating, setIsAuthenticating] = useState('false');\nconst [user, setUser] = useState({});\nconst [authError, setAuthError] = useState('')'\n```\n\nFrom these three state variables we can display content based on the four following UI conditions for before, during, and after a user logs in:\n\n- **not authenticated** - We want to display a log in button beside the cart.\n- **authenticating** - We want to display an in-progress message and a spinner while authentication is in progress.\n- **authenticated** - We want to change the \"login\" button to \"logout\" and display an account name near the cart.\n- **failed authentication** - We want to display a dismissible message about failed log in attempts.\n\n> [!danger]\n> Error messages should be helpful for the user but not too specific. Sharing too many details about system errors can pose a security risk. For example, if we let the user know if it was the email or password that caused authentication to fail, a malicious hacker can test a list of email addresses to see if they match any user that is registered in the system. It's better in this case to limit the message to whether logging was successful or not. Most of the time, this is taken care of on the back end but front-end developers need to be careful not to expose exploitable data.\n\nIn the updated `handleAuthenticate`, when the fetch requests initiates, it changes `isAuthenticating` to `true`. Whenever it resolves `isAuthenticating` is set back to `false`. A successful login will set the user's value with the API response. If there is an error, `authError` is set with the API's error message.\n\n```jsx\n//extract from App.jsx\nasync function handleAuthenticate(credentials) {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n    headers: { 'Content-Type': 'application/json' },\n  };\n  try {\n    setIsAuthenticating(true);\n    const resp = await fetch(`${baseUrl}/auth/login`, options);\n    if (!resp.ok) {\n      if (resp.status === 401) {\n        setAuthError(resp.statusText);\n      }\n      throw new Error(resp.status);\n    }\n    const userData = await resp.json();\n    //assigning an new object that's more convenient to work with\n    setUser({ ...userData.user, token: userData.token });\n    setIsAuthenticating(false);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n```\n\nFinally, we use those state values to update the content in the UI. We'll take care of items that use intermediate state - loading message and the spinner. We pass `isAuthenticating` to the auth form. Using conditional rendering, we'll toggle between the form and the loading elements. If the authentication is successful, we'll also close out the form dialog window.\n\n![loading spinner shows briefly during login](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login2.gif)\n\nThat quick state change makes it challenging to work with html elements and styling if you forget to take advantage of React's dev tools. In the Components tab of the browser's dev tools, you are able to see and change state values in all of the components rendered on the page. We can find the one that toggles the dialog's loading message and set it to true. This results in the loading elements staying on screen.\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-spinner.gif)\n\nWith this open, we can also insert and position the error message to the bottom of the dialog. Remember to reset `authError` to an empty string if the user successfully logs in or they close the dialog out. We don't want that value persisting in the application.\n\n![login dialog shows error message on bad login attempt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-error.gif)\n\nOur final step is to update UI content for the user based on the `user` state variable. This includes populating the cart, changing the login button to log out (text and functionality), and adding the welcome message.\n\n##### Setting up Cart\n\nOne of the key features of adding users and carts is to populate the cart. Luckily, this is a simple matter. Recall that in the console statements, the response object contained an `cartItems` entry. We don't have to go through the awkward transformation of product items into cart items again. Our API is set up to deliver the cart items so we can add them directly into the cart. We can take a closer look at that fetch response but this time in the browser's Network tab.\n\n![pointing out server-based properties in cart items](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/cart-state-server-fields.png)\n\nWe just have to confirm that the variable names for each property matches the corresponding value in the response response (eg: `cart` vs `cartList` vs `cartItems`). We can then destructure the cart items directly into the the cart's state updater function to update the cart.\n\n```js\n// extract from App.jsx\n//...code\nasync function handleAuthenticate(credentials) {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n    headers: { 'Content-Type': 'application/json' },\n  };\n  try {\n    setIsAuthenticating(true);\n    const resp = await fetch(`${baseUrl}/auth/login`, options);\n    if (!resp.ok) {\n      if (resp.status === 401) {\n        setAuthError('email or password incorrect');\n      }\n      throw new Error(resp.status);\n    }\n    const userData = await resp.json();\n    // this is a LOT of state update functions in a row!!\n    // we fix this in week 11\n    setUser({ ...userData.user, token: userData.token });\n    setCart([...userData.cartItems]);\n    setAuthError('');\n    setIsAuthenticating(false);\n    setIsAuthFormOpen(false);\n  } catch (error) {\n    setIsAuthenticating(false);\n    console.log(error.message);\n  }\n}\n//code continues...\n```\n\n###### Updating Button and Adding Welcome Message\n\nWe pass the Header additional props:\n\n```jsx\n\n{/*extract from App.jsx*/}\n{/*...component code*/}\n  function handleLogOut() {\n    setUser({});\n    setCart([]);\n  }\n\n  return (\n    <>\n  <Header\n   cart={cart}\n   handleOpenCart={() => setIsCartOpen(true)}\n   handleOpenAuthForm={() => setIsAuthFormOpen(true)}\n   //new props\n   handleLogOut={handleLogOut} //wipes out the user and cart values\n   user={user} //used to tell if user logged in\n  />\n{/*component code continues...*/}\n```\n\nIn the Header component, we determine there is a user by looking for the existence of `user.id` which will only be set if there is a user logged in. There are better approaches to solving this problem but we'll cover that in week 11 when we address advanced state topics. We'll also use conditional rendering to toggle between the existing log in button and a new sign out button.\n\n```jsx\n{\n  /*extract from Header.jsx*/\n}\n{\n  /*...code*/\n}\n<div className=\"userActions\">\n  {user.id ? (\n    <>\n      <span>Hi, {user.firstName}</span>\n      <button className=\"authButton signOut\" onClick={handleLogOut}>\n        Sign out\n      </button>\n    </>\n  ) : (\n    <button className=\"authButton\" type=\"button\" onClick={handleOpenAuthForm}>\n      Log in\n    </button>\n  )}\n</div>;\n{\n  /*code continues...*/\n}\n```\n\nHere is the updated UI functionality for logging in:\n\n![cart loads at login](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-cart-loaded2.gif)\n\n##### Sign Up New User\n\nSigning up a new user uses the same pessimistic UI strategy that logging in employs. Since we already saw an example of a pessimistic approach, we'll just summarize the changes for signing up a new user. We first added a register button beside login.\n\n![login and register buttons](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-register-buttons.png)\n\nBoth buttons call the same handler, `handleOpenAuthDialog`, to open the dialog, but we also set an `isRegistering` state variable that we use to show either the `LoginForm` or the `RegisterForm` form in the `AuthDialog`. We then extract the login form from the into its own `LoginForm` component and then create a `RegisterForm` component.\n\n![toggling between auth and login dialogs](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-auth-dialogs.gif)\n\nWe then create a new POST fetch request to the `/auth/register` endpoint. If all goes well with the registration, then we use the response to set the `user` state value, completing a successful registration and login. We handle any registration errors by displaying messages in the form with the same `authError` state value the login form uses.\n\n![user registers and logs in](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/register-form.gif)\n\n###### Sync Cart Form Update\n\nOur API's `/cart` endpoint incudes a PATCH method. Our response include the auth token in the Authorization header and a stringified version of the workingCart state value. We'll adapt the handler function from the existing confirm update button to make our request. On a successful response, we then set the current `cart` value that propagates to all components dependent on that data.\n\nNote the flicker in the gif below - this is caused by the brief change of `workingCart` to the previous `cart` value before the API response completes. When the cart is updated from the fetch response, that `workingCart` is being changed again.\n\n![alt](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/confirm-update-temp-reversion.gif)\n\nWe can prevent that rapid change by relying on a state boolean, `isCartSyncing`. While it's set to true, we prevent the `useEffect` in the `Cart` component making any state updates to `workingCart`. When the response resolves, we toggle `isCartSyncing` so that `Cart` can resume syncing its `workingCart` with the global `cart`.\n\n```js\n// extract from Cart.jsx\n//...component code\n//resets `workingCart`\nuseEffect(() => {\n  if (isFormDirty || isCartSyncing) {\n    //prevents setWorkingCart from running\n    return;\n  }\n  setWorkingCart(cart);\n}, [cart, isFormDirty, isCartSyncing]);\n\n//code continues...\n```\n\nAfter adding the appropriate intermediate state variables to configure the display of our components, we have the following function that synchronizes the cart with the API:\n\n```js\n// extract from App.jsx\n//...code\nasync function handleSyncCart(workingCart) {\n  if (!user.id) {\n    setCart(workingCart);\n    return;\n  }\n  setIsCartSyncing(true);\n  const options = {\n    method: 'PATCH',\n    body: JSON.stringify({ cartItems: workingCart }),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${user.token}`,\n    },\n  };\n  try {\n    const resp = await fetch(`${baseUrl}/cart`, options);\n    if (!resp.ok) {\n      console.log('resp not okay');\n      if (resp.status === 401) {\n        throw new Error('Not authorized. Please log in.');\n      }\n      const cartData = await resp.json();\n      //cartData.error on all other errors from this endpoint\n      if (cartData.error) {\n        throw new Error(cartData.error);\n      }\n      //catch-all\n      throw new Error('Error occurred while syncing');\n    }\n    const cartData = await resp.json();\n    setCart([...cartData]);\n    //clean up state variables\n    setIsCartSyncing(false);\n    setCartError('');\n  } catch (error) {\n    setCartError(error.message);\n    setIsCartSyncing(false);\n  }\n}\n//code continues...\n```\n\nOn review of that function, we can see a pattern emerge from how we tie together API requests with our application's state:\n\n1. we set up intermediate state\n2. set fetch's options\n3. send request\n4. handle expected errors\n5. update global state with the API response\n6. reset intermediate state\n7. handle unanticipated errors\n\nAnd here is the final cart behavior!\n\n![logs in and opens loaded cart](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/login-cart-loaded.gif)\n\nNote how pessimistic strategy of UI updates doesn't make the experience _bad_ or _slow_ as long as it's applied to major operations. In the state updates that we have done so far, making the user wait for the back end has only a part of confirmation tasks. In the last feature planned, making the user to wait while adding items to the cart would be detrimental to the shopping experience.\n\n###### Add Items (With an optimistic UI strategy)\n\nOur final feature saves a logged in user's shopping cart items to their account. The optimistic approach applies changes to the UI and then saves the change to the backend. Depending on our needs, we either ignore successful responses back or swap out a placeholder value with the API response data. If there is an error, we will need to recover from it. For this feature, we'll ignore successful responses and, if there's an error, de-increment the cart item's quantity and then show an error message.\n\nTo get started, we add the following to the existing `handleAddItemToCart` function:\n\n```js\n// extract from App.jsx\n//...code\n\nasync function handleAddItemToCart(id) {\n//...existing function code\n    if (!user.id) {\n  //exit out of function to prevent anon fetches\n  return;\n    }\n    //API accepts only these fields\n    const payload = {\n      userId: updatedCartItem.userId,\n      productId: updatedCartItem.productId,\n      quantity: updatedCartItem.quantity,\n    };\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${user.token}`,\n      },\n    };\n    try {\n      const resp = await fetch(`${baseUrl}/cart`, options);\n      if (!resp.ok) {\n  console.log(resp);\n  const failData = await resp.json()\n  console.dir(failData);\n      }\n    } catch (error) {\n      console.log(error.message);\n      //TODO code to de-increment item count here\n    }\n//code continues...\n```\n\nFrom here, we start looking to the error responses generated if the response is not okay. Each console statement examines the data as it's processed. We'll send a response with a bad token to observe a 401 response. This is coming from the `console.dir` on line 29 of the code extract above:\n\n```console\nResponse { type: \"cors\", url: \"http://localhost:8641/cart\", redirected: false, status: 401, ok: false, statusText: \"Unauthorized\", headers: Headers(2), body: ReadableStream, bodyUsed: false }\nApp.jsx:176:16\n```\n\nWe'll simulate a POST response that send a bogus productId to the backend:\n\n```console\nResponse { type: \"cors\", url: \"http://localhost:8641/cart\", redirected: false, status: 500, ok: false, statusText: \"Internal Server Error\", headers: Headers(2), body: ReadableStream, bodyUsed: false }\nApp.jsx:176:16\n```\n\nWe'll want to show a \"not logged in\" message for an authorization error and a generic error, \"cart failed to save\" for everything else. We do this in the `if (!resp.ok){}` block with a new `cartItemError` state variable and toggle a dismissible message dialog using `setIsDialogOpen`.\n\n```js\n// extract from App.jsx\n//...code\nif (!resp.ok) {\n  if (resp.status === 401) {\n    setCartItemError(\n      'Your item could not be saved. Log out and log back in again to continue',\n    );\n  } else {\n    setCartItemError('Cart failed to save');\n  }\n  setIsDialogOpen(true);\n}\n//code continues...\n```\n\n![error saving item](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/saving-error.png)\n\n![error confirming cart update](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/cart-saving-error.png)\n\nAfter setting up the alert dialog, we finally need to revert the cart item to its state prior to adding it to the cart. We still have access to target list item so we can decrement its quantity. If the quantity goes down to 0, we then remove it from the cart entirely.\n\n```js\n// extract from App.jsx\n//...code\n\nif (updatedCartItem.quantity === 1) {\n  setCart([...cart.filter((item) => item.productId !== id)]);\n} else {\n  const revertedCartItem = {\n    ...updatedCartItem,\n    quantity: updatedCartItem.quantity - 1,\n  };\n  if (revertedCartItem) {\n    setCart([\n      ...cart.filter((item) => item.productId !== id),\n      revertedCartItem,\n    ]);\n  }\n}\n//code continues...\n```\n\nAs seen in the gif below, the cart number updates immediately. When an error response is received, it reverts back to its previous value. This lets us know the item has been removed.\n\n![cart displaying error dialog](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-07/cart-saving-error.gif)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b257"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b25d",
      "lessonNumber": 8,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 8",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Use the API to sort todos by `title` or `createdTime`\n- Use the API to search for todos based on title contents",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Using Airtable's Query Parameters",
            "description": "#### Setup\n\n- Add field, `createdTime` for default sort to your Airbase table. This will end up being the default sort field. We are not be able to use the already existing `createdTime` on the `record` object because Airtable functions only work with `fields` properties which are those defined by the user in the table. Use the following options in the field creator:\n- Name the field \"createdTime\".\n- Set it to \"Date\".\n- Use the same timezones for everyone and set the timezone to GMT/UTC.\n- Set a default value of \"Current date\".\n\n![configure createTime field](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-08/created-time-config.png)\n\nIn App.jsx\n\n#### Examine the APIs Query Parameters\n\nYou'll be using Airtable's query parameters to set the sort and filter options. Since we want to set up a default sort order we'll look at the Airtable's `sort`\n\n- Navigate to your table's help documents and select \"List records\" from the left-hand side navigation. If you don't recall the process to get to that, here's another way you can select your base to get customized documentation: [Introduction - Airtable Web API](https://airtable.com/developers/web/api/introduction)\n- Scroll down to `sort` and you'll be able to read about how to work with the `sort` URL query parameter.\n  - This will give you some sense about how Airtable's parameters get turned into these ugly URL strings:\n\n```text\nsort%5B0%5D%5Bfield%5D=title\nsort%5B0%5D%5Bdirection%5D=desc\n\nhttps://api.airtable.com/v0/airtable_table_id/Todos?sort%5B0%5D%5Bfield%5D=createdTime&sort%5B0%5D%5Bdirection%5D=desc\n```\n\nEach one of those character combinations that start with a \"%\" sign - as in `%5B`, `%5D`, and so on, are characters that have been re-encoded to be URL safe. To better read the string contents, you'll have to rely on a URI decoder or looking up the characters one at a time. Coincidentally, JavaScript comes with a build-in decoder: `decodeUri()` that you can run that in the browser console to see the original string:\n\n```console\ndecodeURI('https://api.airtable.com/v0/airtable_table_id/Todos?sort%5B0%5D%5Bfield%5D=createdTime&sort%5B0%5D%5Bdirection%5D=desc')\n\n\"https://api.airtable.com/v0/airtable_table_id/Todos?sort[0][field]=createdTime&sort[0][direction]=desc\"\n```\n\nFrom the decoded string, we can tell that the Airtable API takes string representations of the configuration that Airtable uses to process the request. We don't fully know how the API works in reality, but we can liken this string to setting 2 properties on an object using bracket notation, one at a time. Remember that APIs differ from each other, so other APIs may not follow this same approach. This is why developers rely so heavily on documentation to assist with their work.\n\n2 config params also means we need to represent those values in state so a user can toggle them.\n\n- Still in App, create new state variables for the params with associated update functions:\n  - `sortField`: initial value of \"createdTime\"\n  - `sortDirection`: initial value of \"desc\" as in descending\n\n#### URL Encoding Utility Function\n\nYou already employ the `url` in four locations: the `useEffect`, `addTodo`, `updateTodo`, and `completeTodo`. All fetches need to use the same query parameters so that the todo list doesn't spontaneously re-order itself or show all items in a filtered view. You'll centralize the logic in a utility function that exists outside of the component.\n\n- Define a function `encodeUrl` above the `App` function definition:\n  - It takes an object that includes the properties: `sortField, sortDirection`.\n  - Inside the function, define a template literal that combines the 2 sort query parameters:\n    - ``let sortQuery = `sort[0][field]=${sortField}&sort[0][direction]=${sortDirection}`;``\n    - This compares to the console output above, but `createdTime` is replaced with a `${sortField}` and `desc` is replaced with `${sortDirection}`.\n  - It returns a method call to `encodeURI` that takes in a template literal that appends the query parameters to `url`. The function should resemble:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n\nconst encodeUrl = ({ sortField, sortDirection }) => {\n  let sortQuery = `sort[0][field]=${sortField}&sort[0][direction]=${sortDirection}`;\n  return encodeURI(`${url}?${sortQuery}`);\n};\n{/*code continues...*/}\n```\n\n- Replace all references to `url` in App with `encodeUrl()`.\n  - At each location, pass in an object containing the state variables `sortDirection` and `sortField`.\n\n If you are using ESLint, you should see a warning appear on your `useEffect:`\n\n![missing sortDirection and sortField dependencies](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-08/missing-deps.png)\n\n- Update the `useEffect`'s dependency array to include the state values, `sortDirection` and `sortField`. The `useEffect will now fire` each time a user sets the `sortDirection` and `sortField`.",
            "codeExample": "```text\nsort%5B0%5D%5Bfield%5D=title\nsort%5B0%5D%5Bdirection%5D=desc\n\nhttps://api.airtable.com/v0/airtable_table_id/Todos?sort%5B0%5D%5Bfield%5D=createdTime&sort%5B0%5D%5Bdirection%5D=desc\n```\n\n```console\ndecodeURI('https://api.airtable.com/v0/airtable_table_id/Todos?sort%5B0%5D%5Bfield%5D=createdTime&sort%5B0%5D%5Bdirection%5D=desc')\n\n\"https://api.airtable.com/v0/airtable_table_id/Todos?sort[0][field]=createdTime&sort[0][direction]=desc\"\n```\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n\nconst encodeUrl = ({ sortField, sortDirection }) => {\n  let sortQuery = `sort[0][field]=${sortField}&sort[0][direction]=${sortDirection}`;\n  return encodeURI(`${url}?${sortQuery}`);\n};\n{/*code continues...*/}\n```",
            "_id": "68d6a34988b86b203f95b261"
          },
          {
            "taskNumber": 2,
            "title": "View Control Forms",
            "description": "You now need to provide the user with a way to update the params.\n\n- Define a new component, `TodosViewForm` on the `src/features` directory.\n- Return a form that contains a div that will contain the form controls.\n  - Add a `label` containing the text \"Sort by\".\n  - Add a `select` element that is associated with that label\n  - Give the `select` element 2 `option` elements:\n    - 1st: value=\"title\" and includes the text, \"Title\"\n    - 2nd: value=\"createdTime and includes the text \"Time added\"\n  - Add another `label` containing \"Direction\" just after the previous label and select.\n  - Add another `select` with `option` elements for:\n    - \"Ascending\" using \"asc\" for the value\n    - \"Descending\" using \"desc\" for the value\n- Default export the component.\n- In `App`, import it and place a horizontal rule between TodoList instance and the div containing the error message display.\n- Below the `hr`, add an instance of `TodosViewForm`. The `hr` and `form` will show below the todos now:\n\n![sort form on bottom of todos](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-08/todos-hr-sort-form.png)\n\n- Into `TodosViewForm` instance, pass in the props `sortDirection`, `setSortDirection`, `sortField`, and `setSortField`.\n\nBack over in `TodosViewForm` you'll wire up the form so that each time the user updates the options, the state updates will cause the `useEffect` to automatically fetch from Airtable.\n\n- Destructure `sortDirection`, `setSortDirection`, `sortField`, and `setSortField` out of the component's props.\n- On `select`element for the sort by:\n  - Add an `onChange`handler:\n    - Its callback is an anonymous function that:\n      - Takes the event object\n      - Calls `setSortField` with the event target's value.\n  - Add a `value` props and assign it to `sortField`.\n  - Ensure that each `option`'s value matches the target field names.\n- On the `select` element for the sort direction:\n  - Add an `onChange` handler that uses an anonymous function that:\n    - Takes the event object\n    - Calls `setSortDirection` with the event target's value.\n- To define a function `preventRefresh` whose only job is to prevent the page from refreshing if a user accidentally hits enter while working with this form.\n- pass it to an `onSubmit` props on the `form` element.\n\nAt this point, the form should allow you to select either \"Title\" or \"Time Added\" and the API will automatically return the sorted todos and update the UI.\n\n![Time Added can be sorted ascending or descending](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-08/time-sort.png)",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b262"
          },
          {
            "taskNumber": 3,
            "title": "Search Todo Titles",
            "description": "In this part, you'll add a search field an button to the form that was just created. It will take in a string and then added the url params before it's encoded.\n\n#### Update Utility Function\n\n- In `App`, create the state value (and update function) for `queryString` with an empty string for an initial value.\n- Update `encodeUrl` utility function:\n  - Add `queryString` to the argument object.\n  - Create an updatable variable (`let`) `searchQuery` set to an empty string.\n  - Add `${searchQuery}` to the end of the template literal that is used in the return value.\n  - Above the return statement, use an `if` block to assign a value to `searchQuery` is truthy.\n    - If true, update `searchQuery` in the block: ``searchQuery = `&filterByFormula=SEARCH(\"${queryString}\",+title)`;``\n- Update each `encodeUrl` call in App to include `queryString` in its params object. Each of the 3 calls should now resemble: `encodeUrl({ sortDirection, sortField, queryString })`\n- Update the `useEffects` dependency array by adding `queryString`.\n\n#### Update Form\n\n- In `App`, to the `TodosViewForm` instance, add props `queryString` and `setQueryString`,\n- In `TodosViewForm`:\n  - Destructure these props out.\n  - Add a `div` above the previous one and include:\n  - A label containing the text \"Search todos:\"\n  - An input with props:\n  - `type=\"text\"`\n  - `value={queryString}`\n  - `onChange((e)=> {setQueryString(e.target.value)`\n  - A button:\n  - Set to the type of button.\n  - Contains the text \"Clear\".\n  - And empties `queryString` whenever it's clicked.\n\nYour user is now able to filter the todos based on an input that they then can also reset.\n\n![demo of todo list functionality](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-08/search-demo.gif)\n\n### Closing Notes\n\nThis week you added in functionality to sort the todos by title or its creation date and filter the titles to match a string input. To minimize code edits across several fetches, you extracted the logic to build the URL string into a utility function. Also, as a result of how form state is managed, all updates happen live! Each time a user types or selects an option, the `useEffect` initiates a fetch using the updated url params. This produces so pretty snappy results but can eventually become a burden on the network and API services as the application grows or a user's todo's start growing in number. Next week' we will look at a few ways limit network traffic and perform some other optimizations to the codebase to keep the interface running smoothly.",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b263"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b25e"
        },
        {
          "subsectionOrder": 2,
          "title": "Sorting",
          "content": "#### Default Sorting\n\nAfter some (pretend) success, CTD has decided to add more items to its eCommerce store:\n\n![scrolling product list](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-08/long-scroll.gif)\n\nWhat is readily apparent with the growth is the store's page is much longer and products are out of order. We can improve the user's experience by immediately sorting the products alphabetic order and giving the them other sorting options.\n\nTo get started, we'll declare a new utility function above the App component to keep our sorting logic. To respect to React's functional programming approach we choose methods that return data instead of update some existing value. When sorting an array, we have two methods available to help us sort `.toSorted()` and`.sort()`. We choose `.toSorted()` because it returns a new array.\n\n```js\n// extract from App.jsx\n//...code\nfunction sortByBaseName(productItems) {\n  return productItems.toSorted((a, b) => {\n    const baseNameA = a.baseName.toLowerCase();\n    const baseNameB = b.baseName.toLowerCase();\n    if (baseNameA > baseNameB) {\n      return 1;\n    }\n    if (baseNameA < baseNameB) {\n      return -1;\n    }\n    return 0;\n  });\n}\nconst baseUrl = import.meta.env.VITE_API_BASE_URL;\nfunction App() {\n//code continues...\n```\n\nTo finish up this first iteration of sorting, we then add it to the `useEffect` that processes our initial fetch request. `sortByBaseName` is then called with the response to alphabetize the array we pass `setInventory`.\n\n```js\n// extract from App.jsx\n//...code\nuseEffect(() => {\n  (async () => {\n    try {\n      const resp = await fetch(`${baseUrl}/products`);\n      if (!resp.ok) {\n        throw new Error(resp.status);\n      }\n      const products = await resp.json();\n      const sortedProducts = sortByBaseName(products);\n      setInventory([...sortedProducts]);\n    } catch (error) {\n      console.error(error);\n    }\n  })();\n}, []);\n//code continues...\n```\n\nCTD-Swag's product list now shows in alphabetic order. That is a helpful start but I think we can do better.\n\n#### Sort by Field\n\nCTD Swag's users may also want to browse the shop in different ways. For, example, a user may want to sort by price. To allow the user to browse by price, we'll create a form at the top of the page. For now, we just construct the basic form with static content to visualize the purpose of the form.\n\n![sort options](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-08/sort-options.png)\n\nWe then update the utility function `sortByBaseName` by adding `isSortAscending` to the arguments and updating the sorting logic.\n\n```js\n// extract from App.jsx\n//...code\nfunction sortByBaseName({ productItems, isSortAscending }) {\n  return productItems.toSorted((a, b) => {\n    const baseNameA = a.baseName.toLowerCase();\n    const baseNameB = b.baseName.toLowerCase();\n    if (baseNameA > baseNameB) {\n      if (isSortAscending) {\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n    if (baseNameA < baseNameB) {\n      if (isSortAscending) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    return 0;\n  });\n}\n//code continues...\n```\n\nWe create another utility function, `sortByPrice`, that behaves similar `sortByBaseName` but is much shorter since we are working with numbers:\n\n```js\n// extract from App.jsx\n//...code\nfunction sortByPrice({ productItems, isSortAscending }) {\n  return productItems.toSorted((a, b) => {\n    if (isSortAscending) {\n      return a.price - b.price;\n    } else {\n      return b.price - a.price;\n    }\n  });\nconst baseUrl = import.meta.env.VITE_API_BASE_URL;\nfunction App() {\n}\n//code continues...\n```\n\nWe we now employ 2 `useState` hooks so that we can make that form into a controlled form.\n\n```js\n// extract from App.jsx\n//...code\nconst [isSortAscending, setIsSortAscending] = useState(true);\nconst [sortBy, setSortBy] = useState('baseName');\n//code continues...\n```\n\nThis form isn't going to be re-used but to keep the codebase organized we refactor the form out of App and into a `ProductViewForm` located at `src/features/ProductViewForm/ProductViewForm.jsx`.\n\nIn the new `ProductViewComponent` we update the placeholder values to work with state, converting the form to a controlled form. Since HTML stores values as either strings or numbers, we need a helper function to convert the value used to update `isSortAscending` back into a boolean. Here is the final `ProductViewForm`:\n\n```js\n// extract from ProductViewForm.jsx\nfunction ProductViewForm({\n  setSortBy,\n  setIsSortAscending,\n  sortBy,\n  isSortAscending,\n}) {\n  //helper to convert text back into a boolean\n  const handleSortDirectionChange = (e) => {\n    const sortDirection = e.target.value;\n    if (sortDirection === 'false') {\n      setIsSortAscending(false);\n    } else {\n      setIsSortAscending(true);\n    }\n  };\n\n  return (\n    <form className=\"filterForm\">\n      <div className=\"filterOption\">\n        <label htmlFor=\"sortBy\">Sort by: </label>\n        <select\n          name=\"sortBy\"\n          id=\"sortBy\"\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value)}>\n          <option value=\"baseName\">Product Name</option>\n          <option value=\"price\">Price</option>\n        </select>\n      </div>\n      <div className=\"filterOption\">\n        <label htmlFor=\"sortDirection\">Direction: </label>\n        <select\n          name=\"sortDirection\"\n          id=\"sortDirection\"\n          value={isSortAscending}\n          onChange={handleSortDirectionChange}>\n          <option value={true}>Ascending</option>\n          <option value={false}>Descending</option>\n        </select>\n      </div>\n    </form>\n  );\n}\n\nexport default ProductViewForm;\n```\n\nFinally, we'll create a `useEffect` in `App` that watches for changes on either of the new state values. This `useEffect` ties in our utility functions to sort the product list. Note that if we were to work with `inventory` directly into the useEffect, that state value would become a dependency of that `useEffect`. We can avoid this by passing in a function to update state rather than setting it directly. The reason why we are able to do this is that the state update function provides the old state value as an argument that we can use to return a new value for the state. This behavior can be made more apparent through by naming the argument `previous`, similar to how we would use `item` in a map going over `listItems`: eg `listItems.map((item)=> {…`\n\n```js\n// extract from App.jsx\n//...code\nuseEffect(() => {\n  if (sortBy === 'baseName') {\n    setInventory((previous) =>\n      sortByBaseName({ productItems: previous, isSortAscending }),\n    );\n  } else {\n    setInventory((previous) =>\n      sortByPrice({ productItems: previous, isSortAscending }),\n    );\n  }\n}, [isSortAscending, sortBy]);\n//code continues...\n```\n\nThese updates results in a product list that the user can sort by the product name or the price:\n\n![changing sort options](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-08/sort-options.gif)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b25f"
        },
        {
          "subsectionOrder": 3,
          "title": "Filtering",
          "content": "Filters are useful for showing only a a sub-set of product items that contain the term. This can shorten the list of items the user needs to look. Not surprisingly, array's `.filter` method is central to this feature. Let's get started with a basic filter function. We'll allow the user to filter on a match in `baseName`, `baseDescription`, and the `variantDescription` properties on each item.\n\n```js\nconst items = [\n  //contains an offline copy of listItems\n];\nfunction filterByQuery({ productItems, searchTerm }) {\n  const term = searchTerm.toLowerCase();\n  return productItems.filter((item) => {\n    if (item.baseName.toLowerCase().includes(term)) {\n      return item;\n    } else if (item.baseDescription.toLowerCase().includes(term)) {\n      return item;\n    } else if (item.variantDescription.toLowerCase().includes(term)) {\n      return item;\n    }\n  });\n}\nconst filteredItems = filterByQuery({\n  productItems: items,\n  searchTerm: 'pillow',\n});\nconsole.log(filteredItems);\n```\n\nThis initial `filterQuery` when ran on its own results in the following output:\n\n```terminal\n#terminal output from running code above:\n[\n  {\n    id: 179,\n    baseName: 'Throw Pillow',\n    variantName: 'Peach',\n    price: 44.99,\n    baseDescription: 'Comfortable throw pillow and an excellent conversation starter',\n    variantDescription: 'Peach cotton with large pale peach logo',\n    image: 'throw-pillow-peach.png',\n    inStock: true\n  },\n  {\n    id: 180,\n    baseName: 'Throw Pillow',\n    variantName: 'Turquoise',\n    price: 44.99,\n    baseDescription: 'Comfortable throw pillow and an excellent conversation starter',\n    variantDescription: 'Turquoise cotton with large dark blue logo',\n    image: 'throw-pillow-turquoise.png',\n    inStock: true\n  },\n  {\n    id: 185,\n    baseName: 'Pillow Case',\n    variantName: 'Orange',\n    price: 23.99,\n    baseDescription: 'Comfortable pillow case and an excellent conversation starter',\n    variantDescription: 'Orange cotton with large pale orange logo',\n    image: 'pillow-case-orange.png',\n    inStock: true\n  },\n  {\n    id: 186,\n    baseName: 'Pillow Case',\n    variantName: 'Turquoise',\n    price: 23.99,\n    baseDescription: 'Comfortable pillow case and an excellent conversation starter',\n    variantDescription: 'Turquoise cotton with large dark blue logo',\n    image: 'pillow-case-turquoise.png',\n    inStock: true\n  }\n]\n```\n\nOur now utility function works so now we need to create the rest of the filter feature before we integrate it. For now, we place it with the other utility functions at the top of the App component file. We next need to add filter UI elements to the form we made while implementing sort.\n\n![filter field added](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-08/filter-field.png)\n\nAt this point, we have to consider how this filter should interact with our global state. We don't want this this function removing anything from the `inventory` so we will have to create an intermediate working state to provide a `filteredInventory` to the product list. Its associated `setFilteredInventory` state function is called alongside `setInventory` in the `useEffect` that fetches the inventory. We then replace the `inventory` prop with `filteredInventory` in ProductList instance.\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n<ProductList\n   inventory={filteredInventory}{/*no need to change the prop key name*/}\n   handleAddItemToCart={handleAddItemToCart}\n></ProductList>\n{/*code continues...*/}\n```\n\nWhenever a user adds a filter term, we filter `inventory` and provide the returned value to the `setFilterInventory`. We employ another `useEffect` to coordinate the live updating query results. Since we want the filter to run every time `query` changes, we add that to the `useEffect`'s dependency array. ESLint will also provide a warning that `inventory` needs to be added to the dependency array too. Since it remains unchanging after it is set, we can add it to that array. We end up with a `useEffect` that allows ProductList to generate ProductItems on the fly that include any variant that matches the filter.\n\n```js\n// extract from App.jsx\n//...code\nuseEffect(() => {\n  setFilteredInventory(filterByQuery({ productItems: inventory, searchTerm }));\n}, [searchTerm, inventory]);\n//code continues...\n```\n\nHere is the update interface in action:\n\n![filter live-updates search for terms](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-08/filter-pillow.gif)\n\nSort and search implemented locally are appropriate for applications that work with a limited amount of data. We already have all product data on hand so these approaches great for improving the experience users have with CTD Swag.\n\nApplications that use larger datasets commonly paginate the data returned from an API into digestible chunks. Think of how many products Amazon.com has. It would be impossible to send all of their product information is set to the UI. In these cases, sorting and filtering are handled by the API. Just like the sort and search feature we just implemented, we don't need any other React tools to create an SPA that relies on an API for search and filtering.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b260"
        }
      ]
    },
    {
      "id": "68d6a34988b86b203f95b265",
      "lessonNumber": 9,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 9",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Use `useCallback` for URL string encoding.\n- Pause API requests while the user is typing\n\n### useCallback and encodeUrl\n\n- Import `useCallback` into App.jsx.\n- Create a variable `encodeUrl` (same name as helper function created last week) inside the App component and assign it an empty `useCallback`.\n- Define an empty arrow function that takes no arguments in the `useCallback`. It should now look like:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nconst encodeUrl = useCallback(()=>{},[])\n{/*code continues...*/}\n```\n\n- Move the body of the `encodeUrl` utility function this empty arrow function.\n- Delete the utility function from the top of the file.\n- If you're using ESLint, it should be giving you the following warning about `useCallback` dependencies:\n\n![missing dependencies shown in eslint](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-09/missing-deps.png)\n\n- Add these dependencies to the `useCallback` dependency array.\n- Search your App.jsx for all instances of `encodeUrl` then remove the arguments wherever the function is called. All calls to `encodeUrl` should look like: `encodeUrl()` since the `useCallback` handles all the dependencies now.\n\n### Debouncing Filter Input\n\nSending a network request for every character typed can use up API and network resources.\n\n![each keypress sends a network request](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-09/undebounced.gif)\n\nEarlier the lesson, we covered throttling as a means to control how rapid an event fires. Another approach to controlling network requests, especially well-suited for keyboard events is debouncing. This prevents any events from being processed until they go below a certain rate. In the case of the todo list, you'll prevent keyboard events from updating the query string until they stop typing for a half a second (500ms).\n\n<details>\n<summary>More about the term \"debounce\"</summary>\n<p>This term \"debounce\" originally comes from an electrical engineering solution that deals with noise that gets introduced in a circuit when a mechanical switch closes. No matter how carefully two conductive surfaces come into contact (in a button, switch, dial, etc), there is a little bounciness as they come together. That bounce opens and closes the connection rapidly causing bad information to get transmitted.</p>\n<p>The solution to this is to wait for the new circuit to stop \"bouncing\" and settles into an open or closed state before acting on a change. This is same thing that happens when you drop a basket ball onto cement - it'll bounce repeatedly, a little bit less each time, until it stops on the ground. It just happens on a different time and size scale.</p>\n</details>\n\nThe best way to balance UI performance and keeping API calls down is to prevent any fetch from happening until a certain time has passed. We want it to pause long enough that our app doesn't send out a request for every keystroke but not force the user to wait a long period of time. With deeper research you may come up with a delay length, but 500ms is a good starting point.\n\n#### Putting Debounce into Action with useEffect\n\nYou'll combine the use of a useEffect and a setTimeout with a 500ms delay. Remember that a useEffect's return value is used to clean up after the previous useEffect as the component re-renders. To take advantage of React's re-render process you can use the cleanup function to delete the previous timeout each time there's a change. When a user pauses typing long enough, the last called setTimeout will finally get a chance to execute it's callback function. That callback function will pass the locally managed state back up to the App component which finally kicks off a fetch request with updated query params.\n\nIn TodosViewForm.jsx:\n\n- Define a local state for the search input and set its `defaultValue` to `queryString`: `const [localQueryString, setLocalQueryString] = useState(queryString);`\n- Refactor the search input and the Clear button to use the local state instead of the `queryString` and `setQueryString,` from App.\n- Create a useEffect\n  - Add `localQueryString` and `setQueryString` to the dependency array since you'll be working with them.\n  - Call `setTimeout` and assign it to a constant, `debounce`.\n    - In the body of `setTimeout`'s callback, call `setQueryString(localQueryString)`\n    - Give it a delay of 500ms.\n  - In `useEffect`'s return statement, add an anonymous function that calls `clearTimeout` that takes in `debounce`.\n\n![keystrokes debounced to 500 milliseconds](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-09/debounced.gif)\n\n### Closing Notes\n\nNext week we'll talk about styling and using 2 prominent React styling libraries: CSS Modules and Styled Components. That will give us a chance to brighten up a bland interface and give it character!",
            "codeExample": "",
            "_id": "68d6a34988b86b203f95b269"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b266"
        },
        {
          "subsectionOrder": 2,
          "title": "Limiting Network Requests",
          "content": "> [!note]\n> The repo for this discussion topic can be found here: [ctd-ingredient-recipes (GitHub repo)](https://github.com/Code-the-Dream-School/ctd-ingredient-recipes)\n\nTaking a step back from CTD Swag for this topic, we need to discuss how to work efficiently with an API. To work through the next several sections, we'll use [Spoonacular's API](https://spoonacular.com/food-api) to update a simple recipe finder that searches for recipes based on ingredients. The app contains a form for the user to enter a search term. When submitted, a fetch request returns a list of results containing that ingredient. These results are shown as a list below the form. Each recipe title is linked to its source page that opens in a new tab.\n\nAt the time of their writing, [Spoonacular's introductory tier for API access](https://spoonacular.com/food-api/pricing) includes a 150 requests per day restriction and a 1 request per second limitation. We'll employ several techniques to help us make the most of this API. We'll implement caching for searches and throttling to prevent a requests don't happen in rapid succession. We'll approach these tasks using the React tools that we've already been introduced to. After we've completed caching and throttling, we'll introduce 2 React hooks we have not seen yet to help make sure our app is running efficiently.\n\n#### Caching Search Results Using Memoization\n\nCaching is a technique used to store data fetched from the server in a temporary storage location, such as the browser's memory or local storage. This stored data can be quickly accessed when needed without making repeated network requests. In our case, if a user searches for \"chicken\" several times, the app uses API quotas fetching data that we've already had access to. Even without the 150 request per day limitation, we can still employ caching to save the user's bandwidth and speed up repeated searches.\n\nOne approach to this is to store the query and its search results in a lookup object. A lookup object is just a normal JavaScript object that uses the search query as a key to hold the search results. The example object below contains 2 searches, one for chicken and one for spaghetti. If a user searches for \"spaghetti, tomato\" again, we can access the previous search's results in the object with `searchCache[\"spaghetti, tomato\"]`.\n\n```javascript\n//example lookup object with cached search results\n\nconst searchCache = {\n  chicken: [\n    {\n      id: 123,\n      title: 'red lentil soup with chicken and turnips',\n      sourceUrl: '... recipe URL',\n    },\n    {\n      id: 456,\n      title: 'chicken enchilada quinoa cassserole',\n      sourceUrl: '...recipe URL',\n    },\n  ],\n  'spaghetti, tomato': [\n    { id: 789, title: 'spaghetti pomodoro', sourceUrl: '...recipe URL' },\n    { id: 234, title: 'spaghetti carbonara', sourceUrl: '...recipe URL' },\n    { id: 567, title: 'baked spaghetti', sourceUrl: '...recipe URL' },\n  ],\n};\n```\n\nAfter visualizing the cache, we'll create an empty state object to store queries and their associated search results.\n\n```jsx\nconst [searchCache, setSearchCache] = useState {};\n```\n\nWe next update the useEffect containing our search logic that fires every time a search term is submitted. Here is the original `useEffect` so we can see how caching fits in while we make updates:\n\n```jsx\n// extract from App.jsx\n// ...code\nuseEffect(() => {\n //prevents fetch if term blank\n    if (!term) {\n      return;\n    }\n    async function getRecipes() {\n      const options = {\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': `${KEY}`,\n        },\n      };\n      try {\n        const resp = await fetch(\n          `${BASE_URL}/complexSearch?includeIngredients=${term}&addRecipeInformation=true`,\n          options\n        );\n        if (resp.ok) {\n          // resp includes number, offset, totalResults\n          const recipeList = await resp.json();\n          setRecipes([...recipeList.results]);\n          setTerm('');\n        }\n      } catch (e) {\n        console.log(e);\n      },\n      [term, setRecipes, setTerm]\n}\n```\n\nThe newly updated state management flow can be summarized into the following events:\n\n1. user submits term\n2. useEffect containing fetch and caching logic executes\n3. the term is compared to the cache object's keys\n\n- **if match**: that value is used to update the `recipes` state array then the function exits, preventing network request.\n\n4. without match, an async function containing the fetch is composed.\n\n- **if response is okay**: set `recipes`, reset `term` to blank, and add term/response value to cache\n- **if not okay**: handle errors\n\nKnowing this flow of events we can then go back to the original `useEffect` to determine where to update the logic. After updating the `useEffect` logic to include caching, we get the following:\n\n```js\n// extract from App.jsx\n//...code\nuseEffect(() => {\n  if (!term) {\n    return;\n  }\n  if (searchCache[term]) {\n    console.log(`term ${term} found, returning cache...`);\n    setRecipes([...searchCache[term]]);\n    setTerm('');\n    return;\n  }\n  async function getRecipes() {\n    console.log(`getRecipes()`);\n    const options = {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': `${KEY}`,\n      },\n    };\n    try {\n      const resp = await fetch(\n        `${BASE_URL}/complexSearch?includeIngredients=${term}&addRecipeInformation=true`,\n        options,\n      );\n      if (resp.ok) {\n        console.log('response okay');\n        // resp includes number, offset, totalResults\n        const recipeList = await resp.json();\n        setRecipes([...recipeList.results]);\n        console.log(`caching search for \"${term}\"`);\n        setSearchCache((prev) => ({\n          ...prev,\n          [term]: [...recipeList.results],\n        }));\n        setTerm('');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  getRecipes();\n}, [term, searchCache]);\n//code continues...\n```\n\nThe console statements from the above statement illustrates how the caching logic prevents the request in this screen recording:\n\n![searching for chicken then beef](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-09/search-chicken-beef.gif)\n\n#### Throttling Request Rates\n\nAnother type of common API requirement is that a set amount of time must elapse before it will accept another request for processing. This use of throttling, also known as rate limiting, is a protective measure to prevent over-taxing the API's infrastructure. When we update the search results to let the user page through all the results, we have to be mindful of this constraint, we need to prevent the app from submitting a request until at least one second has elapsed since the previous one is sent.\n\nWe are going to look closer at pagination in [[Week-12|week 12]] but we need to know some basic details about the API response that enable us to paginate. Each API response includes a portion of the search results, an offset value(how many recipes that have been skipped), and a total number of results in a search. By updating the fetch logic and updating the UI, the app ends up with a group of buttons below the results that allow a user to page through all the search results.\n\n![paging through search results](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-09/search-chicken-pagination.gif)\n\nThe easiest way to throttle the response is to limit the availability of the buttons. We can temporarily set state to disable the button and then use `setTimeout` to re-enable them after a certain time has elapsed. We'll look at the handler functions since they end up with the logic to perform the throttle:\n\n```js\n// extract from App.jsx\n//...code\nfunction pageForward() {\n  setIsPaginationDisabled(true);\n  const maxPages = Math.ceil(resultsCount / paginationSize);\n  const currentPage = Math.ceil(currentOffset / paginationSize) + 1;\n  if (currentPage >= maxPages) {\n    return;\n  }\n  setNextOffset(currentOffset + paginationSize);\n  setTimeout(() => setIsPaginationDisabled(false), 1000);\n}\n\nfunction pageBack() {\n  setIsPaginationDisabled(true);\n  if (currentOffset <= 0) {\n    return;\n  }\n  setNextOffset(currentOffset - paginationSize);\n  setTimeout(() => setIsPaginationDisabled(false), 1000);\n}\n//code continues...\n```\n\n![demo of button disabled by a timer](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-09/search-lentils.gif)\n\nThat is not the sort of delay that a user would want on their application so we can refine timeout duration. We can look at the network requests in the network activity tab in our browser to figure out how long it's taking the request to process. We see in the following request, that we're waiting around 160 milliseconds for the server to respond.\n\n![response time in network tab](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-09/response-time-hilight.png)\n\nWe'll send off several requests and then average out the wait times between each. For this API, the response time averages out to 350ms. We can then reduce the timeout delay by this amount, making the interface a little friendlier to use without running against the API request speed limitations.\n\n![delay timing minimized](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-09/search-spinach.gif)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b267"
        },
        {
          "subsectionOrder": 3,
          "title": "useMemo and useCallback",
          "content": "Caching and throttling are 2 approaches that increases the efficiency of API usage in an application. There are other optimizations that we can make to a React codebase as well. This week we will introduce `useMemo` and `useCallback`.\n\n#### useMemo\n\nReact’s `useMemo` hook uses memoization to address performance problems cause by expensive calculations and unnecessary re-rendering. `useMemo` returns the _results_ of the memoized function so we reference it similar to a variable. Since it is a hook, its usage does have some constraints:\n\n- It must be used at the top level of the component. Stated differently, it cannot be nested into any other functions or conditional statements.\n- The function definition added to useMemo to calculate return values cannot take any arguments.\n- Any values that we need to work are added to `useMemo`'s dependency list.\n\nThe first portion of the code example below implements memoization in plain JavaScript using a closure. The end portion contains the React equivalent. They do same work but `useMemo` results in much cleaner code more appropriate to a React codebase.\n\n```javascript\n/* plain JavaScript */\n// function to be memoized\nconst expensiveFunction(someInput){\n return //some new value based on someInput\n}\n\n//memoizing function returns the memoized function\nconst memoizeExpensiveFunction(){\n const cacheObject ={}\n //returned function retains access to `cacheObject` since\n //they are both defined in the same lexical scope\n return function (input) {\n  if(cacheObject[input]){\n   return cacheObject[input]\n  } else {\n   const result = expensiveFunction1(input);\n   cachedObject[input] = result;\n   return result;\n  }\n }\n}\n\n// assigning the returned function\nconst importantOperation = memoizeExpensiveFunction()\n\n// calling memoized function and assigning its results\nconst expensiveOutput = importantOperation(input)\n/* end plain JavaScript */\n\n/*----------------------*/\n\n/* React's useMemo version*/\n\n//function to be memoized\nconst slowFunction(someInput){\n return // some new value based in someInput\n}\n\n//0 argument function given to useMemo\n//dependency of memoized function placed\n//in useMemo's dependency array.\nconst slowFunctionMemo = useMemo(()=>{\n return slowFunction(someInput)\n}, [someInput])\n\nreturn (\n<div>\n {/*only updates when `someInput` changes*/}\n <p>{slowFunctionMemo}</p>\n</div>\n)\n```\n\n> [!note]\n> We say that they do the same work but `useMemo` also \"hooks\" into React's render cycle so does some other things behind the scenes.\n\nCommon scenarios that could benefit from `useMemo`:\n\n- **Memoizing Computations**: Memoize complex calculations or data transformations to avoid redundant calculations on every render.\n- **Optimizing Component Rendering**: Memoize the result of component rendering logic based on specific input props.\n- **Preprocessing Data**: Process data before rendering components and memoize the processed data to improve performance.\n- **Conditional Rendering**: Memoize conditional logic to determine when certain components should render based on dependencies.\n\nThe recipe finder app is small so are no performance issues but we can employ `useMemo` to save some data pre-processing. In the `useEffect` that handles the query, we can memoize a computed string used to save/retrieve previous responses in cache: ``const pendingQuery = `${term} offset ${nextOffset}`;``. The only time that this value would ever change is if `term` or `nextOffset` updated. To make the change to using use `useMemo`, we would:\n\n1. Convert the string assignment into a function definition that accepts no arguments and returns the string.\n2. Place that function into `useMemo`\n3. Add `term` and `nextOffset` to the `useMemo`'s dependency list.\n4. Update the locations where string was used with the memoized function's returned value.\n\n```jsx\n// extract from App.jsx\n// ... component code\nconst pendingQuery = useMemo(\n    () => `${term} offset ${nextOffset}`,\n    [term, nextOffset]\n);\n\nuseEffect(() => {\nif (!term) {\n      return;\n    }\n    if (nextOffset > 0 && nextOffset === currentOffset) {\n      return;\n    }\n    if (searchCache[pendingQuery]) { //<--updated\n      console.log('setting from cache: ', searchCache[pendingQuery]); //<--updated\n      setCurrentOffset(nextOffset);\n      setRecipes([...searchCache[pendingQuery]]); //<--updated\n      return;\n    }\n    //continued useEffect code...\n//continued component code...\n}\n```\n\n#### useCallback\n\nDuring a re-render, a component re-defines functions found inside the component body. Everywhere that function is referenced is then passed this new version which can cause a cascade of re-renders. For example, we may have a couple forms in our app that need the same field validation. We can define a validation function in a parent component and pass that function on as props to the form components. Each time that parent component re-renders, that new function will cause the form components to re-render too. Normally, the Render cycle is so fast that this does not cause a problem. Performance issues may arise when too many child components or useEffects are dependent on that function.\n\n`useCallback` addresses this problem by caching the function definition between re-renders. That cached function now remains unchanged unless its dependencies change, preventing needless re-renders. As it is a hook, it can only be called at the top level of the component. The dependency array that this hook uses should include all reactive values referenced inside of the callback\n\nWe can see it in action by wrapping the handler methods the buttons use to page back and forth through the recipe list.\n\n```js\nconst pageBack = useCallback(() => {\n  setIsPaginationDisabled(true);\n  setNextOffset((prevOffset) => Math.max(prevOffset - paginationSize, 0));\n  setTimeout(() => setIsPaginationDisabled(false), 650);\n}, [paginationSize]);\n\nconst pageForward = useCallback(() => {\n  setIsPaginationDisabled(true);\n  setNextOffset((prevOffset) => prevOffset + paginationSize); // uses a setter function\n  setTimeout(() => setIsPaginationDisabled(false), 650); //\n}, [paginationSize]);\n```\n\nRecall that the state update function will provide the previous state value to its setter function. This approach allows us to keep the dependency list short.\n\nTo close out this week's lesson, it's important to re-emphasize that the `useEffect` and `useCallback` hooks should primarily be used as optimization tools. These hooks are designed to control when effects are executed and a prevent unnecessary renders. While they can improve efficiency when re-renders and side effects need fine-tuning, overuse can lead to unnecessary complexity and hinder code readability. Apply `useEffect` and `useCallback` judiciously.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34988b86b203f95b268"
        }
      ]
    },
    {
      "id": "68d6a34a88b86b203f95b26b",
      "lessonNumber": 10,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 10",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Have custom styling applied through css modules and styled components.\n- Include some custom imagery\n\nThis assignment differs from the previous ones in that it's open-ended. The instructions will provide some minimum requirements and designate which components should use which approaches. We encourage you to explore the styling and compare how the two technologies fit into your coding styles.",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Foundation Styles",
            "description": "- Use App.css to provide some style changes such as:\n  - Assign font-families for headings and other textual elements\n  - Change the background color of the body and/or `#root`.\n  - Common styles for buttons, text inputs.\n- If you've used any styling up to this point, refactor that styling into the module or styled-component associated with the targeted element.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b26f"
          },
          {
            "taskNumber": 2,
            "title": "CSS Modules",
            "description": "- Use css modules for App, TodoList, and TodoListItem. Create these files alongside the components as described by the lesson and import them into their respective component.\n- Use class-based styling in the module and assign the classNames using dot-notation on the imported styles.\n- Don't change the element structure in the JSX.\n- At minimum, make the following changes:\n  - App.module.css:\n    - Center the app in the body. Hint: use flex or grid.\n    - Create a border on the div containing the error message\n  - TodoList.module.css:\n    - Eliminate the extra padding on the unordered list\n    - Remove the list item bullets\n  - TodoListItem.module.css:\n    - Add small amount of padding to the bottom of the list item.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b270"
          },
          {
            "taskNumber": 3,
            "title": "Styled-Components",
            "description": "- Use Styled-Components inside TodosForm, TodosViewForm, and TextInputWithLabel.\n- Keep the styled components inside the main component file unless they are shared between components.\n- Keep naming simple - use a prefix \"Styled\" for each element that is replaced with a styled-component: eg: StyledForm, StyledButton, etc.\n- Make minimal changes to the JSX just to swap elements out with the styled components you define.\n- At a minimum, make the following changes:\n  - Add a small amount of padding on the items in each form to give them some spacing.\n  - Make the font in the TodoForm's button italic when it is disabled.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b271"
          },
          {
            "taskNumber": 4,
            "title": "Imagery",
            "description": "This part of the exercise is completely optional. You may add imagery so long as it doesn't disrupt the functionality of the app and it's appropriate for public sharing.\n\nSome ideas:\n\n- background image for the app\n- logo alongside the title\n- replace the checkbox input with an svg icon\n- error icon beside error message\n\n### Closing Notes",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b272"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics\n\n> [!note]\n> We will be working CSS as it relates to React but won't be teaching any styling basics. Remember to use to the list of references at the bottom of each lesson in case you need to brush up on any non-React topics.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b26c"
        },
        {
          "subsectionOrder": 2,
          "title": "Styling",
          "content": "The Vite React Template provides 2 stylesheets: `App.css` and `index.css`. These are good starting points that allow us to quickly start with small projects. We don't want to rely on them if we know our application will continue to grow. Remember that React is a powerful tool and and must render each component and its children in equivalent html elements. As an app component numbers increase, the resulting html that renders our interface becomes increasingly complex.\n\nClass and id usage alleviates this problem temporarily but keeping track of them and what they do becomes the next coding challenge for a developer. Naming conventions such as [SMACSS](https://smacss.com/) or [BEM (Block, Element, Modifier)](https://en.bem.info/methodology/quick-start/) - can help organize an increasing number of CSS selectors but only to a certain point. \"Naming things is hard\" has been spoken by many developers. Because this scaling problem is so common in React projects, we look for libraries that address it directly. The React ecosystem contains several libraries that help us organize styling. To examine two of these, we will be employing CSS Modules on the cart items and use Styled Components .\n\n#### CSS Modules\n\n[CSS Modules](https://github.com/css-modules/css-modules) allow us to scope class-based rules by working with module files that ensure defined classes only affect the the associated component. Limiting the scope of a class to the component means that we reuse class names in other modules without conflict. The benefit to this is that naming css classes becomes a much simpler matter than on a global scope.\n\nVite includes CSS Modules by default so we don't need to import the library into our component. We instead import a stylesheet dedicated to the component. [Vite requires](https://vite.dev/guide/features.html#css-modules) that we must end our stylesheets' file names with `.module.css`. As a best practice, we also use matching css and component file names and keep the files co-located in the project.\n\n```terminal\n# part of the directory structure for CTD-Swag\n├── features/\n     ├── ProductList/\n   ├── ProductList.jsx\n   ├── ProductList.module.css\n   ├── ProductCard.jsx\n   └── ProductCard.module.css\n     └── Cart/\n   ├── Cart.jsx\n   ├── Cart.module.css\n         └── CartItem.jsx (new component)\n```\n\nWhen we import a stylesheet into its associated component the CSS Module library parses the file contents. It then makes any classes found in the file's rules available by dot-notation on import statement object. For example, `<li className=\"item\">` becomes `<li className={styles.cartItem}>`. Seeing in context to the component may illustrate this better:\n\n```jsx\n{\n  /*CartItem.jsx*/\n}\nimport placeholder from '../../assets/placeholder.png';\nimport styles from './CartItem.module.css';\n\nfunction CartItem({ item, onHandleItemUpdate }) {\n  return (\n    <li className={styles.item}>\n      {' '}\n      {/*<--- references style from import*/}\n      <img src={placeholder} alt=\"\" />\n      <div>\n        <h2>{item.baseName}</h2>\n        {item.variantName !== 'Default' ? <p>{item.variantName}</p> : null}\n      </div>\n      <div className={styles.subtotal}>\n        {' '}\n        {/*<--- references style from import*/}\n        <label>\n          Count:{' '}\n          <input\n            type=\"number\"\n            value={item.quantity}\n            onChange={(event) =>\n              onHandleItemUpdate({ event, id: item.productId })\n            }\n          />\n        </label>\n        <p>Subtotal: ${(item.price * item.quantity).toFixed(2) || '0.00'}</p>\n      </div>\n    </li>\n  );\n}\n\nexport default CartItem;\n```\n\nTo employ the stylesheet module, we move rules out of `App.css` that apply only to this component. Scoping gives us the opportunity to simplify names.\n\n```css\n/*CartItem.module.css*/\n\n.item {\n  font-size: 1rem;\n  color: var(--dark-blue);\n  border-radius: var(--small-radius);\n  background-color: #fff;\n  display: flex;\n  justify-content: space-between;\n  margin: 0;\n  align-items: center;\n  margin-bottom: 0.25rem;\n  padding-left: 0.75rem;\n}\n\n.item h2 {\n  padding: 8px;\n}\n\n.item img {\n  max-height: 72px;\n}\n\n.subtotal {\n  border-left: 1px solid var(--dark-blue);\n  padding: 0.25rem;\n  text-align: right;\n}\n```\n\nWhen we go into the elements console of the browser, we can see scoping in action with the transformed class names. When Vite compiles our code, CSS Modules transforms the classnames so that they only target elements related to that component. The class names generated by CSS Modules are typically a combination of the original class name and a unique hash. For example, the class name `cartItem` might be transformed into something like `_cartItem_l8scs_1`.\n\n![highlighting class name change by CSS Modules](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/css-module-class-name.png)\n\nWe continue to write normal CSS with CSS Modules which makes it an attractive tool but have to be careful with element-only selectors. Since they are not class names, any styles using only element or attribute selectors gets added to the file added to the global styles. To ensure rules are scoped, make sure all selectors include a class name. Even though it is possible to write selectors, it's discouraged since it can affect elements found in other components.\n\n```css\n/*scopes to component*/\n.cartItem {\n  /*various styles*/\n}\n\n/*scopes to component*/\n.cartItem h2 {\n  /*various styles*/\n}\n\n/*scopes to component*/\n.cartItem img {\n  /*various styles*/\n}\n\n/*scopes to component*/\n.subtotal {\n  /*various styles*/\n}\n\n/*scopes globally!*/\nh2 {\n  background-color: green;\n}\n```\n\nSee below how the green background of the `h2` affects not only the cart total but also the product titles on the blurry product cards.\n\n![demonstrating style spilling over into h2's](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/green-headings.png)\n\nThere are use cases for element-only selectors. These usually revolve applying some baseline styling globally across the app. Any such styling a React application needs to be kept in a centralized location. This can either be in `App.css` or some other centralized location. The highlighted rules below provide a few examples of how globalized styles can be used.\n\n![highlighting examples of element selectors with style rules](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/root-header-h1-hilighted.png)\n\nLike all JavaScript libraries, CSS Modules has a few other features not discussed here but they are for more advanced use cases. Even not taking advantage of them, CSS Modules is a powerful library. It helps a developer produce a maintainable app by the reducing the risk of style leakage or unintended overrides. It takes the familiar approach to writing CSS and in returns provides scoping to keep css class naming strategies manageable in a growing project.\n\n#### Styled Components\n\n[Styled Components](https://styled-components.com) scopes styling to a component but uses a drastically different approach. Rather than using styles from a css file, it takes a \"css-in-js\" approach. We write our styles using [tagged template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) with transformation functions provided by Styled Components. These functions use the styles found in the template literal to configure the styles of a component that it returns. We don't need to worry about naming style classes anymore - just new components. Let's look at an example since tagged template literals are not a frequently used JavaScript feature.\n\n```jsx\n{\n  /*extract from ProductCard.jsx*/\n}\n{\n  /*...code*/\n}\n\nconst Details = styled.p`\n  padding: 0.5rem;\n`;\n{\n  /*code continues...*/\n}\n```\n\nThe styles in the backticks are processed by the library and returns the component `Details` inside of the paragraph elements. Here, styled components gives us a `.p` transformation function. This function will return a component based on the `<p>` element and scope the classes using dynamic class names.\n\n```jsx\n{/*extract from ProductCard.jsx*/}\n{/*...code*/}\n\n<p>{product.baseDescription}</p>\n<p>${product.price.toFixed(2) || '0.00'}</p>\n\n{/*is equivalent to*/}\n\n<Details>{product.baseDescription}</Details>\n<Details>${product.price.toFixed(2) || '0.00'}</Details>\n\n{/*code continues...*/}\n```\n\nWe can also make Styled Components out of custom components. Instead of referencing any one of the transformation functions, we provide the component as an argument. We can then add styles in the same manner.\n\n```jsx\nconst StyledProductVariants = styled(Product)`\n  /*component styles*/\n`;\n```\n\n##### Making Classes Readable\n\nThe class names are generated dynamically by a process internal to the library. This can be a challenge when troubleshooting styles since the class names are unreadable hashes.\n\n![screen capture of main in html showing transformed classnames in sub-elements](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/html-main.png)\n\nWe can install the [Babel plugin for styled components](https://styled-components.com/docs/tooling#babel-plugin) for readable class names to aid in troubleshooting.\n\n```terminal\nnpm install --save-dev babel-plugin-styled-components\n```\n\nAfter installing the library, we register this plugin with Vite's React plugin inside `vite.config.js`.\n\n```js\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react({\n      babel: {\n        plugins: ['babel-plugin-styled-components'],\n      },\n    }),\n  ],\n  test: {\n    environment: 'jsdom',\n    globals: true,\n    setupFiles: './test.setup.js',\n  },\n});\n```\n\nThis results in 2 classes for each relevant component The first class name include the its component name and its parent component. There's still some additional hashing characters but it's now much easier to match elements to a particular component.\n\n![html screen capture showing component names in classes](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/styled-component-readable-class.png)\n\nThe styles are still applied through the randomly hashed class name but those can be matched to styles in your browser's elements tab:\n\n![showing class that applies styles in browser elements tab](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/styled-component-style-name.png)\n\nWriting styled components uses a nesting syntax similar to SCSS to keep keeps rules compact. In the example below, we add a `button` selector at the same level as the width, height, and display rules. Since \"button\" is not a css style, Styled Components treats this as a portion of a compound selector that targets buttons are found in the `ButtonWrapper` component. The rule applying to these buttons is then written in a nested block beside the compounded selector. We can include a `&` operator to target pseudo-selectors or optionally ensure that compound selectors apply across all instances of a component.\n\n```scss\n{/*extract from ProductCard.jsx*/}\n{/*...code*/}\nconst ButtonWrapper = styled.div`\n  width: 100%;\n  height: 4rem;\n  display: flex;\n  {/*this selector includes a space after the \"&\" */}\n  button {\n    border: none;\n    background-color: rgb(from var(--medium-blue) r g b / 0.5);\n    width: 100%;\n    &:hover {\n      background-color: rgb(from var(--medium-blue) r g b / 0.25);\n    }\n    &:active {\n      background-color: rgb(from var(--light-blue) r g b / 0.25);\n    }\n  }\n{/*code continues...*/}\n```\n\nIn the example above, we see that we can perform nesting on multiple levels. The resulting rules are then added to the application's styles.\n\n```css\n/*extract from the browser's elements console*/\n.kocZSi {\n    width: 100%;\n    height: 4rem;\n    display: flex;\n}\n\n.kocZSi button {\n    border: none;\n    background-color: rgb(from var(--medium-blue) r g b / 0.5);\n    width: 100%;\n\n.kocZSi button:hover {\n    background-color: rgb(from var(--medium-blue) r g b / 0.25);\n}\n\n.kocZSi button:active {\n    background-color: rgb(from var(--light-blue) r g b / 0.25);\n}\n/*code continues...*/\n```\n\nCSS Modules provides far more features than we use in CTD Swag and it's important to include one more in our conversation. Since this library returns components, it also has the ability to work with props. Can use these props to configure dynamic selectors and rules to meet a range of use cases. In the example below, we pass in \"blue\" to the `color` props in `SuccessModal`. That prop can then be referenced as an input for a function that sets the `color` property's value.\n\n```jsx\nimport styled from 'styled-components';\n//...component code\n\n<SuccessModalTitle color=\"blue\">Success Message</SuccessModalTitle>;\n\n//continued component code\n\nconst SuccessModalTitle = styled.h1`\n  color: ${(props) => props.color || 'green'};\n  font-size: 24px;\n  font-weight: bold;\n`;\n```",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b26d"
        },
        {
          "subsectionOrder": 3,
          "title": "Including Graphic Elements",
          "content": "CTD Swag usage imagery for the product previews, title and the shopping cart. Each of these can be categorized into content or UI element.\n\n![images highlighted on screen capture of CTD-Swag page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/images-highlighted.png)\n\n- content\n  - product preview image\n  - product placeholder image\n- ui element\n  - favicon\n  - CTD logo in the title\n  - shopping cart icon\n\nPictures are ubiquitous across the web and most React applications reflect this. When we think about imagery for an application, it is usually in terms of how it's used on a page. We can distill most uses down to 2 major use cases: page content or visual UI elements. We have several approaches to bringing imagery into our application to support our needs.\n\n#### The `/public` Directory\n\nThe first and easiest to embed the images into the project's code base. The React template that Vite uses provides two locations where we can place them: `/public` and `/assets`.\n\nThe `/public` directory is used for managing static assets. Generally, these files are used outside of the application such as the page's favicon or for any imagery that, for whatever reason, cannot be imported directly into a component. Vite will not make changes in any way to these files and serves them from the relative url, `/`, when the application is running locally. We can use sub-folders to keep assets organized.\n\nCTD-Swag currently uses this directory for the favicon for the site and all the project previews. CTD's imagery is here because they are only temporarily housed in the project. The images will eventually come from a live server so it makes more sense to access them via a relative path rather than import them.\n\n![screen capture showing image url for blue canvas bag](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/canvas-bag-blue.png)\n![screen capture of IDE showing canvas-blag-blue image in project directory](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/canvas-blag-blue-hilight.png)\n\n#### Static Assets\n\nVite uses `/assets` to house asset files that can be imported and provides us with some handy things under the hood. CTD Swag's product placeholder, logo, and shopping cart icon reside in this directory.\n\nThe placeholder image that we have been using is a fallback for the product image if it fails to load. Since it is not associated with a specific product, we keep it colocated with the rest of the codebase instead of fetching it from the back end's API.\n\nWhenever the image is imported from `assets`, Vite gives us a url that we can then use in our app.\n\n![screen capture in ide highlighting placeholder image import](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/placeholder-import.png)\n![screen capture of page html highlighting placeholder image URL](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-10/placeholder-src.png)\nIn production, Vite adds a short hash to each asset's file name which is useful for [cache invalidation](https://www.keycdn.com/support/what-is-cache-busting). Caching assets in the browser saves the user time and bandwidth but it makes updating them challenging. The easiest way to get an asset to load outside of cache is to change its name. Every time our application is re-built during production, our assets' filenames include a random hash which fools the browser into thinking it is a new file. Rather than serving `placeholder.png` each time the application is updated Vite may serve `placeholder.79c5eb7.png` and then update it to `placeholder.ed84551.png` when developer deploys a new version of the application to production.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b26e"
        }
      ]
    },
    {
      "id": "68d6a34a88b86b203f95b274",
      "lessonNumber": 11,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 11",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Retain the same UI behavior and functionality after the refactor.\n- Employ the reducer pattern to reduce state management complexity",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Plan Initial State and Actions",
            "description": "This week you will refactor the todo and loading states to use the reducer pattern. Although the assignment will give you all of the action types, there is still a lot of work that goes into transferring over the correct logic to the reducer. Use whatever techniques you are comfortable with to take working notes so you can keep track of what progress you made.\n\nAll of the migration work will be from the App component since that is where all the affected state is managed. You will be combining state for:\n\n- `todoList`\n- `isLoading`\n- `isSaving`\n- `errorMessage`\n\n#### State\n\n- Create a new directory, `src/reducers`\n- In that directory, create a new file named `todos.reducer.js`.\n- Declare an `initialState` constant and assign it an object.\n  - Add a property in this new object for each of the states you are going to combine.\n  - Assign them the values that were passed into `useState` for their initial value. (eg: `todoList: [],`).\n- Export `initialState` using a named export at the bottom of the file.\n\n#### Actions\n\n- Examine logic around related state update functions in the App component.\n  - Take note of:\n    - All locations where state values are used.\n    - All state update function references or invocations.\n    - Any logic whose sole purpose is to prepare a value passed to a state update function.\n    - Any co-located state update functions for intermediate state\n  - Remember optimistic and pessimistic strategies differ.\n- Use these notes to identify code passages that can be grouped into actions.\n- Compare the list of actions you came up with to the `actions` object below:\n\n```js\nconst actions = {\n    //actions in useEffect that loads todos\n    fetchTodos: 'fetchTodos',\n    loadTodos: 'loadTodos',\n    //found in useEffect and addTodo to handle failed requests\n    setLoadError: 'setLoadError',\n    //actions found in addTodo\n    startRequest: 'startRequest',\n    addTodo: 'addTodo',\n    endRequest: 'endRequest',\n    //found in helper functions \n    updateTodo: 'updateTodo',\n    completeTodo: 'completeTodo',\n    //reverts todos when requests fail\n    revertTodo: 'revertTodo',\n    //action on Dismiss Error button\n    clearError: 'clearError',\n};\n```\n\n- Add this `actions` object to the top of the `reducers.js` file.\n- Add `actions` to the file's named exports.",
            "codeExample": "```js\nconst actions = {\n    //actions in useEffect that loads todos\n    fetchTodos: 'fetchTodos',\n    loadTodos: 'loadTodos',\n    //found in useEffect and addTodo to handle failed requests\n    setLoadError: 'setLoadError',\n    //actions found in addTodo\n    startRequest: 'startRequest',\n    addTodo: 'addTodo',\n    endRequest: 'endRequest',\n    //found in helper functions \n    updateTodo: 'updateTodo',\n    completeTodo: 'completeTodo',\n    //reverts todos when requests fail\n    revertTodo: 'revertTodo',\n    //action on Dismiss Error button\n    clearError: 'clearError',\n};\n```",
            "_id": "68d6a34a88b86b203f95b279"
          },
          {
            "taskNumber": 2,
            "title": "Create Reducer",
            "description": "- Below `actions`, define a `reducer` function that takes in a `state` and an `action`.\n- Set the `state` parameter to equal `initialState`\n- In the body of the function, define switch/case statement that evaluates `action.type`\n- Add a `case` clause for each action in the actions object. Fore each clause:\n  - Return an object that contains the destructured `state`\n\nEach case should just return state unchanged. There is also no need to add a `break` statement since the clause returns a new state. Your reducer should look similar to the code below:\n\n```js\n// extract from todos.reducer.js\n//...code\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.fetchTodos:\n      return {\n        ...state,\n      };\n    case actions.loadTodos:\n      return {\n        ...state,\n      };****\n//code continues...\n```",
            "codeExample": "```js\n// extract from todos.reducer.js\n//...code\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.fetchTodos:\n      return {\n        ...state,\n      };\n    case actions.loadTodos:\n      return {\n        ...state,\n      };****\n//code continues...\n```",
            "_id": "68d6a34a88b86b203f95b27a"
          },
          {
            "taskNumber": 3,
            "title": "Duplicate State Logic to Reducer",
            "description": "> [!warning]\n> Commit progress into working branch! This will give you a good backup point in case you need to start over.\n\n#### useEffect (Pessimistic UI)\n\nRelated actions: `fetchTodos`, `loadTodos`, `setLoadError`.\n\n- In the reducer, update the `case` clause `actions.fetchTodos`\n  - Add the `isLoading` property to returned state object and set it to `true`.\n- Update `actions.loadTodos` clause:\n  - Move the logic that maps each record from `records` into a todo.\n  - Update the `...records.map` to use `...action.records.map`\n  - Update the returned state object:\n    - Add a `todoList` property and assign the resulting mapped array\n    - Add `isLoading` and set it to false.\n- Update the `actions.setLoadError` clause's state object:\n  - Add `errorMessage` using `action.error.message`\n  - Add `isLoading` set to `false`\n\n#### addTodo (Pessimistic UI)\n\nRelated actions: `startRequest`, `addTodo`, `endRequest`, `setLoadError`\n\n- Update the `actions.startRequest` clause's state object so that `isSaving` is `true`.\n- Update `actions.addTodo` clause:\n  - Copy over the logic that creates `savedTodo` and adds the `isCompleted` property when Airtable omits it from the record.\n  - Update the returned state object:\n    - Add a `todoList` property containing a new array destructuring `state.todoList` and `savedTodo`.\n    - Add `isSaving` set to `false`\n- Update the `actions.endRequest` clause's state to set `isLoading` and `isSaving` to `false`.\n- Update the `actions.setLoadError` clause's state:\n  - `errorMessage: action.error.message`\n  - `isLoading: false`\n\n#### updateTodo, completeTodo (Optimistic UI)\n\nRelated actions: `updateTodo`, `completeTodo`, `revertTodo`\n\n- Copy the logic that updates the todo to the `actions.updateTodo` clause.\n  - Use `action.editedTodo` wherever you used `updateTodo`'s argument.\n  - Create a `const updatedState = {}` and destructure `state` and `updatedTodos` into it.\n  - If there is an `error` property on the `action` object, add an `errorMessage` property onto `updatedTodos` set to `action.error.message`.\n  - At the end of the clause, return the updated state.\n- Copy the logic that completes a todo into `completeTodo` clause.\n  - Replace `id` with `action.id` wherever the original `completeTodo` uses its argument.\n  - Return the state with the `updatedTodos` destructured into the `todoList` property.\n- The logic for `revertTodo` should be the same as `updateTodo.\n  - If yes: make sure that the `revertTodo` case is written directly above `updateTodo` and remove the return statement. This will cause the action to fall through to the `updateTodo` case.\n  - If they differ, copy the logic over and apply the same update patterns that we have gone through several times.\n\n#### Dismiss Error Button\n\n- Update the `actions.clearError` clause to set the `errorMessage` to an empty string.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b27b"
          },
          {
            "taskNumber": 4,
            "title": "Implement useReducer",
            "description": "- Import and alias reducer code.\n\n```js\n// extract from App.jsx\n//...code\nimport {\n  reducer as todosReducer,\n  actions as todoActions,\n  initialState as initialTodosState,\n} from './reducers/todos.reducer';\n//code continues...\n```\n\n- Call `useReducer` using `todosReducer` and `initialTodoState`.\n  - Assign the state variable to `todoState` and the dispatch function to `dispatch`",
            "codeExample": "```js\n// extract from App.jsx\n//...code\nimport {\n  reducer as todosReducer,\n  actions as todoActions,\n  initialState as initialTodosState,\n} from './reducers/todos.reducer';\n//code continues...\n```",
            "_id": "68d6a34a88b86b203f95b27c"
          },
          {
            "taskNumber": 5,
            "title": "Replace State and Logic with Action Dispatches",
            "description": "For each action that was defined, you need to replace the state update logic in App with a dispatch. If you ended up with differing actions, make sure that you take that into account as you are making the shift over to dispatched actions.\n\n#### useEffect\n\nRelated actions: `fetchTodos`, `loadTodos`, `setLoadError`\n\n- Replace `setIsLoading` with a dispatch: `dispatch({ type: todoActions.fetchTodos });`\n- Replace `setTodoList` and the logic that maps records to todos with a dispatch:\n  - Set the type to `loadTodos`.\n  - Add the `records` to the action object.\n- In the `catch` block:\n  - Remove the `console.error` if you still have it.\n  - Replace `setErrorMessage` with a dispatch for `setLoadError`. Include the `error` on the action object.\n\n#### addTodo\n\nRelated actions: `startRequest`, `addTodo`, `endRequest`, `setLoadError`\n\n- Replace `setIsSaving` with a dispatch that sets `todoState.isSaving` to true.\n- Replace `savedTodo` and `setTodoList` with a dispatch `addTodo` and include `records` in the action object.\n- Replace `setErrorMessage` and include the `error` on the dispatched action object.\n- Replace `setIsSaving` with a dispatch that sets `todoState.isSaving` to false.\n\n#### updateTodo, completeTodo\n\nRelated actions: `updateTodo`, `completeTodo`, `revertTodo`\n\n- Replace `updatedTodos` and `setTodoList` with a dispatch to update the todo. Include the `editedTodo` on the action object.\n- Remove the unneeded logic that updates the todo list with the updated todo. Hint: since updating a todo is an optimistic process, you do not have to do anything with the API response unless it includes an error.\n- In the `catch block` dispatch a `revertTodo` that includes the `originalTodo`.\n- Swap out state logic in `completeTodo` on your own.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b27d"
          },
          {
            "taskNumber": 6,
            "title": "Update References to State",
            "description": "- Replace all references to the old state to use the new `todoListState`. Eg: `<TodoForm onAddTodo={addTodo} isSaving={todoState.isSaving} />`\n- Replace the state update function on the button's click handler to dispatch a `clearError` action instead of calling `setErrorMessage('').",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b27e"
          },
          {
            "taskNumber": 7,
            "title": "Test Functionality",
            "description": "- Make sure your project starts without errors.\n- Test app functionality:\n  - [ ] Can you add a new todo? Does the new todo appear after it's saved to the API?\n  - [ ] Can you edit an existing todo? Does it retain its edit after you refresh the page?\n  - [ ] Can you complete a todo? Does is disappear from the page? Does it remain completed after you refresh the page?\n  - [ ] Can you sort the todos? Filter them?\n  - [ ] If you introduce a misspelling to the API's URL, do you get the expected errors from each user action?\n  - [ ] If you misspell your personal access token (restart the app every time you change your environment file) do you get the expected errors?\n\n### Stretch Goal(optional): Refactor Remaining App-maintained State\n\nThe remaining state in App deals with the URL's query params. For additional practice, migrate the remaining state to the reducer that you've already created.\n\n```jsx\n//remaining state in App:\nconst [sortDirection, setSortDirection] = useState('desc');\nconst [sortField, setSortField] = useState('createdTime');\nconst [queryString, setQueryString] = useState('');\n```\n\n- Plan initial states and actions.\n- Update `intialState`\n- Add identified actions to actions object and add cases to reducer.\n- Duplicate over any logic that prepares state updates.\n- Replace state updates with action dispatches.\n- Removed unused code.\n\n### Closing Notes\n\nNext week we will be looking at React-Router and the advantages of being able to emulate browser navigation inside of an SPA.",
            "codeExample": "```jsx\n//remaining state in App:\nconst [sortDirection, setSortDirection] = useState('desc');\nconst [sortField, setSortField] = useState('createdTime');\nconst [queryString, setQueryString] = useState('');\n```",
            "_id": "68d6a34a88b86b203f95b27f"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b275"
        },
        {
          "subsectionOrder": 2,
          "title": "Advanced State",
          "content": "As an application grows, so too does the state that is needed to represent the UI. Adding more data or interactivity leads to an increasing number of state updates to orchestrate. Without careful management of state changes, troubleshooting interface bugs becomes challenging and increases the likeliness that a new feature may introduce bugs.\n\nCTD Swag is starting to show signs of this problem, which can be identified by the quantity of `useState`'s found in any one component. Consider the `App` component:\n\n```jsx\n{/*extract from App.js*/}\n{/*...code*/}\nfunction App() {\n  const [inventory, setInventory] = useState([]);\n  const [filteredInventory, setFilteredInventory] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [isCartSyncing, setIsCartSyncing] = useState(false);\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n  const [user, setUser] = useState({});\n  const [authError, setAuthError] = useState('');\n  const [cartError, setCartError] = useState('');\n  const [cartItemError, setCartItemError] = useState('');\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [isSortAscending, setIsSortAscending] = useState(true);\n  const [sortBy, setSortBy] = useState('baseName');\n  const [searchTerm, setSearchTerm] = useState('');\n{/*code continues...*/}\n```\n\nAll of the state update functions listed above are referenced at least once somewhere in the component. Many are found in two places. `setIsAuthenticating` is called in five locations!\n\n![IDE screen shot with all instances of setIsAuthenticating highlighted](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/set-is-auth-hilighted.png)\n\n`setIsAuthenticating` is found only in two event handlers, but but state update functions are also used in `useEffect`s and passed in props to child components. You can see how it can be easy to lose track of state!\n\n#### The Reducer Pattern\n\nThe reducer pattern changes our approach to coordinating state updates in complex applications. In a broader software engineering context, a \"reducer\" is a design pattern that communicates events to a centralized function that performs all of the state updates in an app. It consists 3 key elements that work in concert to make state updates.\n\n- **reducer function**: centralizes the logic needed to return updated state based on an `action` passed to it\n- **action**: data that contains details that reducer uses to make state updates. It can of any data type, but it's most commonly an object containing a `type` and an optional `value` property.\n- **dispatch function**: used to dispatch(as in _send_, not _kill_) an action to the reducer function.\n\n```javascript\n//example reducer and dispatches\n\n//reducer accepts the current state and an action object\n//it outputs an updated state value for us to use\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      return { ...state, count: state.count + 1 };\n    case 'decrement':\n      return { ...state, count: state.count - 1 };\n    case 'add':\n      return { ...state, count: state.count + action.value };\n    case 'reset':\n      return { ...state, count: 0 };\n    default:\n      return state;\n  }\n};\n//dispatch containing an action object that adds 1\ndispatch({ type: 'increment' });\n\n//action objects can also be written outside dispatch\nconst decrement = {\n  state,\n  type: 'decrement',\n};\ndispatch(decrement);\n\n//we can provide extra data for the reducer\n//to compute the output value\nconst add5 = {\n  state,\n  type: 'add',\n  value: 5,\n};\n\ndispatch(add5);\n\ndispatch({ type: 'reset' });\n```\n\n> [!note]\n> The code example above is non-functional but illustrates how those 3 elements work together. For CTD-Swag, we will be using the `useReducer` hook to help wire these to our app's state.\n\n#### Inversion of Control\n\nUp until now, we have focused on making state updates by processing events inside of event handlers and helper functions For example when a user adds a product to the cart:\n\n1. user clicks button \"Add to Cart\"\n2. the click event executes an event handler which:\n   1. retrieves relevant data from state and the event\n   2. transforms or creates a new value for next state\n   3. calls a state update function with the state's next value\n3. the state update function starts a render cycle which:\n   1. replaces old state value with the update provided\n   2. re-renders interface using new value\n\nWhen working with reducers, it helps to shift perspectives from \"what event just happened\" to \"what a user just did\". This is referred to as [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control). Continuing with the example above, rather than thinking **\"the user clicked on the 'Add to Cart' button on a product card representing the bucket hat\"**, our new thought process would be **\"the user added a bucket hat to their cart\"**. This statement is much simpler than the first. It reflects that the component only needs to know that a user performed an action. The reducer function, which exists independently of the component, is responsible for adding the bucket hat to the cart state. Our event handlers' only responsibility for state updates is to communicate the details of the action to the reducer. We'll continue to explore the reducer pattern but need to learn a little about the `useReducer` hook first.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b276"
        },
        {
          "subsectionOrder": 3,
          "title": "Manage State with useReducer",
          "content": "The `useReducer` hook adapts the reducer pattern for use in React applications. Just like other hooks, it must be called at the top level of the component. React attempts to batch state changes so that if several happen in succession, they are all processed during the same render cycle. React also compares the reducer's output to its previous state - if nothing changes, it does not initiate a re-render.\n\n`useReducer` takes a reducer function and an initial state value when called. It outputs a state value and a dispatch function which are assigned similar to `useEffect`.\n\n```js\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\nReducer functions and the initial state values tend to be more complex than the arguments than a `useState` hook. The reducer function also works independently from any component: it reads no values from inside the component directly. Because of these factors we will place these in a separate file to keep the component's size to a minimum.\n\nFor this discussion, we will implement the reducer pattern on cart's state. We create a file `cart.reducer.js` and place it into a `/reducers` folder created under `/src`. It's helpful to drop the \"x\" from the filename's extension since it will not contain any React-specific code or JSX. This will tell us, at a glance that it is not component code without having to open the file up. After creating the new file, we when need to identify the relevant `useState`s:\n\n![ide screenshot highlighting cart state](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/cart-state-hilighted.png)\n\nThe `useState`s highlighted above all manage some aspect of state related to the cart. From this list, we can determine `initialState`:\n\n```js\n// extract from cart.reducer.js\nconst initialState = {\n  cart: [],\n  isCartOpen: false,\n  isCartSyncing: false,\n  //for the sake of simplicity here, we combine cartError and cartItemError\n  error: '',\n};\n//code continues...\n```\n\nWe then create a reducer that returns the state for now.\n\n```js\n// extract from cart.reducer.js\n//...code\nfunction reducer(state, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nexport { initialState, reducer };\n```\n\nWe will add `case` statements for each of the actions we identify to organize the state logic. `switch/case` flow control is easier to read than `if/else` statements so is usually preferred. Reducer functions tend to grow quite long.\n\nWe then import the initial value and the reducer into `App.js` and add them to a `useReducer` hook:\n\n```jsx\n{\n  /*extract from App.jsx*/\n}\n{\n  /*...code*/\n}\nimport {\n  //aliasing with `as` keeps the reducer and state easily identifiable\n  initialState as cartInitialState,\n  reducer as cartReducer,\n} from './reducers/App/cart.reducer';\n\n{\n  /*...unrelated code...*/\n}\n\nconst [cartState, dispatch] = useReducer(cartReducer, cartInitialState);\n{\n  /*code continues...*/\n}\n```\n\nNext, we'll find places where `isCartOpen` is used and determine how argument is created. In some cases, it's a direct value that is passed in. In other cases, our event handlers and helper functions calculate that value. Using VS Code's file search we can find 3 instances to `setIsCardOpen`.\n\n![ide file search result numbers for setIsCartOpen](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/is-cart-open-search.png)\n\nThe first location is in `useState` so we do not need to worry about that for now. The second one is in a handler function that closes the cart and the final on is in the Header instance:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n function handleCloseCart() {\n  {/*used here*/}\n     setIsCartOpen(false);\n     setAuthError('');\n }\n/*...unrelated code...*/\n <Header\n  cart={cart}\n  {/*used here*/}\n  handleOpenCart={() => setIsCartOpen(true)}\n  handleOpenAuthDialog={handleOpenAuthDialog}\n  handleLogOut={handleLogOut}\n  user={user}\n    />\n{/*code continues...*/}\n```\n\nThey **close** and **open** the cart respectively. These actions will be the basis of the action objects the we eventually write. Both locations set the boolean value directly so we don't have any state logic to move over to the reducer other than updating those values.\n\nWe add a `case` statement for each of these actions to the reducer. From each we return a new object that spreads the original `state` and a new value for the `isCartOpen` property.\n\n```js\n// extract from cart.reducer.js\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    case \"open\":\n      return {\n        ...state,\n        isCartOpen: true,\n      };\n    case \"close\":\n      return {\n        ...state,\n        isCartOpen: false,\n      };\n    default:\n   return state;\n//...code\n//code continues...\n```\n\nBefore removing any state update function, we can place the dispatch along side it if we need to do any troubleshooting. We can the log the reducer's output to ensure the action's `case` block functions as expected.\n\nRecall that the dispatch function takes an `action`. This can be of any type (string, object, number, etc.) but by convention, we stick with objects containing a `type` property to identify the action and add properties as needed. The actions that our reducer will receive for the cart actions resemble:\n\n```javascript\nconst open = { value: 'open' };\nconst close = { value: 'close' };\n```\n\nWhen we are happy with how the `case` blocks work in the reducer, we can then update all `isCartOpen` references with `cartState.isCartOpen` to migrate to the updated state.\n\nWe then update each `isCartSyncing` with `cartState.isCartSyncing` to use the state our `useReducer` returns.\n\n```jsx\n{\n  /*extract from */\n}\n{\n  /*...code*/\n}\n{\n  cartState.isCartOpen && (\n    <Cart\n      cartError={cartError}\n      isCartSyncing={isCartSyncing}\n      cart={cart}\n      handleSyncCart={handleSyncCart}\n      handleCloseCart={handleCloseCart}\n    />\n  );\n}\n{\n  /*code continues...*/\n}\n```\n\nAfter completing these updates, our cart behaves the same but that state is now fully managed by the reducer.\n\n![animated screen capture highlighting isCartOpen as UI is manipulated](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/is-cart-open-state.gif)\n\nWe are now left with 5 more `useStates` to refactor.\n\n```javascript\nconst [cart, setCart] = useState([]);\nconst [isCartOpen, setIsCartOpen] = useState(false); //DONE\nconst [isCartSyncing, setIsCartSyncing] = useState(false);\nconst [cartError, setCartError] = useState('');\nconst [cartItemError, setCartItemError] = useState('');\n```\n\nBesides `cart`, each other state value update employs the same complexity as `isCartOpen`. We'll refactor these without discussion so we can then explore how we identify actions and refactor the state updating logic over to our reducer.\n\nRefactoring `cart` is the most complex because of the differing ways that the user interacts with the contents of their cart. I`setCart` is referenced in 7 places in `App.jsx` excluding the `useEffect`\n\n- 1 time in `handleAuthenticate`\n  - when a user logs in and has a saved cart, `setCart` receives `userData.cartItems` from the API response\n- 2 times in `handleSyncCart`\n  - when a user is not logged in and they confirm a cart change, `setCart` receives `workingCart`\n  - when a user is logged in and they confirm a cart change, `setCart` receives the `cartData` from the API\n- 3 times in `handleAddItemToCart` (this is the most complex set of uses since we used an optimistic approach to managing `cart` state)\n  - when a user adds an item the event handler:\n    - it finds if there's a matching item in the cart.\n      - if yes, it creates a duplicate cart item then increments the matching item quantity\n      - if no, it creates a new cart item with a quantity of 1\n    - it then calls `setState` with an array which includes the newest item\n    - if an API response fails, the cart item is reverted to:\n      - previous value if it has a quantity greater than one or\n      - removes it if its quantity is 1\n- 1 time in `handleLogOut`\n  - `setCart` receives an empty array to empty the cart\n\nWe can distill this list into two actions: **\"add item\"** and **\"update cart\"**\n\n- A user logs in and they have a saved cart that is loaded: **\"update cart\"**\n- A user modifies item counts in the cart: **\"update cart\"**\n- A user adds an item to their cart: **\"add item\"**\n- A user logs out which empties the cart: **\"update cart\"**\n\n\"add item\" ends up being the more complex of the two because of the data manipulation required to make cart items out of products in the product list. We will take care of \"update cart\" first since it operates on the whole cart and, as a result, has less supporting logic.\n\nIn each occasion where we plan on using the \"update cart\" action, the reducer is going to receive an action object with a cart value that replaces the existing cart. In each of the areas where we use this action, we are going to pass an updated cart received from the API or when a user confirms a cart edit.\n\nWe'll update the cart reducer to include a `case` for \"update cart\" and add in the logic that returns the new cart value we will place into the action object.\n\n```js\n// extract from cart.reducer.js\n//...code\nfunction CartReducer(state, action){\n switch(action.type) {\n  case \"open\":\n      return {\n          ...state,\n          isCartOpen: true,\n      };\n  }\n//code continues...\n  case \"update\"\n\n}\n```\n\nWe can then go back to the codebase and replace the `setCart`s where we intend on dispatching the \"update cart\" action. You can also see the other dispatches that have already been placed in `handleSyncCart` and `handleAuthenticate` to deal with other aspects of cart state.\n\n```jsx\n//extract from App.jsx\n//...code\nconst handleSyncCart = useCallback(\n  async (workingCart) => {\n    if (!user.id) {\n      //dispatch replaces setCart here\n      dispatch({ type: 'update cart', cart: workingCart });\n      return;\n    }\n    dispatch({ type: 'sync' });\n    const options = {\n      method: 'PATCH',\n      body: JSON.stringify({ cartItems: workingCart }),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${user.token}`,\n      },\n    };\n    try {\n      const resp = await fetch(`${baseUrl}/cart`, options);\n      if (!resp.ok) {\n        console.log('resp not okay');\n        if (resp.status === 401) {\n          throw new Error('Not authorized. Please log in.');\n        }\n      }\n      const cartData = await resp.json();\n      if (cartData.error) {\n        throw new Error(cartData.error);\n      }\n      //dispatch replaces setCart here\n      dispatch({ type: 'update cart', cart: cartData });\n    } catch (error) {\n      console.error(error);\n      dispatch({ type: 'error', error: error.message });\n    } finally {\n      dispatch({ type: 'not syncing' });\n    }\n  },\n  [user.id, user.token, dispatch],\n);\n//code continues...\nasync function handleAuthenticate(credentials) {\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n    headers: { 'Content-Type': 'application/json' },\n  };\n  try {\n    setIsAuthenticating(true);\n    const resp = await fetch(`${baseUrl}/auth/login`, options);\n    if (!resp.ok) {\n      if (resp.status === 401) {\n        setAuthError('email or password incorrect');\n      }\n      throw new Error(resp.status);\n    }\n    const userData = await resp.json();\n    setUser({ ...userData.user, token: userData.token });\n    dispatch({\n      type: 'update cart',\n      cart: userData.cartItems,\n    });\n    setAuthError('');\n    setIsAuthenticating(false);\n    setIsAuthDialogOpen(false);\n  } catch (error) {\n    setIsAuthenticating(false);\n    console.log(error.message);\n  }\n}\n//code continues...\n```\n\nWe then have to determine the logic for the \"add item\" action. The first challenge is that the logic filters through the inventory list to ensure the item exists before making a new cart item or incrementing the quantity on an existing cart item. Since our reducer exists independently from the App component, we need to include the inventory on the action object.\n\nWith this in mind, we can move over the logic and update any `inventory` references to `action.inventory` and create a return value that reflects the updated state:\n\n```js\n// extract from cart.reducer.js\n//...code\n case cartActions.addItem: {\n      const inventoryItem = action.inventory.find(\n        (item) => item.id === action.id\n      );\n      if (!inventoryItem) {\n        return state;\n      }\n      const itemToUpdate = state.cart.find(\n        (item) => item.productId === action.id\n      );\n      let updatedCartItem;\n      if (itemToUpdate) {\n        updatedCartItem = {\n          ...itemToUpdate,\n          quantity: itemToUpdate.quantity + 1,\n        };\n      } else {\n        updatedCartItem = {\n          ...inventoryItem,\n          quantity: 1,\n          productId: inventoryItem.id,\n        };\n      }\n      return {\n        ...state,\n        cart: [\n          ...state.cart.filter((item) => item.productId !== action.id),\n          updatedCartItem,\n        ],\n      };\n    }\n//code continues...\n```\n\nAlmost done! Now we have to back to the App component and change all `cart` references to `cartState.cart`. These are found as props given to the Header component and the Cart component:\n\n```jsx\n{\n  /*extract from App.jsx*/\n}\n{\n  /*...code*/\n}\n<Header\n  cart={cartState.cart}\n  handleOpenCart={() => dispatch({ type: 'open' })}\n  handleOpenAuthDialog={handleOpenAuthDialog}\n  handleLogOut={handleLogOut}\n  user={user}\n/>;\n{\n  /*...code...*/\n}\n{\n  cartState.isCartOpen && (\n    <Cart\n      cartError={cartState.error}\n      isCartSyncing={cartState.isCartSyncing}\n      cart={cartState.cart}\n      handleSyncCart={handleSyncCart}\n      handleCloseCart={handleCloseCart}\n    />\n  );\n}\n{\n  /*code continues...*/\n}\n```\n\nAfter these changes, our cart behaves as it did previously, but all of its state is now managed by the reducer. Because the reducer, dispatch function and the action are so tightly coupled, the reducer function is probably one of the most complex things we have covered so far. While it is harder to employ, it is far easier to manage complex state this way than relying on numerous `useState`s and we also end up with a much more compact function.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b277"
        },
        {
          "subsectionOrder": 4,
          "title": "Passing Data Using useContext",
          "content": "Managing state used by several components is a fundamental aspect of building interactive IUs. React's `useContext` hook simplifies the flow of shared state across deeply nested components. We'll refactor a demo app, named MultiCalc, to take advantage of `useContext`.\n\n#### MultiCalc's State\n\nMultiCalc performs 4 pre-defined calculations on an operand that a user inputs:\n\n![Interface for MultiCalc](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/multicalc-interface.gif)\n\nHere is the app structure with state flow:\n\n```mermaid\n---\ntitle: MultiCalc Components With State\n---\n\nflowchart TD\n    A[App] <-- operand--> FW[FormWrapper]\n    A -- operand--> CW[CalculatorWrapper]\n    FW <-- operand--> F[Form]\n    CW -- operand--> Calc[Calculator]\n    Calc -- plus 1--> C1[Calculation 1]\n    Calc --cubed--> C2[Calculation 2]\n    Calc --times 3--> C3[Calculation 3]\n    Calc --square root--> C4[Calculation 4]\n```\n\nThe `operand` state has been hoisted up to `App` because it needs to be available to `Form` and `Calculator`. `Form` is a controlled form so manages its working state based on `operand`. When a user hits the submit button, it calls `setOperand` and passes `Form`'s working state to update `operand`. On the other side of the component tree, the `Calculator` component consumes `operand` to calculate each of the results that are passed down to each `Calculation` component.\n\n#### The Problem\n\nWe can see from the diagram above that there are two components, `FormWrapper` and `CalculatorWrapper`, that stand between `Form` and `Calculator`, and `App`. A look at these components' code reveals that `operand` and `setOperand` are being passed through without being read:\n\n```jsx\n{/*FormWrapper.jsx*/}\nimport Form from './Form';\n\nfunction FormWrapper({ operand, setOperand }) {\n  return (\n    <>\n      <Form operand={operand} setOperand={setOperand} />\n      <hr />\n    </>\n  );\n}\n\n{/*code continues...*/}\n```\n\n```jsx\n{/*CalculatorWrapper*/}\nimport Calculator from './Calculator';\n\nfunction CalculatorWrapper({ operand }) {\n  return (\n    <>\n      <h2>Calculations</h2>\n      <Calculator operand={operand} />\n    </>\n  );\n}\n\nexport default CalculatorWrapper;\n\n{/*code continues...*/}\n```\n\nNot using props, other than to pass it to a child component, is called [props drilling](https://react.dev/learn/passing-data-deeply-with-context#the-problem-with-passing-props). Excessive prop drilling can lead to harder to write components and difficulty while troubleshooting state.\n\n#### Context to the Rescue\n\nWhen we employ `useContext`, we are accessing a \"context\" shared across a portion of the component tree. Context refers to a state that can be shared among multiple components in a React application. This allows data to be passed directly from an ancestor component through the component tree without having to explicitly pass props at every level.\n\nLike the `useReducer` hook we have some additional set up to perform before we can use this hook. Before doing so, lets look at the three items that are needed to set up and use context.\n\n1. `createContext`\n2. `context` object\n3. `useContext`\n\n#### `createContext`\n\n`createContext` must be called outside of a component to create the context object. The function takes an optional `defaultValue` that can be of any type - string, number, object, etc. This acts is a fallback value for the context where there is no matching provider (more on \"Provider next...) anywhere in a component's tree. It is a best practice to call it `null` rather than leave the argument empty.\n\nInvoking `createContext` outputs a `context` object. This object is exported so it can be used in other components. We can create the context in a component's file but in larger applications, context usually created in a dedicated `/context` directory, similar to how reducers have a `/reducers` directory. The example below shows how `createContext` is used to create a context, `ExampleContext`.\n\n```jsx\nimport { createContext } from 'react';\n\nexport const ExampleContext = createContext(null);\n```\n\n#### `context` Object\n\nThis object represents the context that will be used. This object has two properties that we work with: A `Provider` component and a `Consumer` component. The `Provider` component is used in a parent component to set the value for the context that is shared with its children. `Provider` takes a `value` prop and children. With this Provider in place, the context value is set to 42 which is \"globally available\" to any component nested within it regardless of how far down the tree.\n\n```JSX\nimport {createContext} from 'react';\nimport {ChildComponent} from './ChildComponent'\n\nexport const ExampleContext = createContext(0);\n\nfunction App(){\n    return(\n        <ExampleContext.Provider value={42} >\n            <ChildComponent />\n        </ExampleContext.Provider>\n    )\n}\n```\n\nThe context object's other component `Consumer` provides a different approach to working with `context` but is rarely ever used so we will not be covering it.\n\n#### `useContext`\n\nWith `useContext`, ancestor components can access and update this shared global state. The hook takes in the the context that was created by `createContext` and returns the context's `value` when called.\n\n```jsx\nimport {useContext} from `react`;\nimport {ExampleContext} from `./ExampleComponent`;\n\nfunction GreatGrandChildComponent(){\n\nconst exampleValue = useContext(ExampleContext);\n\nreturn(\n    <div>\n        <p>{exampleValue}</p> {/* 42 until parent updates state*/}\n    </div>\n)\n}\n```\n\nWith those parts out of the way, [React's documentation suggests](https://react.dev/learn/passing-data-deeply-with-context) that we think about implementing context in three steps:\n\n1. **Create** a context object\n2. **Use** the context with `useContext` to replace props that were passed down from component managing state\n3. **Provide** context wrapping children with Provider and passing a `value` props that the parent still manages\n\n#### `useContext` in Action\n\n##### Create a Context\n\nFor MultiCalc, we'll create an `OperandContext` above the App component. We'll call it with `null` since the context does not have any meaningful value outside of its use to manage `operand` state.\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nexport const OperandContext = createContext(null);\n\nfunction App() {\n    const [operand, setOperand] = useState(0);\n{/*code continues...*/}\n```\n\n``\nIf ESLint is configured, our IDE will warn us that Vite's fast-refresh doesn't work with component files that include named exports. We can ignore that yellow squiggle. This is a performance consideration that should be addressed in a real-world project but we will not worry about it here.\n\n![ESLint warning that named exports prevent hot-reload](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/eslint-fast-refresh-warning.png)\n\n##### Use the Context\n\nThe Form component will need `operand` and `setOperand`. We start by importing `OperandContext` from App.jsx and calling `useContext` with `OperandContext` as the argument. We know we are going to place both the state and state updater function into context's value so can use destructuring when assigning our values. `const { operand, setOperand } = useContext(OperandContext)`. We can then treat these values as drop-in replacements for the props that were on the component and remove them from `Form` and `FormWrapper`.\n\n```jsx\n{/*extract from Form.jsx*/}\nimport { useState, useEffect, useContext } from 'react';\nimport { OperandContext } from './App';\n\n// props { operand, setOperand } have been removed\nfunction Form() {\n\n    const { operand, setOperand } = useContext(OperandContext);\n    const [workingOperand, setWorkingOperand] = useState(0);\n\n    useEffect(() => {\n        setWorkingOperand(operand);\n    }, [operand]);\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (workingOperand != '') {\n          setOperand(parseFloat(workingOperand));\n        }\n    }\n    return (\n        <form>\n            <label htmlFor=\"value\">Calculate with: </label>\n            <input\n            type=\"number\"\n            id=\"value\"\n            value={workingOperand}\n            onChange={(e) => setWorkingOperand(e.target.value)}\n            />\n            <button onClick={handleSubmit} disabled={workingOperand === ''}>\n                Submit\n            </button>\n        </form>\n    );\n}\n\nexport default Form;\n```\n\nWe can also remove the props from `<FormWrapper />`.\n\n```jsx\n{/*extract FormWrapper.jsx*/}\nimport Form from './Form';\n\n//props no longer needed!\nfunction FormWrapper() {\n    return (\n        <>\n            <Form />\n            <hr />\n        </>\n    );\n}\nexport default FormWrapper;\n```\n\n##### Provide the Context\n\nAt this point, the form will not work until we provide the context. We place an instance of `OperandContext.Provider` in App's markup then nest the children components in between its tags. We finally pass the state App is managing to the provider's `value` props. Conventions on how to form the context's value vary but be sure to keep it consistent across a codebase.\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nfunction App() {\n    const [operand, setOperand] = useState(0);\n    \n    return (\n        <main>\n            <h1>MultiCalc</h1>\n            <OperandContext.Provider value={{ operand, setOperand }}>\n                <FormWrapper />\n            </OperandContext.Provider>\n            <CalculatorWrapper operand={operand} />\n        </main>\n    );\n}\n{/*code continues...*/}\n```\n\nNow that the form works again, we can go through the same steps to use context in the `Calculator` component. We import the context from App and then invoke `useContext` with it. We don't need `setOperand` so we only destructure out `operand` from the `useContext`'s return value. We can then remove the props from it and it's parent component, `CalculatorWrapper`.\n\n```jsx\n{/*extract from Calculator.jsx*/}\n{/*...code*/}\nfunction Calculator() {\n    const { operand } = useContext(OperandContext);\n{/*code continues...*/}\n```\n\n```jsx\n{/*CalculatorWrapper.jsx*/}\nimport Calculator from './Calculator';\n\nfunction CalculatorWrapper() {\nreturn (\n    <>\n        <h2>Calculations</h2>\n        <Calculator />\n    </>\n);\n}\n\nexport default CalculatorWrapper;\n```\n\nMultiCalc is now working with the context provided in App. React's developer tools reflect this change, showing `Context.Provider` in the component hierarchy.\n\n![React dev tools showing the provider, its value, and children](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/devtools-context-provider.png)\n\nThe dev tools also show that Form and Calculator are both using the `useContext` hook.\n\n![React dev tools showing the provider, its value, and children](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-11/devtools-form-component.png)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b278"
        }
      ]
    },
    {
      "id": "68d6a34a88b86b203f95b281",
      "lessonNumber": 12,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 12",
        "objective": "## Weekly Assignment Instructions\n\n### Expected App Capabilities\n\nAfter completing this week's assignment, your app should:\n\n- Use React-Router\n- Have a personalized about page\n- Paginate the todo list when it's long",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Implement React-Router",
            "description": "- Install React-Router into the project using the terminal: `npm install react-router`\n- In main.jsx, wrap the App instance with BrowserRouter imported from react-router.\n\n#### Refactor App\n\nYou will be moving all of the todo-related components to a TodosPage component. You will also replace the heading element in app with a Header component that includes a heading and navigation links.\n\n##### TodosPage\n\n- Create a new component, TodosPage, in `src/pages`\n- Refactor all Todo-related component instances in App.jsx to TodosPage.\n  - Move instances of `TodoForm`, `TodoList`, and `TodosViewForm` from App to TodosPage.\n  - Destructure all the props needed form TodoForm, TodoList, and TodosViewForm from the TodosPage component definition.\n    - `todoState` properties can be used for all `todoState` properties when passing props into `<TodosPage />`\n  - Pass on appropriate props to each component instance.\n- In App, add an instance of `TodoPage` to replace the `TodoForm`, `TodoList`, and `TodosViewForm` instances.\n- Add the appropriate props to `TodosPage` instance.\n\n##### Header and Nav\n\n- Create a Header component in `src/shared` to replace the `h1` element in App. Include:\n  - An `h1` that takes in a `title` props and add props to component definition.\n  - A `<nav></nav>` element that contains:\n    - 2 `NavLink` component instances from the React-Router library.\n      - \"Home\": `to:{\"/\"}`\n      - \"About\": `to:{\"/about\"}`\n    - Give each `NavLink` instance a `className` props based on the truthiness of the `isActive` property on `NavLink`:\n      - In the `className` props, construct an anonymous function:\n        - Destructure `isActive` out of the object this function receives from `NavLink`\n        - It should look something like; `className={({ isActive }) =>{ code continues...`\n        - if `isActive` is true, return `\"active\"`\n        - if false, return `\"inactive\"`\n  - Style the component using CSS Modules:\n    - Update `\"active\"` to `styles.active`: Add a class rule that sets a subdued color compared to your surrounding text. (eg: if using black text on page, set to a grayish color)\n    - Update `\"inactive\"` to `styles.inactive`: Use your primary text color.\n    - Center the `h1`.\n    - Update `nav` styles so that the NavLinks sit side-by-side in the `nav` element.\n    - Position the `nav` in the upper-right corner of the screen. It should not affect the `h1`'s position.\n- Move to App and replace the `h1` element with an instance of the Header component.\n- Import `useLocation` from React-Router and assign its return value to `const location`.\n- Create a `useEffect` that sets the title based on `location.pathname`:\n  - `\"/\"`: \"Todo List\"\n  - `\"/about\"`: \"About\"\n  - `else`: \"Not Found\"\n- Add `location` to the `useEffect`'s dependency array.\n- Confirm app works.\n\n##### Route and Routes Components\n\n- In App, add a `Routes` instance containing 3 `Route` instances.The props for each `Route` is provided below:\n  - `path=\"/\" element={<TodosPage>}` (copy/paste in the existing TodosPage with all the props already added)\n  - `path=\"/about\": element = {<h1>About</h1>}`\n  - `path=\"/\\*\": element = {<h1>Not Found</h1>`}\n- Confirm your app works.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b285"
          },
          {
            "taskNumber": 2,
            "title": "About Page and Not Found Page",
            "description": "#### About Page\n\n- Create a new component, `About`, in `src/pages`\n  - The component should return 1 or more paragraphs including information about the app and optionally the author.\n  - Feel free to include whatever other information you want. (author info, credits, etc.)\n- Import into `App` and replace the h1 element in the `\"/about\"` `Route`.\n- Create a new component, `NotFound`, in `src/pages`\n  - The component should display a \"page not found\" message and a `Link` to navigate back home.\n- Import into `App` and replace the h1 element in the wildcard route with an instance of `NotFound`.\n\nAt this point, the updated app should allow the user to navigate between the todo list and about page. It should also display the \"Not Found\" page for any pathname that doesn't match those defined in the first 2 Route components.\n![User navigating between home and about pages](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-12/nav-home-to-about.gif)",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b286"
          },
          {
            "taskNumber": 3,
            "title": "Paginate Todo List",
            "description": "You will be setting up pagination for your todo list. Unlike the pagination in the lesson, this exercise will tie the todo list pagination into React-Router's functionality using URL parameters.\n\n#### Pagination Calculations\n\n- Import `useSearchParams` hook from React-Router\n- Call hook and assign the return values: `const [searchParams, setSearchParams] = useSearchParams();`\n- Create a constant `itemsPerPage` and set it to 15.\n- Create a constant `currentPage` and assign it the numerical value the 'page' param in the URL\n  - Use `searchParams.get('page')` to retrieve that params value from the URL. You will have to use `parseInt` on that value since params are always returned as strings.\n  - If `searchParams` does not retrieve anything because the params doesn't exist in the URL, default to the value `1`\n  - It should look like: `const currentPage = parseInt(searchParams.get('page') || '1', 10);`\n- Create a constant `indexOfFirstTodo` that calculates the value based off the page's index (`currentPage` - 1) multiplied by the items on each page.\n- Calculate `totalPages` by dividing the `filteredTodoList` length by the items per page. Round up using `Math.ceil` since the last page may contain less than 15 todos.\n\n#### Navigation UI and Handlers\n\n- Create a div with a class \"paginationControls\" below the unordered list to contain the pagination controls.\n  - Add a button containing the text \"Previous\"\n  - Add a button containing the text \"Next\"\n  - Between the buttons, add a span that contains the text: `Page {currentPage} of {totalPages}`\n  - Add any styling needed to the div so that the buttons and span line up horizontally and line up neatly with the rest of the interface.\n\nExample of how the buttons and span may look:\n\n![Navigation controls with current and total page numbers between buttons](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-12/nav-controls.png)\n\n- Create a handler function `handlePreviousPage` that uses `setSearchParams` to set `page` to `currentPage - 1` while preventing the value from decreasing below 1.\n- Create a handler function `handleNextPage` that increments the `page` value with a max value of `totalPages`.\n- Add click handlers to the Previous and Next buttons using these handler functions.\n\n#### Protect against Invalid URL Parameters\n\n- Disable the Previous button if the `currentPage` is the first page using the `disabled` props: `disabled={currentPage === 1}`\n- Disable the Next button when the last page is reached: `disabled={currentPage === totalPages}`\n- Create a `useEffect` that examines the `currentPage`:\n  - If it is not a valid number (eg: \"moose\"), less than 1, or greater than `totalPages`, programmatically navigate to `\"/\"`\n  - Add `currentPage`, `totalPages`, and `navigate` to the dependency array.\n\n#### Allow the User to Navigate Directly\n\nOne problem that arises is that the todos are initially empty while they are being fetched from Airtable. As the `useEffect` is currently written, it automatically navigates back to \"/\" if a user refreshes the page or navigates directly to a url that includes a page param. At the time if this writing, `isLoading` is insufficient to prevent React-Router from navigating the user away. The render cycle sets that value to false before calculating any of the data used for pagination.\n\n- Wrap the contents of the `useEffect` in an `if` statement that evaluates `totalPages`.\n  - If it is greater than 0, permit the `navigate(\"/\")` to fire.\n\n![demo of todo pagination and reloading page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/assignments/assets/week-12/router-params-demo.gif)\n\n### Closing Notes\n\nNext week, we will be looking at the larger React ecosystem and deploying an app.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b287"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b282"
        },
        {
          "subsectionOrder": 2,
          "title": "Pagination",
          "content": "Pagination is a design pattern commonly used to divide a large dataset into smaller, more manageable chunks or pages. This is something that can be accomplished on the client on a relatively small data set, like CTD-Swag's product list. More often though, pagination is done on the API since response containing all results would be too large to be practical. A search for \"gamer mouse\" from Amazon.com reveals over 70,000 results!\n\n![Amazon search results for \"gamer mouse\"](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/mouse-search.png)\n\nExamples of where pagination in websites and web applications include:\n\n- **Search results** - web search, store catalog search, news website articles search\n- **Product listings** - web store department landing pages\n- **Article-based websites** - blogs, professional journals, news\n- **Image Galleries** - social media platforms, art/photography forums, art galleries\n\nIn the UI, pagination typically includes previous and next buttons, and page numbers to allow the user to systematically navigate the date. The underlying state revolves around whether it is working with a local dataset or whether an API is responding with already paginated data.\n\n#### Paginating a Local Dataset\n\nThis is the simpler of the two to work with since we implement the pagination ourselves. Similar to the filtering that we did in week 8, paginating involves passing along a part of an original list. Rather than filtering it though, we slice portions out of the list based on a pagination size and an offset value. Pagination size is the number of items or amount of text that would be in a typical chunk or page. The offset value is the number of items to skip. Depending on the API, pagination works with individual items skipped or with a page index. Going with 20 items per page we end up with the following chunks:\n\n- Page 1: items 1-20, offset = 0 (don't forget that arrays start at index 0 so it's more accurately items 0-19)\n- Page 2: items 21-40, offset = 20\n- Page 3: items 41-60, offset = 40\n- ...and so on...\n\nTo continue on with the discussion, we'll build out a phonebook, Here is a link to the [completed demo app](https://github.com/Code-the-Dream-School/phonebook). An SPA phonebook can have hundreds of entries stored locally, especially when we can take advantage of localStorage in the browser. For such an app, it's beneficial to implement data pagination with pagination controls in the UI. Here's an animated screen capture of the final interface in action:\n\n![Phonebook demo](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/phonebook-pagination.gif)\n\nThis app can be broken down visually into the components that we'll be using:\n\n![Phonebook interface components](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/phonebook-interface.png)\n\n- **App** - wraps the UI and manages state for the complete contacts lists\n- **Phonebook**\n  - child of App\n  - manages pagination logic and state\n  - wraps children\n- **Page**\n  - child of Phonebook\n  - displays a table view of currently rendered contacts\n- **Pagination**\n  - child of Phonebook\n  - buttons for paging forward and backwards through the contacts list\n  - displays page numbers\n\nMost of the logic is performed in the Phonebook component but first we need to get the simulated data into the application. We import a JSON file containing all of the contacts and then add it to state in App. From there, we pass as props into the Phonebook:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nimport Phonebook from './Phonebook';\n\nconst sortedContacts = importedContacts.sort((a, b) =>\n    a.lastName.localeCompare(b.lastName)\n);\n\nfunction App() {\n    const [contacts] = useState(sortedContacts);\n    return (\n        <>\n            <main>\n                <h1>CTD Phone Book</h1>\n                <Phonebook contacts={contacts} />\n            </main>\n        </>\n    );\n}\n\nexport default App;\n```\n\nInside of Phonebook resides the logic that is needed to paginate the contacts list. It also has to manage the UI state so that the user can page forwards and backwards through the contacts. We start with a `currentPage` state value of 1 and set `entriesPerPage` to 20. These two values can be used to calculate the indices of the first and last element we want to include on the page.\n\n```jsx\n{/*extract from Phonebook.jsx*/}\n{/*...code*/}\nconst Phonebook = ({ contacts }) => {\nconst [currentPage, setCurrentPage] = useState(1);\nconst entriesPerPage = 20;\n\n//index of the last item in the current pagination\nconst indexOfLastEntry = currentPage * entriesPerPage;\n\n//index of the first item in the current pagination\nconst indexOfFirstEntry = indexOfLastEntry - entriesPerPage;\n\n//uses previous values to slice out the appropriate subset to pass to `Page`\nconst currentEntries = contacts.slice(indexOfFirstEntry, indexOfLastEntry);\n\nreturn (\n    <div>\n        <Page contacts={currentEntries} />\n        <Pagination/>\n    </div>\n);\n\nexport default Phonebook;\n```\n\nThe first page is displayed and experiment with pagination in the React Dev tools by updating `currentPage`:\n\n![Toggling page state value](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/toggle-state.gif)\n\nWe now create the handlers that page forward and back through the list. When the page number updates, React initiates the render cycle and the update then cascades through the pagination logic to provide `Page` with the current subset of contacts.\n\n```jsx\n{/*extract from Phonebook.jsx*/}\n{/*...code*/}\n\nconst totalPages = Math.ceil(contacts.length / entriesPerPage);\n\nconst handleNextPage = () => {\n    //only page forward if it is not the last page\n    if (currentPage < totalPages) {\n        setCurrentPage(currentPage + 1);\n    }\n};\n\nconst handlePreviousPage = () => {\n    //only page backwards if it is not the first page\n    if (currentPage > 1) {\n        setCurrentPage(currentPage - 1);\n    }\n};\n{/*code continues...*/}\n```\n\nWe now pass these handlers, along with the current page number and a page count, into the Pagination component.\n\n```jsx\n{/*extract from */}\n{/*...code*/}\nreturn (\n    <div>\n        <Page contacts={currentEntries} />\n        <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        handleNextPage={handleNextPage}\n        handlePreviousPage={handlePreviousPage}\n        />\n    </div>\n);\n{/*code continues...*/}\n```\n\nIn the `Pagination` component, we insert the `currentPage` and `totalPages` between two buttons. We can then wire the buttons to increment and decrement the current page number.\n\n```jsx\n{/*extract from Pagination.jsx*/}\nimport styles from './Pagination.module.css';\n\nconst Pagination = ({\n    currentPage,\n    totalPages,\n    handlePreviousPage,\n    handleNextPage,\n}) => {\n    return (\n        <nav className={styles.pagination}>\n            <button onClick={handlePreviousPage} className={styles.buttons}>\n                Previous\n            </button>\n            <span>\n                Page {currentPage} of {totalPages}\n            </span>\n            <button onClick={handleNextPage} className={styles.buttons}>\n                Next\n            </button>\n        </nav>\n    );\n};\n\nexport default Pagination;\n```\n\nWe have a functioning app but we are not quite done yet...\n\n![Back button still enabled](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/enabled-buttons.png)\n\nWhile the logic is place to prevent the Previous or Next button from working after reaching the first or last page of the list, the user needs an indication that the button has been disabled. We can disable the buttons by comparing the current page number with the values of the first and last page.\n\n```jsx\n{/*extract from Pagination.jsx*/}\n{/*...code*/}\n<button\n    disabled={currentPage === 1}\n    onClick={handlePreviousPage}\n    className={styles.buttons}\n>\n    Previous\n</button>\n<span>\nPage {currentPage} of {totalPages}\n</span>\n<button\n    disabled={currentPage === totalPages}\n    onClick={handleNextPage}\n    className={styles.buttons}\n>\nNext\n</button>\n{/*code continues...*/}\n```\n\n![\"Previous\" button disabled](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/previous-disabled.png)\n![\"Next\" button disabled](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/next-disabled.png)\n\n#### Working with a Paginated Data Response\n\n> [!note]\n> Normally, we would also implement response caching alongside server-based pagination. For the sake of clarity, we will leave it out of this discussion.\n\nWhen pagination is done on an API, our main concern becomes using a fetch request with query params. We'll use [json-server](https://github.com/typicode/json-server#readme) as a locally API that serves the JSON file full of contacts on localhost port 3000. To receive a paginated response from `json-server` we have to add the following url params to a fetch:\n\n- `_page=<<some number>>`\n- `_per_page=<<some number>>`\n\nHere is an example fetch from the browser:\n\n![Example fetch from json-server](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/browser-fetch.png)\n\nThe server also includes some handy values in the response body that we can incorporate into our navigation logic:\n\n- `prev` - previous page number - `null` if already on page 1\n- `next` - next page number - `null` of on last page\n- `pages` - total page count\n\nOur first step is to determine changes we need to make to our state. First off, since we are no longer working with a full contact list, we can safely remove any state from the App component:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nfunction App() {\n    return (\n        <>\n            <main>\n                <h1>CTD Phone Book</h1>\n                <Phonebook />\n            </main>\n        </>\n    );\n}\nexport default App;\n```\n\nWe can then remove the props from the Phonebook component then look at its pagination logic to determine what can be safely removed and what needs replaced with the API response data. We can get an idea of the state we absolutely need by looking to Phonebook's return statement. The Page and Pagination components, which we do not need to modify take the following:\n\n```jsx\n{/*extract from Phonebook.jsx*/}\n{/*...code*/}\nreturn (\n    <div>\n        <Page contacts={currentEntries} />\n        <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        handleNextPage={handleNextPage}\n        handlePreviousPage={handlePreviousPage}\n        />\n    </div>\n);\n{/*code continues...*/}\n```\n\n- `currentEntries`: we replace this with a new `contacts` state we update with API responses\n- `currentPage`: re-usable as-is since it only changes via the buttons' event handlers\n- `totalPages`: update to set the value from API responses\n- `handleNextPage` and `handlePreviousPage`: re-usable as-is since they only change `currentPage`\n\n```jsx\n{/*extract from Phonebook.jsx*/}\n{/*...code*/}\nimport { useState } from 'react';\nimport Page from './Page';\nimport Pagination from './Pagination';\nimport { useEffect } from 'react';\n\nconst testEntry = [{firstName: \"Mister\", lastName: \"Developer\", email:  \"a@b.com\", phone: \"867-5309\"}]\nconst entriesPerPage = 20;\n\nconst Phonebook = () => {\n    //testEntry keeps the list visible\n    //`contacts` replaces `currentEntries`\n    const [contacts, setContacts] = useState(testEntry);\n    const [currentPage, setCurrentPage] = useState(1);\n    //will be updated with API response\n    const [totalPages, setTotalPages] = useState(0);\n    \n    const handleNextPage = () => {\n        if (currentPage < totalPages) {\n            setCurrentPage(currentPage + 1);\n        }\n    };\n\n    const handlePreviousPage = () => {\n        if (currentPage > 1) {\n            setCurrentPage(currentPage - 1);\n        }\n    };\n\n    return (\n        <div>\n            <Page contacts={contacts} />\n            <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            handleNextPage={handleNextPage}\n            handlePreviousPage={handlePreviousPage}\n            />\n        </div>\n    );\n};\n\nexport default Phonebook;\n{/*code continues...*/}\n```\n\n![Single entry in phonebook](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/single-entry.png)\n\nWe are now ready to add in our fetch using `useEffect`. `currentPage` gets added to the dependency array. This way, any time a button is clicked, the event helpers will update `currentPage`, which will, in turn, send off another fetch with updated url params. The `useEffect` no sends off a fetch when the component first renders and then every time `currentPage` is updated afterwards.\n\n```jsx\n{/*extract from Phonebook.jsx*/}\n{/*...code*/}\nconst baseUrl = 'http://localhost:3000/contacts';\nconst entriesPerPage = 20;\nuseEffect(() => {\n    const fetchContacts = async () => {\n        const url = `${baseUrl}?_page=${currentPage}&_per_page=${entriesPerPage}`\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            setContacts(data.data);\n            setTotalPages(data.pages);\n        } catch (error) {\n            console.error('Error fetching contacts:', error);\n        }\n    };\n    fetchContacts();\n  }, [currentPage]);\n{/*code continues...*/}\n```\n\nOur Phonebook app now behaves like it did previously but now we are fetching the page data from our API:\n\n![Paginated data loaded from API](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/server-pagination-demo.gif)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b283"
        },
        {
          "subsectionOrder": 3,
          "title": "React Router and Routing",
          "content": "#### Navigating SPAs vs Traditional Websites\n\nReact SPAs differ from traditional websites in terms of routing and navigation. Each page of a traditional website has its own HTML file and associated URL. Navigating between pages involves making a request to the server to fetch a new HTML document. This process is managed by the browser, which updates the URL and maintains a [history stack](https://developer.mozilla.org/en-US/docs/Web/API/History_API) that users to use the back and forward buttons to navigate through their browsing history.\n\nIn contrast, a React SPA loads a single HTML file and and uses a script to dynamically update the content on the page. This means that navigation in the app does not involve fetching new HTML documents from the server. Instead, React components are rendered or hidden based on the application's state. This approach can lead to faster and fluid UI but it also means that the URL does not change when navigating around the app and the browser's history remains unchanged.\n\nA major disadvantage of not leveraging browser history in a React SPA is the inability to use the back and forward buttons effectively. In a traditional website, these buttons allow users to navigate through their previous actions, providing a familiar and intuitive way to move through the site. A React SPA does not offer this functionality by default which can lead to a frustrating user experience. A user may lose their place in the application or be unable to return to a previous state easily. Even worse, if they hit the browser's back button, they may exit the application entirely!\n\n![Pressing back button leaves app](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/back-button-accident.gif)\n\nAnother issue with unchanging URLs in a React SPA is the difficulty in sharing specific views or states within the application. Look again at the URL above - it never changes while navigating the app. In a traditional website, the URL uniquely identifies the content being viewed, making it easy to bookmark or share links to specific pages. Without routing, a React SPA cannot provide this capability, as the URL remains the same regardless of the content being displayed. This can make it challenging for users to share specific parts of the application with others or to return to a particular view later.\n\nTo address these issues, developers often use routing libraries like React Router, which allow them to manage navigation and update the URL dynamically. These libraries enable React SPAs to mimic the behavior of traditional websites by updating the browser's history stack and changing the URL based on the application's state. This not only improves the user experience by enabling the back and forward buttons but also allows for better sharing and bookmarking of specific views within the application.\n\n#### React Router\n\n> [!note]\n> There are two ways to use React Router. We will implement it as a library, not a full framework.\n\n[React Router](https://reactrouter.com/home) is a popular library that emulates page navigation inside of React apps. After putting into place users will be able to take advantage of browser history to navigate the app and even share urls to specific products with other people. Before proceeding any further, we have to go over some of the components and hooks that the makes up the library.\n\n##### Components\n\n- **BrowserRouter** - provides context to the application that manages browser history and in-app navigation logic\n  - internally, BrowserRouter is a higher-order component\n    - sub-components NavigationContext.Provider and LocationContext.Provider provide the actual context\n    - we don't work with these directly but they appear in Reacts dev tools\n  - accepts children props\n- **Routes** - performs pattern-matching on URL segments to determine the appropriate route to use\n  - accepts 1 or more `Route` component as children props\n- **Route** - defines a path segment and maps it to a corresponding UI element to be rendered\n  - takes a `path` props that represents the segment\n  - takes an `element` props that is the component (or regular html element) that gets rendered\n- **Link** - replacement for navigation links that allows a user to navigate between defined routes without refreshing the page\n- **NavLink** - similar to Link but also tracks if belongs to the current active route - automatically adds \"active\" to its class list\n\n##### Hooks\n\n- **useParams** - gives the developer an object that contains params from any dynamic segments in a URL\n- **useSearchParams** - gives the developer access to url params that come after the `?` in a URL\n- **useNavigate** - returns a function that allows the developer to programmatically navigate to a target route\n  - takes a string that represents the destination of the link. Usually one of the route segments\n  - or takes a number that navigates back or forward in the browser's history stack\n- **useLocation** - provides the developer an object from the location context that contains information about the current location\n\n##### Advanced Features not being Covered\n\n- route nesting\n- layout routes\n- and some other hooks such as `useLocation`, `useSearchParams`, `useLocation`\n\n#### Implement Routing using React Router\n\nWe will take a deeper look at each of the components and hooks as we build routing into the store. We will be adding in the following routes:\n\n- **\"/\"** - index or default route\n- **\"/checkout\"**\n- **\"/account\"**\n- **\"/products/:id\"**\n\n##### Installation and Setup\n\nTo get started, we install React Router.\n\n`npm install react-router`\n\nFrom here, we wrap App with BrowserRouter to provide App the navigation and location context. This is very similar to the context provider we used last week.\n\n```jsx\n{/*extract from main.jsx*/}\n{/*...code*/}\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>\n);\n```\n\nMulti-page sites tend to have one or more repeating element that appears on every page. This gives the site a cohesive look and feel from one page to another. Reused navigation elements also help make navigation easier. For these reasons, CTD-Swag's header and footer should be shown on each page.\n\n![header and footer highlighted](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/header-footer-highlight.png)\n\nThe elements in the App component is already laid out in a way that will allow us to share the header and footer across pages. The App returns the the following element structure, minus all the props:\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\nreturn (\n    <>\n      {isDialogOpen && (\n        <Dialog/>\n      )}\n      <Header/>\n      <main>\n        {isAuthDialogOpen && (\n          <AuthDialog/>\n        )}\n        <ProductViewForm/>\n        <ProductList/>\n        {cartState.isCartOpen && (\n          <Cart/>\n        )}\n      </main>\n      <Footer />\n    </>\n  );\n{/*code continues...*/}\n```\n\nThe page can be split into three primary elements: **Header**, **main**, and **Footer**. The Dialog component is only a conditionally rendered component that doesn't affect the flow of the html document so we [can safely ignore](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/In_flow_and_out_of_flow) it. Main is the ideal element to make into the unique part of the pages since it's centrally located and takes up the majority of the browser's existing viewport.\n\n![main element on page highlighted](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/main-highlighted.png)\n\n##### Refactor App to add Routes\n\nWe need to refactor the contents of `main` to make way for Route and Routes components. AuthDialog and Cart components are also out of flow and conditionally rendered so is the easiest item to move. We can move AuthDialog's condition block just above `main` and Cart's below `main`. Some styles need updated to slightly reposition these but other than that, we can continue the refactor.\n\n```jsx\n<Header/>\n{isAuthDialogOpen && (\n    <AuthDialog/>\n)}\n<main> \n    <ProductViewForm/>\n    <ProductList/>\n</main>\n{cartState.isCartOpen && (\n    <Cart/>\n)}\n```\n\nThis leaves ProductViewForm and ProductList. ProductViewForm works tightly with ProductList so we'll extract them together into another component, Shop.\n\n```jsx\n{/*extract from Shop.jsx*/}\nimport ProductListFilter from '../../features/ProductListFilter/ProductListFilter';\nimport ProductList from '../../features/ProductList/ProductList';\n\nfunction Shop({\n  filteredProducts,\n  handleAddItemToCart,\n  setSortBy,\n  setIsSortAscending,\n  sortBy,\n  isSortAscending,\n  searchTerm,\n  setSearchTerm,\n}) {\n  return (\n    <>\n      <ProductListFilter\n        setSortBy={setSortBy}\n        setIsSortAscending={setIsSortAscending}\n        sortBy={sortBy}\n        isSortAscending={isSortAscending}\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n      />\n      <ProductList\n        products={filteredProducts}\n        handleAddItemToCart={handleAddItemToCart}\n      />\n    </>\n  );\n}\n\nexport default Shop;\n```\n\n> [!note]\n> Cleaning up all those props would be a good use case for `useReducer`! We'll add that to the task backlog.\n\n##### Adding Routes and Route Elements\n\nSince this component is specific to React-Router, we can create a new directory in our project for \"pages\" to keep Shop and other route-associated components organized neatly.\n\n![pages directory in project](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/pages-dir.png)\n\nOur next step is to add in a Routes component and our Route components. We'll use Shop as the first Route's element and [stub](https://en.wikipedia.org/wiki/Method_stub) in the remaining routes using draft components that we'll flesh out for each route later.\n\n![route components are placed into route](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/routes-stubbed.png)\n\nThe Route using Shop also takes a `path=\"/\"` which indicates this is an index page. We could optionally replace `path` props with an `index` attribute: `<Route index element={<Shop ...props />} />` which behaves the same way. Be careful to provide only one of the two items as they cannot be combined.\n\nWith the Routes in place and the index route completed, we can next work on the component for `\"/account\"`. This component shows the user's information and we'll also move the Logout button to this page to clean up the heading a little.\n\n```jsx\n{/*Account.jsx*/}\nimport { Link } from 'react-router';\n\nfunction Account({ user, handleLogOut }) {\n    return (\n        <div className=\"account\">\n            <h2>Your Account</h2>\n            <div className=\"accountDetails\">\n                <p>First Name: {user.firstName}</p>\n                <p htmlFor=\"lastName\">Last Name: {user.lastName}</p>\n                <p htmlFor=\"email\">Email: {user.email}</p>\n            </div>\n            <div className=\"buttonGroup\">\n                <Link className=\"linkButton\" to={'/'}>\n                Go back\n                </Link>\n                <button onClick={handleLogOut}>Log Out</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Account;\n```\n\nWe include the Link component to add navigation back to the home page. Link is designed to work with the contexts React-Router provides and allows for navigation without having the page refreshes normally associated with `<a></a>` anchors. We continue to use `<a></a>` when linking to external resources. We can then go back to App and add the `user` and `handleLogOut` props.\n\nWe then add the `user` and `handleLogOut` props into the Account instance passed to the `Route`.\n\n```jsx\n{/*extract from App.jsx*/}\n{/*...code*/}\n{user.id && (\n    <Route\n        path=\"/account\"\n        element={<Account user={user} handleLogOut={handleLogOut} />}\n    />\n)}\n{/*code continues...*/}\n```\n\n Finally, update the user salutation in the header to link to the account page.\n\n```jsx\n{/*extract from Header.jsx*/}\n{/*...code*/}\n<>\n    <Link to=\"/account\" className=\"linkButton\">\n        <span>Hi, {user.firstName}</span>\n    </Link>\n</>\n{/*code continues...*/}\n```\n\nNow that we have 2 routes in place, let's view the site in the browser:\n\n![navigate to account route](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/nav-to-account.gif)\n\nWhen a user navigates, the URL updates and they can use their back button.\n\nSince the account route is only available to logged in users, we can't navigate to it directly by typing it in the URL. Let's implement the `\"/checkout\"` route to so we can see how React-Router responds to the contents of the URL a user adds to the URL bar. We can base this component off the cart component since they both work with `cart` state. We will also exclude the form that updates the item quantities since the user can work with the form already in cart.\n\n```jsx\n{/*extract from Checkout.jsx*/}\nimport { Link } from 'react-router';\nimport CheckOutItem from './CheckoutItem';\n\nfunction Checkout({ cart }) {\n  function getTotal() {\n    return cart\n      .reduce((acc, item) => acc + item.price * item.quantity, 0)\n      .toFixed(2);\n  }\n    return (\n        <>\n            <h2>Checkout Page</h2>\n            <ul>\n                {cart.map((item) => {\n                return <CheckOutItem key={item.id} item={item} />;\n                })}\n            </ul>\n            <h2>Total: {getTotal()}</h2>\n            {cart.length < 1 ? <p>cart is empty</p> : null}\n            <div className=\"buttonGroup\">\n                <Link className=\"linkButton\" to=\"/\">\n                Go Back\n                </Link>\n                {/* permanently disabled since this is just a demo*/}\n                <button disabled>Checkout</button> \n            </div>\n        </>\n    );\n}\n\nexport default Checkout;\n```\n\nLike the Cart, we will also iterate over the items in the cart to render preview cards. Unfortunately, their html elements will differ enough from CartCard so it cannot be reused.\n\n```jsx\n{/*extract from CheckoutItem.jsx*/}\nimport placeholder from '../../assets/placeholder.png';\nimport styles from './CheckoutItem.module.css';\n\nfunction CheckOutItem({ item }) {\n    return (\n        <li className={styles.cartItem}>\n            <img src={placeholder} alt=\"\" />\n            <div>\n                <h2>{item.baseName}</h2>\n                {item.variantName !== 'Default' ? <p>{item.variantName}</p> : null}\n            </div>\n            <div className={styles.subtotal}>\n                <p>Count: {item.quantity}</p>\n                <p>Subtotal: ${(item.price * item.quantity).toFixed(2) || '0.00'}</p>\n            </div>\n        </li>\n    );\n}\n\nexport default CheckOutItem;\n```\n\nFinally, we provide Checkout state it needs to render the checkout page.\n\n```jsx\n{/*extract from */}\n<Route\n    path=\"/checkout\"\n    element={<Checkout cart={cartState.cart} />}\n/>\n{/*...code*/}\n{/*code continues...*/}\n```\n\nWe now have a component state that React can render based on the URL segments:\n\n![refreshing page with checkout route in address bar](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/refresh-checkout.gif)\n\nWe can tell that the application has lost its state when the page refreshes because the user is not logged in and the cart is empty. What remains, though, shows that it's properly rendering an empty Checkout component.\n\n##### Using URL params\n\nOur next route, `\"/products/:id\"` includes a dynamic segment. `:id` represents the value that is parsed out of a segment. This is usually an identifier that can be used to look up some item kept in a state object. It can also represent some other data that the developer can incorporate into their app but the value extracted from the dynamic segment will be a string. We have to convert a value meant to be a number ourselves.\n\nNow that we have an understanding of dynamic segments, we can begin developing the ProductDetails component. This page provides a user with more information about a product than could fit into a smaller card. It also includes each one of the variants some of the products have. For example, the bucket hat comes in two choices: black and peach.\n\n![showing bucket hat variants](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/bucket-hats.png)\n\nWe will also continue with the Page and Cards pattern so that we can neatly display all the product variants for each product. This time around, we'll focus only on the ProductDetails component since its card behaves the same as the other cards.\n\nOur first step is to add a dynamic segment to the original `\"/products\"` route so it looks like `\"/products/:id\"`. We then import the `useParams` hook into ProductDetails. Calling `useParams` gives us an object containing all the parsed parsed values of dynamic segments found in the URL. For example, this URL:\n\n```text\nhttps://ctd-swag.com/admins/233/manage/stock/items/43989/\n```\n\nwhen matched up against a Route with a path written as\n\n```jsx\n{/*isolated example*/}\n<Route\n    to=\"/admins/:adminId/manage/inventory/item/:stockId\"\n    element={<InventoryItem />}\n/>\n```\n\nwould result in an a returned object that resembles:\n\n```js\nconst paramsObj = {\n    adminId: \"233\",\n    stockId: \"43989\"\n}\n```\n\nDon't forget to coerce the text into numbers if they are meant to be used in any calculations. JavaScript does this for us but it's a convenience that is falling out of favor because of TypeScript's growing popularity and a few bizarre coercion rules that can cause bugs.\n\nReturning to CTD-Swag's products route, we can see that if a browser's URL bar contains the following: `http://localhost:5173/products/3e41a7cb-63d3-4e4f-a576-a27cc9953e3a`. Our Route's path props takes `\"/products/:id\"` . We can tell that when using `useParams` will result in an object that looks something like:\n\n```js\ncont paramsOjb = {\n    id: \"3e41a7cb-63d3-4e4f-a576-a27cc9953e3a\"\n} \n```\n\nLet's put this into place in ProductDetails. We import it into our scaffolded ProductDetails component and then call it just below the component's function definition opening:\n\n```jsx\n{/*extract from ProductDetails*/}\n{/*...code*/}\nimport { useParams } from 'react-router';\nimport styles from './ProductDetails.module.css';\n\nconst ProductDetail = () => {\n  const { id } = useParams();\n\n  return (\n    <div>\n        <h2>Product Details</h2>\n        <p>Product id: {id}</p>\n    </div>\n  );\n};\n\nexport default ProductDetail;\n{/*code continues...*/}\n```\n\n![product id shown on page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/product-id.png)\n\nSince we are working with local state and our ProductDetail component has to be able to render *any* single product, not just a product that is passed into it this `id` come in handy. We can use it to look up the product in a `products` props that we add to the component's props.\n\n```jsx\n{/*extract from ProductDetails*/}\n{/*...code*/}\nconst ProductDetail = ({ products, handleAddItemToCart }) => {\n    const { id } = useParams();\n    \n    const [product] = products.filter((product) => {\n        return product.id === id;\n    });\n{/*code continues...*/}\n```\n\nInside the component's return body, we can conditionally render the `product` if the lookup is successful:\n\n```jsx\n{/*extract from */}\n{/*...code*/}\n{/*code continues...*/}\n```\n\n![bucket hats variations shown](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/bucket-hats2.png)\n\n...or if the lookup fails:\n\n![message of nothing found on product page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/nothing-found.png)\n\nWe've dealt with a missing product, but what if the user employs a url that doesn't match any Route's path? Since the Router fails to match the route, it fails to render anything from inside the `<Route>` component instance. We also get a series of console warnings that are useful during development but are unhelpful to the user.\n\n![no routes component rendered](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/blank-route-component.png)\n\nTo address this, we employ a special \"catchall\" route. It uses a path value of asterisk `\"*\"` which is a common [wildcard character](https://en.wikipedia.org/wiki/Wildcard_character).\n\n```jsx\n{/*extract from App.jsx*/}\n{/*props removed for clarity*/}\n{/*...code*/}\n<Routes>\n    <Route\n        path=\"/\"\n        element={<Shop/>}\n    />\n    <Route\n        path=\"/checkout\"\n        element={<Checkout/>}\n    />\n    {user.id && (\n        <Route\n            path=\"/account\"\n            element={<Account/>}\n        />\n    )}\n    <Route\n        path=\"/products/:id\"\n        element={\n            <ProductDetail/>\n        }\n    />\n    <Route path=\"*\" element={<NotFound} />\n</Routes>\n{/*code continues...*/}\n```\n\nHere's the associated NotFound component:\n\n```jsx\n{/*extract from 404.jsx*/}\n{/*...code*/}\nfunction NotFound() {\n  return <h2>404: Not Found</h2>;\n}\nexport default NotFound;\n{/*code continues...*/}\n```\n\nThis improves the interface so the the user understands that something went wrong.\n\n![404 message displayed](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/404.png)\n\nAll of the routes are in place so now we need to improve a few details about navigation. Inside cart, we want to put a link that looks like a button that will navigate to the `\"/checkout\"` route.\n\n![cart showing a checkout button](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-12/cart-with-checkout.png)\n\nWe can use the hook, `useNavigate` for this task which we import into Cart. When we call it, it gives us a function that we can use to programmatically navigate the application. In our case, we create a `handleCheckout` event handler that calls `navigate` with `'/checkout'`:\n\n```jsx\n{/*extract from Cart.jsx*/}\n{/*...code*/}\nimport { useNavigate } from 'react-router';\nimport CartItem from './CartItem';\n\nfunction Cart({\n    cart,\n    handleCloseCart,\n    handleUpdateCart,\n    cartError,\n    isCartSyncing,\n}) {\n    const navigate = useNavigate();\n\n//...code continues...\n\n    function handleCheckout(e) {\n        e.preventDefault();\n        handleCloseCart();\n        navigate('/checkout');\n    }\n{/*code continues...*/}\n\n```\n\nAlternatively, we can `useNavigate` with a delta value which is a number that represents how far forward or back in the history stack to navigate. For example: `useNavigate(-1)` would be the equivalent of hitting the browser's back button. Negative numbers, especially -1 are the most common values seen but positive values would work if the back only if the current page is several layers below the top of the history stack.\n\nRouting is a powerful tool that enhances the user experience by providing intuitive and efficient navigation within your applications. We've only touched on the highlights of the library and it contains other hooks, components, and methods. Even with just with what has been discussed this week, you have a robust and flexible set of tools that simplifies the implementation of routing in React.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b284"
        }
      ]
    },
    {
      "id": "68d6a34a88b86b203f95b289",
      "lessonNumber": 13,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 13",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "## Weekly Assignment Instructions\n\nNo assignments are due this week.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b28b"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Discussion Topics",
          "content": "### Snapshot of the React Ecosystem\n\n#### Frameworks that Use React\n\nThrough the course, we have used Vite + React to practice what we have learned by building out projects. Vite provides a very friendly start to your React journey and can even be used successfully in small to medium projects. It is a solid foundation! For some products, especially those of larger size, it can be beneficial to adopt a framework that use React instead of just using React and a development server. These frameworks have solved some of the most common challenges in developing full-scale applications and often provide powerful routing and state management options. Some also make use of React Server Components or their own systems to form full-stack applications. All of the frameworks listed below are recommended by the React team as options for larger production applications.\n\n**[Next.js](https://nextjs.org/docs)**: Summary of features: file-based routing, client and server side component rendering, improved data fetching, optimization of assets and scripting to improve app performance.\n**[React Router](https://reactrouter.com/start/framework/installation)**: Summary of features: file-based or declarative routing, [type safety](https://en.wikipedia.org/wiki/Type_safety), multiple rendering strategies\n**[TanStack Start](https://tanstack.com/start/latest)**: Summary of features: client and server-side rendering, type safety, built-in fetch, automatic caching and preloading, async state management.\n**[RedwoodJS](https://redwoodjs.com/)**: Summary of features: deployment flexibility, CLI tools, declarative routing, declarative data fetching, GraphQL, Prisma as a backend.\n\n#### Component and UI Libraries\n\nSimilar to frameworks, these libraries solve common challenges that React developers face. These tend to focus on solving complex UI requirements or improving the development experience. Some provide well-polished components that assist with accessibility or creating intuitive and pleasant interfaces. Others focus on theming or providing starting points for design systems.\n\n**[HeroUI (Previously NextUI)](https://www.heroui.com/docs/guide/introduction)**: Combines Tailwind and React Aria and provides a customizable design system for attractive interfaces.\n**[Tailwind CSS](https://v2.tailwindcss.com/docs)**: Utility class-based CSS framework.\n**[MUI](https://mui.com/)**: Google's Material Design implemented in React components.\n**[Headless UI](https://headlessui.com/)**: Un-styled components that focus on solving accessibility challenges.\n**[Radix UI](https://www.radix-ui.com/)**: Pre-styled component library that focuses on providing common design elements such as dialogs, menus, forms, cards, and many others.\n**[React Bootstrap](https://react-bootstrap.netlify.app/)**: Bootstrap adapted to React applications - provides styling and common design elements\n**[Chakra UI](https://chakra-ui.com/)**: Themeable components for common design elements. Uses props for styling.\n\n#### Other React Libraries\n\n##### State Management\n\n[Zustand](https://zustand.docs.pmnd.rs/getting-started/introduction)- State management library that is lighter than redux but solves some complex state management pitfalls.\n**[Redux Toolkit](https://redux-toolkit.js.org/introduction/getting-started)**- Centralized state management. It's built on top of [Redux](https://redux.js.org/) with the aim to reduce the amount of boilerplate code needed to perform state management tasks.\n\n##### Animation\n\n[Motion](https://github.com/motiondivision/motion)\n[react-spring](https://www.react-spring.dev/)\n[GSAP](https://gsap.com/)\n\n##### Data Fetching\n\n**[TanStack Query](https://tanstack.com/query/latest/docs/framework/react/overview)**: Assists with fetching, caching, and synchronizing server state. It comes with TanStart but can also work independently of that framework.\n**[Axios](https://axios-http.com/docs/intro)**: Build on the older [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) but still used because of its extensive API that makes certain data fetching tasks easier.\n\n##### Misc\n\n**[react-toastify](https://www.npmjs.com/package/react-toastify)**: In-browser, customizable user notifications\n**[Formik](https://formik.org/)**: Improves form development by handling state values, validation, errors, and form submission.,\n**[uniforms](https://uniforms.tools/)** - Set of libraries that generate forms from developer-defined schemas.\n\n#### VS Code Plugins\n\nEditing code in a plain text editor is a valid approach that is used successfully by some developers but a lot of us like to extend our code editor's capabilities. The list below provides some recommendations for those who are interested in enhancing their productivity and experience with VS Code. These extensions range from visual tweaks to tools that can assist in project management.\n\nEnhancing your coding experience goes beyond basic text editing and can greatly improve productivity. While some developers favor a straightforward approach with plain text editors, extending VS Code can elevate your coding workflows to new heights. This curated list of VS Code extensions offers a range of tools and features that enhance productivity, streamline project management, and customize the coding environment to suit your individual preferences.\n\n**[JS JSX Snippets](https://marketplace.visualstudio.com/items?itemName=skyran.js-jsx-snippets)**: Expands preconfigured keywords into commonly typed code snippets.\n**[CSS Var Complete](https://marketplace.visualstudio.com/items?itemName=phoenisx.cssvar)**: Intellisense support for CSS custom properties.\n**[GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)**: AI agent by GitHub that helps with coding tasks.\n**[Highlight Matching Tag](https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag)**: Easily identify a matching tag when one is selected.\n**[Markdown All in One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)**: Improves markdown functionality\n**[markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)**: Linter that highlights parts of a markdown file that violates rules based in best practices.\n**[Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)**: Searches a repo for all todos and comment keywords and surfaces them in a directory-like structure. This can also be configured to highlight console statements so you don't forget to remove them.\n\n#### Other Development Tools\n\nThe IDE, terminal, and documentation are the most important tools in a React developer's arsenal but there are other tools to consider.\n\n##### Working with APIs\n\nThese tools help developers work with APIs by saving all aspects of fetch requests: endpoints, methods, headers, payloads, etc. Both employ environmental variable that can be interpolated into the requests so they be re-used between locally hosted, sandbox, and live backend applications. Postman has many other features including pre and post fetch scripting but tends to run slowly at times. HTTPie is the lighter of the two listed.\n\n**[Postman](https://www.postman.com/)**:\n**[HTTPie](https://httpie.io/desktop)**:\n\n##### Developer's Notebook\n\nKeeping a development journal is important for developers for several reasons:\n\n- **Problem Solving**: Writing down issues, errors, and solutions can help in problem-solving. Keeping notes organized in a single system can serve as a reference to revisit when facing similar problems in the future.\n- **Knowledge Sharing**: You can use a journal to capture insights, tips, and best practices and share your learning with others in the community. It contributes to collective knowledge and fosters collaboration.\n- **Learning and Growth**: Reflecting on past projects, experiments, and experiences can aid in learning from mistakes and successes. It promotes continuous learning and personal growth.\n- **Enhanced Focus and Organization**: Maintaining a journal can help you stay organized, set goals, prioritize tasks, and maintain focus on projects.\n\n**[Joplin](https://joplinapp.org/)**: Open source note taking application that organizes markdown notes into notebooks.\n**[Obsidian](https://obsidian.md/)**: Free, markdown based digital notebook with a range of productivity and styling plugins.\n\n##### Databases\n\nAlthough we did not work with databases during this course, they are a common part of any web application. Using a database manager helps with development tasks such as examining relational structures, populate or remove test data.\n\n**[DBeaver Community | Free Universal Database Tool](https://dbeaver.io/)**:\n\n##### TypeScript\n\n**[TypeScript](https://www.typescriptlang.org/)** is a static typing syntax placed on top of JavaScript that streamlines the development process and can enhance the overall quality of a codebase. Static types (types that can't be accidentally changed) help developers better understand the data that they are working with. It provides information about what type of data to pass into functions and other interfaces and the values they return.\n\nVS Code and other modern web development IDEs give developers live feedback and autocompletion geared towards writing cleaner and more reliable code. By defining types for variables, props, and state, and using types found in most libraries, developers can catch errors which results in fewer runtime issues. It also makes the codebase more accessible to new developers joining the project and simplifies the onboarding process.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b28a"
        }
      ]
    },
    {
      "id": "68d6a34a88b86b203f95b28d",
      "lessonNumber": 14,
      "title": "# Discussion Topics",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 14",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "## Weekly Assignment Instructions\n\nFinal project checklist:\n\n- [Downloadable PDF version](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/reusable-content/final-project-checklist.pdf)\n- [Downloadable markdown version](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/reusable-content/final-project-checklist.md)\n\nThere are no coding assignments to submit this week. Start with your final project based on the discussions above. Don't forget that there is may be a mindset response to turn in though!",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b292"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b28e"
        },
        {
          "subsectionOrder": 2,
          "title": "Final Project Requirements",
          "content": "Over the past 13 weeks, we've discussed React's major features and techniques to employ to create a rich and interactive SPAs. You've watched several example apps come together and you practiced concepts on the todo list. This final, 2 week project demonstrates this gained knowledge. You'll have an opportunity to build out a React app that can take a proud place in your developer portfolio!\n\n- [Downloadable PDF version of the checklist](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/reusable-content/final-project-checklist.pdf)\n- [Downloadable markdown version of the checklist](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/reusable-content/final-project-checklist.md)\n\n#### General\n\n- [ ] Uses a public Github repo.\n- [ ] Scaffolded using Vite with the `react` (not `react-ts`, `react-swc`, or `react-swc-ts`) template.\n- [ ] Uses NPM\n- [ ] Installs and uses dependencies: \"react-router\".\n\n#### Coding Practices\n\n- [ ] Formatting should be neat and consistent across the codebase. Prettier can help with this!\n- [ ] Only 1 component per file unless using Styled-Components.\n- [ ] Component names should be in PascalCase and filenames should match the components they house.\n- [ ] Minimize the use of implicit type coercion.\n- [ ] Favor functional over non-functional approaches. (eg: use array.prototype.map instead of array.prototype.forEach)\n- [ ] Comments should be concise and only used for explaining tricky or complex code passages. Remove all commented-out code and personal notes.\n- [ ] Project files that contain only utility or helper functions and no components should be given the `.js` extension.\n\n#### Project Structure\n\n##### Repo Structure\n\n- [ ] Root directory contains:\n  - [ ] src/\n  - [ ] .env.local.example file with example values for all environmental variables needed to run project\n  - [ ] .gitignore which includes at least the following entries:\n    - [ ] `node_modules`\n    - [ ] `dist`\n    - [ ] `*.local` (this covers the `.env.local` file you use for secrets)\n    - [ ] `.DS_Store`\n  - [ ] index.html - the only changes permitted are in the `<head></head>`\n    - [ ] 3rd-party stylesheets are permitted if used in conjunction with an installed library. All other styling should be in src/\n  - [ ] package.json\n  - [ ] package-lock.json`\n  - [ ] vite.config.js\n  - [ ] README.md which includes:\n    - [ ] Project title and description\n    - [ ] Details on any added dependencies, especially those that may manipulate the DOM directly.\n    - [ ] Instructions on how to install and run\n    - [ ] Any details needed for an API connection\n      - [ ] If credentials needed, indicate services used\n- [ ] Root should NOT contain:\n  - [ ] node_modules/\n  - [ ] .env.local or any other file with sensitive information\n  - [ ] Any component files other than App.jsx and main.jsx\n  - [ ] any Yarn artifacts\n- [ ] `public/` - the favicon can be changed but this directory should not be used\n- [ ] `src/` directory contains at minimum:\n  - [ ] `assets/` directory for all included imagery, fonts, etc, unless they are retrieved from an external source.\n  - [ ] `features/` directory containing at least 2 features\n    - [ ] If features use more than one component, all related components should reside in a sub-directory with the feature name.\n  - [ ] `pages/` directory containing at least 3 page components\n  - [ ] `shared/` directory containing at least 2 components that are used in more than one feature\n  - [ ] App.css\n  - [ ] App.jsx\n  - [ ] main.jsx\n- [ ] Other directories may be added so long as the assist in keeping the project's code well-organized.\n\n##### Project Data Schema Structure\n\n- [ ] use any approach accessible to you (look back to the discussion) to create 1 or more objects or arrays of objects to load into state or save to state\n- [ ] use the simplest structures needed to model data in your application\n\n#### Demonstrates Understanding of React Concepts\n\n- [ ] The browser's page should never refresh during user interaction.\n- [ ] All components should be functional (no class-based components).\n- [ ] Use only React-compatible props.\n- [ ] State should never be mutated.\n- [ ] Components should return valid JSX.\n- [ ] The DOM should never be directly accessed or manipulated unless required by a 3rd-party library.\n  - [ ] Make a note of any libraries that do this in the README.\n- [ ] All communication with external data sources should be done asynchronously.\n- [ ] Project uses at least:\n  - [ ] 1 component that takes `children` props\n  - [ ] 2 re-usable components each containing 2 or more html elements/sub-components + uses props\n  - [ ] 4 conditionally rendered components or elements.\n  - [ ] 1 controlled component form with at least 1 validated field.\n  - [ ] 2 `useEffect` calls.\n  - [ ] 1 `useCallback`.\n- [ ] All dependency arrays for hooks are accurate for their use case.\n- [ ] `useEffect` calls should return a cleanup function as appropriate.\n- [ ] Any array of rendered components must include a unique `key` props.\n  - [ ] Keys must not be derived from the item's index.\n\n#### Uses React-Router for Routing\n\n- [ ] react-router is installed in the project.\n- [ ] The `App` component instance in main.jsx is wrapped with a `BrowserRouter` instance.\n- [ ] Includes at least 2 routes.\n- [ ] All `Route` instances use components in the `pages/` directory for their element props.\n- [ ] Include a wildcard route with a \"Not Found\" page.\n- [ ] Uses `NavLink` instances for global navigation (can use `Link` instances elsewhere)\n\n#### Behavior\n\n##### Startup\n\n- [ ] Installs without error (other than minor package updates)\n- [ ] Application starts without errors.\n- [ ] On loading, application performs a network request or interacts a browser storage mechanism to retrieve data used in app.\n  - [ ] Loading status is displayed to user in UI.\n  - [ ] *Reviewers need to be able to access whatever resource is used with minimal setup!*\n    - [ ] Any publicly accessible APIs used must be open for anonymous use or free to sign up for.\n    - [ ] If a local server is used:\n      - [ ] **Warning: mentors will not be able to assist with troubleshooting any server issues** so this option is best for those with adequate experience!\n      - [ ] it must use Node.js as a runtime (no Deno, Bun, Python, Ruby, PHP etc.)\n      - [ ] it must run error-free\n      - [ ] A link to its repo and setup/running instructions are included in the project's README\n\n##### Functionality\n\n- [ ] All components and any user interactions should be error-free (excluding anything beyond student's control, such as API uptime). Warnings are acceptable.\n- [ ] The app should never crash.\n- [ ] StrictMode must remain in place in main.jsx\n- [ ] Form inputs and labels must be properly associated with each other.\n- [ ] Any foreseeable network or process errors must be caught and communicated to the user, as appropriate, through the UI.\n- [ ] App allows user to interact with data central to the purpose of the app.\n  - [ ] Create\n  - [ ] Read\n  - [ ] Update\n  - [ ] Delete (optional)\n- [ ] Persists data using an API and/or Local Storage or IndexedDB.\n\n#### Appearance/UX\n\n- [ ] Styling should only be written using CSS, CSS Modules, or Styled-Components. No component or theming libraries.\n  - [ ] Exceptions can be made for notification systems - seek CIL approval first.\n- [ ] Uses consistent theming and layouts across pages and elements.\n- [ ] Uses a different font for headings and non-heading text.\n- [ ] Interface text is legible for the typical user.\n- [ ] Images must include brief, descriptive alt text (this excludes images that serve only as decoration).\n- [ ] Any sounds used must be mutable from within the app's interface.\n- [ ] `NavLink` instances should visually differentiate between the currently active route's link and other, inactive route links.\n- [ ] Imagery and other assets should generally be optimized for the sizes that they are being used. (eg: don't use a 4k resolution, 2MB jpg for a 5cm tall user avatar!)",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b28f"
        },
        {
          "subsectionOrder": 3,
          "title": "Planning Your Project",
          "content": "#### Finding an Idea\n\nDuring the final 2 weeks of this course, you will create a React app from scratch! This project will demonstrate that you understand all the basic concepts of working with React to build an SPA. While coming up with idea for your project, make sure that it is complex enough to meet all of the project requirements but small enough to complete in 2 weeks. For reference, the todo list that we have been working is on easy side but the CTD-Swag storefront is much more complex.\n\nIf you don't have any app ideas yet, doing an internet search for \"React application ideas\", \"front end projects\" or anything along those lines will land numerous lists of app ideas to consider. However, some of the best ideas come from your personal experience though. It could help with some hobby or occupation, be entertaining like a game or puzzle, or solve some other challenge that you are interested in.\n\n#### Consider Possible Features\n\nAs you explore potential app ideas, consider the major features that it it could include. It's often helpful to think of them along with how the user interacts with the application. Here are a few examples:\n\n**Recipe Finder**\n\n- Users can search for and view recipes.\n- They can create their own recipes.\n- They can rate recipes and save favorites\n- They can create shopping lists from recipes.\n\n**Fitness Tracker**\n\n- Users can log their daily workouts, track repetitions, and weights used.\n- They can set workout goals and track progress.\n- They can receive workout suggestions based on fitness level.\n\nSo that we have single app to help illustrate points without ruining any of your potential ideas, we'll expand the todo list app that we've been working on. We'll start by describing it similar to the examples above:\n\n**Todo List**\n\n- Users can log into an account that is used to manage their todos.\n- Users can create, edit, delete, and mark todos as completed.\n- They can set due dates, prioritize todos, and organize them into different todo lists.\n- They can sort and search todos.\n\n#### Data\n\nWe then need to consider the data used to manage state in the app. This is usually comes in two forms: either, 1.) the major data entities (usually objects or an array of objects) in the system or 2.) the transient UI state employed to indicate long-running operations. For the todo list, the major entities would include:\n\n- The user\n- Todo lists\n- Todos\n\n##### Entity Relations\n\nDefining the relationship between the major data entities in your app may be one of the most challenging aspects of planning unless you have some background with relational databases. You may end up choosing the same sort of schema that we used in the todo app. This pulls and saves data to a single table and may be enough for your purposes.\n\nTo give you some other options to explore, we'll simplify some of relational database concepts so we can model some common data relationships that you may need to work with. We'll look at each entity and determine how many of another entity they interact with and how they interact. The common relationships that we will look for:\n\n- one to many\n- many to many\n- many to one\n- one to one\n\nGoing back to the enhanced todo list, we can identify several relations between a user, todos, and todo lists.\n\n- **One** user can have **many** todo lists, but a list can only be owned by one user: one to many\n- **One** todo list can have **many** todos, but a todo can only belongs one todo list. one to many\n- **Many** users can have **many** todo lists. Since users don't interact or share todo lists the app does not need to address a \"many users\" relation. This relationship commonly employs a \"join\" table that does nothing more than connect a `userId` to a `todoListId`. This sort of relation often appears in social apps or where there are many users using a single platform collaboratively.\n- **Many** todos can have only **one** todo list. And **many** todo lists can have only **one** user. This is just an awkward way of saying a todo (no matter how *many* of them are in the system) can only belong to a single todo list and that a todo list can only belong to a single user. Just like the many to many relationship, these relations often appear in social apps.\n- A **one** to **one** relation doesn't exist in the todo app.\n\nThe relationships found in the todo list app can be expressed in the form of an [ER](https://www.geeksforgeeks.org/introduction-of-er-model/) (entity relation) diagram:\n\n```mermaid\nerDiagram\n    USER ||--|{ TODO-LIST : \"has one or more\"\n    TODO-LIST ||--o{ TODO : \"has 0 or more\"\n```\n\nWe then use `id`s as a means to tie the \"many\" side of the relationship to the single entity's side. Each todo list will include a `userId` property that is given the user's `id`. We'll be able to identify all the user's lists by looking at the `userId` property. The same goes for each todo: as a todo is added to a list, it will have a `listId` property that will be set to the list's id. It may change as the user moves todos from one list to another but it still references a list that is owned by a user.\n\nWe don't have to define a relationship in this model between the user and the todos because it's already been done. A todo can only belong to one list and a list can only belong to one user. Since that can be traced back, we don't need to include a `userId` property on each of the todos.\n\n```mermaid\nerDiagram\n    USER ||--|{ TODO-LIST : \"has one or more\"\n    TODO-LIST ||--o{ TODO : \"has 0 or more\"\n\nUSER {\n    string id PK\n}\nTODO-LIST {\n    string id PK\n    string userId FK\n}\n\nTODO{\n    string id PK\n    string todoListId FK\n}\n```\n\n##### Entity Properties Needed for State\n\nLet's also take some time to identify the properties for each entity. While doing so, try to stick with the least amount of properties possible to properly manage state around that entity. The app would need a user's login credentials, a title for each todo list, and enough properties on each todo object so that the user is able to:\n\n- name the todo\n- set a due date\n- add additional notes\n- set a priority level\n- complete the todo\n- know how old it is\n\nWe'll add those properties to the ER diagram:\n\n```mermaid\nerDiagram\n    USER ||--|{ TODO-LIST : \"has one or more\"\n    TODO-LIST ||--o{ TODO : \"has 0 or more\"\n\nUSER {\n    string id PK\n    string email\n    string password\n}\nTODO-LIST {\n    string id PK\n    string userId FK\n    string title\n    date createdAt\n}\n\nTODO{\n    string id PK\n    string todoListId FK\n    string title\n    string notes\n    date createdAt\n    boolean isCompleted\n    date dueDate\n    enum priority \"high, medium, low\"\n}\n```\n\n##### Transient UI State\n\nTransient state for the todo app includes:\n\n- rendering temporary \"processing\" indicators while:\n  - a user is being authenticated\n  - a todo is saving to the API\n  - a todo list is being created or modified\n- reverting a todo to an older version if there was an API error.\n\n#### Wireframing\n\nAfter establishing the data needed for the app, we need to start thinking about the visual layout. Sketching out pages and how they are broken down into components is often called wireframing. If you are comfortable with digital tools like [Figma](https://www.figma.com/) or [PenPot](https://penpot.app/), you can use them. If not, a pencil and some paper works fairly well. We'll start with the biggest elements which are each of the feature pages, and then divide them down into regions, grouping related elements together.\n\n![Wire-frames of each todo list app page](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/lessons/assets/week-14/wireframe.png)\n\n We can already identify 2 common components that are shared between features - the header and the navigation menu. Beyond that, each todo list tab and each todo are reusable components. The button to submit a new todo could potentially be re-used in the auth/login panel and a form to update user information. Account information will most likely consist of a form where a user can update their details. The about page will include descriptive text about todo app.\n\nIt's very tempting to go in to minute detail when building a wireframe but only expend the time necessary to better understand how the interface can be broken down into components. You can refine this into a full design prior to starting active work on the app but it will be up to you how detailed it is.\n\n#### Technologies\n\nThis part of the project planning will differ widely between projects. Project requirements aside, some may need 3rd party libraries while others may not. The todo list app does not need any but we can discuss some of the considerations when looking to bring in other tools. You can search for popular JavaScript libraries on [GitHub](https://github.com/explore) or [NPM](https://www.npmjs.com/). Online developer communities are also a good source of information as long as you disregard some of the hot takes.\n\n- [DEV Community](https://dev.to/)\n- [webdev: reddit for web developers](https://www.reddit.com/r/webdev/)\n- [Bringing the web out of 2007 since 2013.](https://www.reddit.com/r/Frontend/)\n- [Javascript - GameDev.net](https://www.gamedev.net/tag/javascript/)\n- [Discord Servers - Home](https://discord.com/servers)\n- [Latest JavaScript topics - The freeCodeCamp Forum](https://forum.freecodecamp.org/c/javascript/421)\n\n**Compatibility and Maintainability**: Ensure that the library is compatible with our React version and other dependencies. Evaluate the library's flexibility and customization options to meet your specific project needs.\n\n**Popularity and Community Support**: Check the library's popularity ([GitHub Stars](https://docs.github.com/en/get-started/exploring-projects-on-github/saving-repositories-with-stars), [NPM](https://docs.npmjs.com/about-the-public-npm-registry) weekly downloads), active community engagement on GitHub Issues or the author's support platform, and frequency of updates. Libraries with a strong user base and ongoing support are likely to be more reliable and well-maintained. Check for reviews, feedback, and recommendations from other developers who have used the library. Consider their experiences, insights, and any potential issues they have encountered when integrating the library into their projects.\n\n**Documentation**: Review the library's documentation for clarity, completeness, and examples. Well-documented libraries make it easier for developers to understand the functionality, implementation, and integration of the library into their projects.\n\n**Limitations for this course**: Make sure you are not using any styling/theming libraries or component libraries other than CSS Modules or Styled Components. Also avoid any pay-to-use libraries, APIs, or backend services - free tier is okay.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b290"
        },
        {
          "subsectionOrder": 4,
          "title": "Getting Started",
          "content": "After creating your data structures, wireframes, and identifying other libraries that may be useful, it's time to begin work! To keep your project going smoothly, it's a good idea to plan out some at least some of the work tasks before committing code. Group your tasks around features and order them from least to most complex. This is how we'll outline our discussion below. You can use a todo list, a kanban board, a readme file, or whatever you are comfortable with. For solo projects, it's also okay to not write any of this out if that is what works best for you.\n\n#### Early Tasks\n\n- Establish the repo and the project structure.\n- Create a Vite project that uses the React template.\n- Install the project and any dependencies.\n- Configure vite.config.js with the settings for additional libraries if needed.\n- Optionally add in and configure development productivity tools like ESLint and Prettier.\n\n#### Tasks for Scaffolding the App\n\nThese tasks should focus on initial development of major components and sub-components of each feature. Substitute most state for static values to keep your code as flexible as possible. Get the layout and styling close to how you want them to look. This early scaffolding sometimes reveal areas of a layout that may need some revision or re-thought entirely. Since data is still static, it's comparatively easy to make big changes to layouts or functionality.\n\n#### Tasks to Add in Mock State and Interactivity\n\nAfter the scaffold is in place, focus tasks on replacing static values with state. This can be mock state that is populated with pre-generated data. There are plenty of resources that generate JSON that can be found by doing an internet search for \"generate mock data\". With mock state in place, start working with events that update the state.\n\nHere are a few tasks that you should anticipate:\n\n- Make sure schemas are compatible between the app and API or external storage. They have to match or you have to create an adapter to make the app and API understand each other's data.\n- For forms:\n  - Anticipate having to add in local working state\n  - Prevent event default behavior on button clicks\n- Intermediate state to communicate important operations to the user\n\n#### Tasks for Introducing Dynamic Data\n\nDefine tasks around bringing data into your application and turning it into state. Add in CRUD (create, read, update, delete) operations as needed.\n\n#### Start Coding\n\nAlthough the planning phase may sound complicated, not every detail about app needs to be completely understood. It's okay to start developing without knowing everything about your app. Focus on understanding how your state renders components and how user events update that state. This will give you some direction when you discover some new challenge after you've started work on a feature. You may also end up adding or removing features before completing your project. Expect your plan to change and allow room for adjustments.\n\nWhile working on your final, never forget about the resources at your disposal. You don't have to do this project all alone. Code the Dream has a passionate group of volunteer mentors that are excited to help you out. They have been where you have been and understand how challenging coding is! They are there to help you work through ideas and coach you through challenges.\n\nBest of luck to you and happy coding!",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b291"
        }
      ]
    },
    {
      "id": "68d6a34a88b86b203f95b294",
      "lessonNumber": 15,
      "title": "# Continued Project Work",
      "status": "pending",
      "assignment": {
        "title": "Assignment for Lesson 15",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "## Weekly Assignment Instructions\n\nFinal project checklist:\n\n- [Downloadable PDF version](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/reusable-content/final-project-checklist.pdf)\n- [Downloadable markdown version](https://raw.githubusercontent.com/Code-the-Dream-School/react-curriculum-v3/refs/heads/main/learns-app-content/reusable-content/final-project-checklist.md)\n\nVerify that your app works and all of the project requirements are met.For the coding assignment this week, submit a link to your final project repo, not a PR. Reviewers will engage with you on Slack if the project needs revisions.\n\n## Project Demo Details\n\nIt is good practice to talk about what you have learned and know about project as you will be asked to talk about your experiences in job interviews. This is why we ask all students to give a short demo of their final projects. This **demo is NOT graded and your performance in the demo will have no bearing on your graduation**. Please record a 3-5 minute presentation that touches on all of the following:\n\n - [ ] Provide a quick overview of the app\n - [ ] Demonstrate your app's functionality\n - [ ] Show any additional features of the app such as pagination, search functionality, or anything you may have included\n - [ ] Share what the most challenging part of the project and what you enjoyed working on the most or answer any of the following questions:\n   - [ ] Did you encounter any problems? How did you resolve them? What resources did you use?\n   - [ ] What did you have the most fun building?\n   - [ ] Did you reach your end goal?\n   - [ ] How would you want to continue your project and grow it further? \n\n## How to Record Your Presentation\n\nYou can record your presentation in any of these three ways:\n 1. Logging into your personal Zoom account and record your personal meeting where only you are in attendance and you are screen-sharing your work ([this is a link to a video on how to do this](https://www.youtube.com/watch?v=njwbjFYCbGU))\n 2. Use a screen recording program already on your machine\n\t- [Mac users can use this link to watch a how-to video](https://www.youtube.com/watch?v=w9Byefp51tY)\n\t- [Windows users can use this link to watch a how-to video](https://www.youtube.com/watch?v=PJB7pM5bvNI)\n 3. Use an online option such as loom ([link to a how to video on loom here](https://www.youtube.com/watch?v=oAdLPbfXcQo)).\n\n## How to Upload and Share your Video\n\n<details>\n<summary>Click here to expand detailed instructions on how to upload your recording</summary>\n<br>\n<h4>1. Make sure you're logged in to youtube.</h4>\n <p>If you don't have a youtube account, <a href=\"https://support.google.com/youtube/answer/161805?hl=en&co=GENIE.Platform%3DDesktop\">create one by following these instructions</a>.</p>\n <p>You will know you're logged in if you have an initial/icon/other in the top right corner (where the M in the brown circle is on this screenshot):</p>\n\n ![User logged in to youtube account](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.01.20%E2%80%AFPM.png?raw=true)\n\n <h4>2. Click `+ Create` in the top right and select `Upload video`</h4>\n\n ![Create menu expanded](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.01.27%E2%80%AFPM.png?raw=true)\n\n <h4>3. In the Upload videos window that appears, click the black `Select files` button</h4>\n <p>You'll need to select the file of your recording you have saved on your computer.</p>\n\n ![Upload videos modal](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.01.35%E2%80%AFPM.png?raw=true)\n\n<h4>4. The fle title will be the default video title. You can change this to include your name and \"Intro to Programming Final Project Presentation\"</h4>\n\n![Edit Video Details title](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.02.17%E2%80%AFPM.png?raw=true)\n\n<h4>5. Scroll down under the title; select \"No, it's not made for kids\" and click on the `Show more` gray button to make further setting changes</h4>\n\n![Adjust video settings](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.02.30%E2%80%AFPM.png?raw=true)\n\n<h4>6. You'll want to be sure the following options for some of the sections that appear after click `Show more` are set to the following:</h4>\n\n - [ ] Altered content: select \"No\" since you have not used AI to alter reality in your video\n - [ ] Recording date and location: please select the date you made your final project recording\n - [ ] Shorts remixing: select \"Don't allow remixing\"\n - [ ] Comments and ratings: if you would like classmates to leave comments, leave comments \"On\", otherwise you can turn them off by selecting \"Off\". *NOTE: we do not and cannot monitor comments. Please report anything concerning to Code the Dream but have screenshots if needed.* You can also UNcheck the \"Show how many viewers like this video if you wish.\n - [ ] Click the black `Next` button in the bottom right to proceed from the Details section of the upload through the Video elements and Checks portion.\n - [ ] Once you are on the Visibility section of the upload, select \"Unlisted\" as seen here\n\n![Select Unlisted](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.04.52%E2%80%AFPM.png?raw=true)\n\n - [ ] Lastly, click `Save` and copy your video link as seen here\n\n![Save and copy](https://raw.githubusercontent.com/Code-the-Dream-School/intro-to-programming-2025/d2f9b35d7206eeb0af24f85a8e8e5d97d43cbfad/images/Screenshot%202025-01-27%20at%204.05.09%E2%80%AFPM.png?raw=true)\n\n</details>\n\nIf you're nervous about recording, remember that the folks watching are here to support and champion you (and likely have had to do one of these too at some time!) so they'll understand nerves and forgive mistakes. Here is a great [video on public speaking](https://www.youtube.com/watch?v=Q074YSGwRTM)\nIf you're worried about messing up, here is a great [video on failure](https://tekkieuni.com/blog/failure-in-coding-is-a-good-thing/)\n\nBoth of these videos will set you up for success and may help you feel more comfortable with your presentation.  Reach out to mentor and classmates if you need moral support or a practice audience!\n\n## Submit Your Recording\n\nOnce you have recorded your presentation, please submit it in your usual lesson submission form (be sure you have Lesson 15 selected!).\nYou can access the Jay React Class Video Gallery [here](https://airtable.com/appoSRJMlXH9KvE6w/shrwUUVxYK5iV5vOT)",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b296"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Continued Project Work",
          "content": "The final project is due at the end of this week. If you know that your project is going to be late due to illness, unexpected family issue, technical problems, etc., please reach out to the [Cohort Lead on Slack](https://codethedream.slack.com/team/U03KDBGK5M5) to request an extension.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a34a88b86b203f95b295"
        }
      ]
    },
    {
      "id": "68d6a3bf88b86b203f95b4ba",
      "lessonNumber": 16,
      "title": "Class Information",
      "status": "complete",
      "assignment": {
        "title": "Assignment for Lesson 0",
        "objective": "No objective specified",
        "expectedCapabilities": [],
        "instructions": [],
        "tasks": [
          {
            "taskNumber": 1,
            "title": "Task 1",
            "description": "## Weekly Assignment Instructions\n\nWe are almost done with this week as we prepare to jump into the course. You are encouraged to become familiar with all the material above and the student handbook. A thorough review of all materials will help you set up a routine that will support your learning.\n\n- [ ] After reading this week's materials you will probably have a few questions. Write down your questions that you have. Bring them to your first group session and share them with the mentor hosting that session.\n- [ ] Finally, complete the quiz at the following link. <!-- PLACEHOLDER --> will let us know that you understand how to navigate the course.\n\nThere is no coding assignment for this week.",
            "codeExample": "",
            "_id": "68d6a34a88b86b203f95b29e"
          }
        ],
        "submissionInstructions": "Please submit on time",
        "checklist": [],
        "checkForUnderstanding": []
      },
      "subsections": [
        {
          "subsectionOrder": 1,
          "title": "Introduction",
          "content": "# Class Information\n\n## Discussion Topics",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a3bf88b86b203f95b4bb"
        },
        {
          "subsectionOrder": 2,
          "title": "What You'll Get Out of this Course",
          "content": "You will be learning React, a popular user interface (UI) development library used to create interactive web applications. We will build a [to-do list](https://en.wikipedia.org/wiki/Time_management#Implementation_of_goals) application over the course of the weekly assignments. The final two weeks of the course are dedicated to a final project. With the knowledge gained from this course, you will be equipped with the knowledge to work on real-world React applications!",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a3bf88b86b203f95b4bc"
        },
        {
          "subsectionOrder": 3,
          "title": "Course Structure",
          "content": "#### Curriculum Outline\n\nThe Intro to React v3 course consists of 13 weekly lessons and 2 project weeks for a final project of your choosing. Each of the weekly lessons builds on previous lessons so it is important that you go through the course in order. Don't skip around or miss a week.\n\n- **Weeks 1-6** focus on the basics of React and how to build out a simple application\n- **Weeks 7-9** teach how to incorporate remote data fetched from and saved to an API\n- **Week 10** covers how to use CSS to style an application's user interface (UI)\n- **Weeks 11-12** teach techniques to manage complex data in an application\n- **Week 13** introduces common tools and libraries that a React developer will need to know about\n- **Week 14-15** project time!\n\nOne of the main requirements for graduation is that all weekly assignments must include a link to a [pull request (PR)](https://github.blog/developer-skills/github/beginners-guide-to-github-creating-a-pull-request/) that has been reviewed and approved by your assigned reviewer.\n\nThe materials for the course is further broken down into a full list of topics covered each week. Every section is titled with their topics so that they double as useful search terms when looking for external resources.\n\n- **Week 1** - Intro to React, App Installation, and Project Walk-Through\n- **Week 2** - ReactDOM, Components, JSX, and Troubleshooting\n- **Week 3** - State, Props, Common Component Props\n- **Week 4** - Basic Hooks, Events and Handlers, Updating State\n- **Week 5** - Conditional Rendering, Controlled Components and Forms\n- **Week 6** - Re-usable Components, Project Organization, Refactoring, and Testing\n- **Week 7** - Data fetching, Conditional Rendering, UI Update Strategies\n- **Week 8** - Sorting, Filtering\n- **Week 9** - useCallback, useMemo, Limiting Network Requests\n- **Week 10** - Styling and Including Graphical Elements\n- **Week 11** - Advanced State and useReducer, useContext\n- **Week 12** - Pagination and React-Router\n- **Week 13** - Deploying an App and a Snapshot of the React Ecosystem (frameworks, libraries, TS)\n- **Week 14** - Final Project Begin - Requirements, Planning, and Getting Started\n- **Week 15** - Final Project - Continued Work",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a3bf88b86b203f95b4bd"
        },
        {
          "subsectionOrder": 4,
          "title": "Weekly Lesson Structure",
          "content": "Each weekly lesson page has the same structure so you'll know where to find specific information where you need it:\n\n1. Introduction\n   1. Topics covered\n   2. Objectives\n2. Discussion\n   1. Cover topics in order\n   2. Code examples\n3. Weekly assignment instructions\n   1. Description of app's capabilities on submission\n   2. Instructions\n4. References and Further Reading\n\n#### 1. Introduction\n\nThe introduction will give you information about what you're going to learn that week and how it applies to to the bigger picture.\n\n#### 2. Discussion\n\nIn the discussion portion of each weekly lesson, we will explore each of the listed topics in depth. We will learn key techniques and best practices that developers employ while working with the topics presented. Many coding examples are from another project we'll watch come together: CTD's new eCommerce Store : CTD Swag. No coding for that project is required from you, but if you're interested, a repo for this project can be [found here](https://github.com/royemosby/ctd-swag).\n\n#### 3. Weekly Assignment Instructions\n\nMost of our weekly assignments will involve developing a to-do application. Each week you will apply the lesson materials to develop the to-do app until it is complete, functional, and is worthy of a place in your portfolio.\n\nThe instructions will provide enough details to code out the week's assignment but you will also be given certain tasks to figure out how to accomplish on your own. Balancing written instruction with individual problem solving keeps the course reasonably challenging and a lot more interesting than a list of things to type into your code. Professional developers are expected to engage in problem solving and research while doing their work. Some tasks you will be responsible for may be challenging but are designed to be reasonable for a junior developer to undertake.\n\nOnce completed with the weekly lesson instructions, you'll submit a PR of the week's code changes using an assignment submission form linked at the the \"Instructions\" section. A step-by-step of how to open a PR can be [found here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). The assignment submission form also includes open-ended mindset questions that will help you start to think like a professional developers.\n\nA reviewer will look at the PR to approve it or recommend changes. You'll be expected to make any requested changes before starting the next lesson. If you have questions about the review or need any clarifications, use the conversation tools on the PR page and/or Slack to talk with your reviewer. They are there to help you out!\n\nA final note: there will be a few weeks where you will work with other repos but those will be clearly indicated in the assignment instructions.\n\n#### 4. References and Further Reading\n\nThe curriculum links to resources in each lesson but these can be difficult to find when scanning through paragraphs of text. Every weekly lesson's page ends with a section that re-lists all of these links and include other useful resources.\n\nWe hope that you find the weekly lesson page layout easy to navigate. If you have any suggestions to improve your learning experience or discover useful resources you want to share with future students, [please let us know](https://github.com/Code-the-Dream-School/react-curriculum-v3/issues)!",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a3bf88b86b203f95b4be"
        },
        {
          "subsectionOrder": 5,
          "title": "Final Project",
          "content": "The final two weeks of the course will be used to develop a final project. You will demonstrate your React knowledge to make a web application of your own choosing! It will be an opportunity to work on a problem that you find interesting or an idea that sounds like fun. Don't worry at this point if you don't have any project ideas. We will brainstorm some ideas and discuss how to plan our project work before starting on it.",
          "videoUrl": "",
          "codeExamples": [],
          "externalLinks": [],
          "quizzes": [],
          "_id": "68d6a3bf88b86b203f95b4bf"
        }
      ],
      "supplementalVideos": [
        "www.v.com"
      ],
      "references": [
        "www.r.com"
      ],
      "podcastUrl": "www.p.com"
    }
  ]
}